
buttons_switches_slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d50  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002f28  08002f28  00012f28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f40  08002f40  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002f40  08002f40  00012f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002f48  08002f48  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f48  08002f48  00012f48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f4c  08002f4c  00012f4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002f50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  2000000c  08002f5c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000dc  08002f5c  000200dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000732a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001553  00000000  00000000  00027366  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000720  00000000  00000000  000288c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000668  00000000  00000000  00028fe0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001f6ed  00000000  00000000  00029648  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000674d  00000000  00000000  00048d35  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c0e90  00000000  00000000  0004f482  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00110312  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001bc4  00000000  00000000  00110390  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08002f10 	.word	0x08002f10

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08002f10 	.word	0x08002f10

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800051c:	4b0e      	ldr	r3, [pc, #56]	; (8000558 <HAL_Init+0x40>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4a0d      	ldr	r2, [pc, #52]	; (8000558 <HAL_Init+0x40>)
 8000522:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000526:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000528:	4b0b      	ldr	r3, [pc, #44]	; (8000558 <HAL_Init+0x40>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4a0a      	ldr	r2, [pc, #40]	; (8000558 <HAL_Init+0x40>)
 800052e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000532:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000534:	4b08      	ldr	r3, [pc, #32]	; (8000558 <HAL_Init+0x40>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4a07      	ldr	r2, [pc, #28]	; (8000558 <HAL_Init+0x40>)
 800053a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800053e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000540:	2003      	movs	r0, #3
 8000542:	f000 f92b 	bl	800079c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000546:	2000      	movs	r0, #0
 8000548:	f000 f808 	bl	800055c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800054c:	f002 fb0a 	bl	8002b64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000550:	2300      	movs	r3, #0
}
 8000552:	4618      	mov	r0, r3
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	40023c00 	.word	0x40023c00

0800055c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000564:	4b12      	ldr	r3, [pc, #72]	; (80005b0 <HAL_InitTick+0x54>)
 8000566:	681a      	ldr	r2, [r3, #0]
 8000568:	4b12      	ldr	r3, [pc, #72]	; (80005b4 <HAL_InitTick+0x58>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	4619      	mov	r1, r3
 800056e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000572:	fbb3 f3f1 	udiv	r3, r3, r1
 8000576:	fbb2 f3f3 	udiv	r3, r2, r3
 800057a:	4618      	mov	r0, r3
 800057c:	f000 f943 	bl	8000806 <HAL_SYSTICK_Config>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000586:	2301      	movs	r3, #1
 8000588:	e00e      	b.n	80005a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	2b0f      	cmp	r3, #15
 800058e:	d80a      	bhi.n	80005a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000590:	2200      	movs	r2, #0
 8000592:	6879      	ldr	r1, [r7, #4]
 8000594:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000598:	f000 f90b 	bl	80007b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800059c:	4a06      	ldr	r2, [pc, #24]	; (80005b8 <HAL_InitTick+0x5c>)
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005a2:	2300      	movs	r3, #0
 80005a4:	e000      	b.n	80005a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005a6:	2301      	movs	r3, #1
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	3708      	adds	r7, #8
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	20000008 	.word	0x20000008
 80005b4:	20000004 	.word	0x20000004
 80005b8:	20000000 	.word	0x20000000

080005bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005c0:	4b06      	ldr	r3, [pc, #24]	; (80005dc <HAL_IncTick+0x20>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	461a      	mov	r2, r3
 80005c6:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <HAL_IncTick+0x24>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	4413      	add	r3, r2
 80005cc:	4a04      	ldr	r2, [pc, #16]	; (80005e0 <HAL_IncTick+0x24>)
 80005ce:	6013      	str	r3, [r2, #0]
}
 80005d0:	bf00      	nop
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	20000004 	.word	0x20000004
 80005e0:	2000004c 	.word	0x2000004c

080005e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  return uwTick;
 80005e8:	4b03      	ldr	r3, [pc, #12]	; (80005f8 <HAL_GetTick+0x14>)
 80005ea:	681b      	ldr	r3, [r3, #0]
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	2000004c 	.word	0x2000004c

080005fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b085      	sub	sp, #20
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	f003 0307 	and.w	r3, r3, #7
 800060a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800060c:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <__NVIC_SetPriorityGrouping+0x44>)
 800060e:	68db      	ldr	r3, [r3, #12]
 8000610:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000612:	68ba      	ldr	r2, [r7, #8]
 8000614:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000618:	4013      	ands	r3, r2
 800061a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000624:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000628:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800062c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800062e:	4a04      	ldr	r2, [pc, #16]	; (8000640 <__NVIC_SetPriorityGrouping+0x44>)
 8000630:	68bb      	ldr	r3, [r7, #8]
 8000632:	60d3      	str	r3, [r2, #12]
}
 8000634:	bf00      	nop
 8000636:	3714      	adds	r7, #20
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr
 8000640:	e000ed00 	.word	0xe000ed00

08000644 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000648:	4b04      	ldr	r3, [pc, #16]	; (800065c <__NVIC_GetPriorityGrouping+0x18>)
 800064a:	68db      	ldr	r3, [r3, #12]
 800064c:	0a1b      	lsrs	r3, r3, #8
 800064e:	f003 0307 	and.w	r3, r3, #7
}
 8000652:	4618      	mov	r0, r3
 8000654:	46bd      	mov	sp, r7
 8000656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065a:	4770      	bx	lr
 800065c:	e000ed00 	.word	0xe000ed00

08000660 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800066a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800066e:	2b00      	cmp	r3, #0
 8000670:	db0b      	blt.n	800068a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000672:	79fb      	ldrb	r3, [r7, #7]
 8000674:	f003 021f 	and.w	r2, r3, #31
 8000678:	4907      	ldr	r1, [pc, #28]	; (8000698 <__NVIC_EnableIRQ+0x38>)
 800067a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800067e:	095b      	lsrs	r3, r3, #5
 8000680:	2001      	movs	r0, #1
 8000682:	fa00 f202 	lsl.w	r2, r0, r2
 8000686:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800068a:	bf00      	nop
 800068c:	370c      	adds	r7, #12
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	e000e100 	.word	0xe000e100

0800069c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4603      	mov	r3, r0
 80006a4:	6039      	str	r1, [r7, #0]
 80006a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	db0a      	blt.n	80006c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	b2da      	uxtb	r2, r3
 80006b4:	490c      	ldr	r1, [pc, #48]	; (80006e8 <__NVIC_SetPriority+0x4c>)
 80006b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ba:	0112      	lsls	r2, r2, #4
 80006bc:	b2d2      	uxtb	r2, r2
 80006be:	440b      	add	r3, r1
 80006c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006c4:	e00a      	b.n	80006dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	b2da      	uxtb	r2, r3
 80006ca:	4908      	ldr	r1, [pc, #32]	; (80006ec <__NVIC_SetPriority+0x50>)
 80006cc:	79fb      	ldrb	r3, [r7, #7]
 80006ce:	f003 030f 	and.w	r3, r3, #15
 80006d2:	3b04      	subs	r3, #4
 80006d4:	0112      	lsls	r2, r2, #4
 80006d6:	b2d2      	uxtb	r2, r2
 80006d8:	440b      	add	r3, r1
 80006da:	761a      	strb	r2, [r3, #24]
}
 80006dc:	bf00      	nop
 80006de:	370c      	adds	r7, #12
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr
 80006e8:	e000e100 	.word	0xe000e100
 80006ec:	e000ed00 	.word	0xe000ed00

080006f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b089      	sub	sp, #36	; 0x24
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	60f8      	str	r0, [r7, #12]
 80006f8:	60b9      	str	r1, [r7, #8]
 80006fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	f003 0307 	and.w	r3, r3, #7
 8000702:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000704:	69fb      	ldr	r3, [r7, #28]
 8000706:	f1c3 0307 	rsb	r3, r3, #7
 800070a:	2b04      	cmp	r3, #4
 800070c:	bf28      	it	cs
 800070e:	2304      	movcs	r3, #4
 8000710:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000712:	69fb      	ldr	r3, [r7, #28]
 8000714:	3304      	adds	r3, #4
 8000716:	2b06      	cmp	r3, #6
 8000718:	d902      	bls.n	8000720 <NVIC_EncodePriority+0x30>
 800071a:	69fb      	ldr	r3, [r7, #28]
 800071c:	3b03      	subs	r3, #3
 800071e:	e000      	b.n	8000722 <NVIC_EncodePriority+0x32>
 8000720:	2300      	movs	r3, #0
 8000722:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000724:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000728:	69bb      	ldr	r3, [r7, #24]
 800072a:	fa02 f303 	lsl.w	r3, r2, r3
 800072e:	43da      	mvns	r2, r3
 8000730:	68bb      	ldr	r3, [r7, #8]
 8000732:	401a      	ands	r2, r3
 8000734:	697b      	ldr	r3, [r7, #20]
 8000736:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000738:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800073c:	697b      	ldr	r3, [r7, #20]
 800073e:	fa01 f303 	lsl.w	r3, r1, r3
 8000742:	43d9      	mvns	r1, r3
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000748:	4313      	orrs	r3, r2
         );
}
 800074a:	4618      	mov	r0, r3
 800074c:	3724      	adds	r7, #36	; 0x24
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
	...

08000758 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	3b01      	subs	r3, #1
 8000764:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000768:	d301      	bcc.n	800076e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800076a:	2301      	movs	r3, #1
 800076c:	e00f      	b.n	800078e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800076e:	4a0a      	ldr	r2, [pc, #40]	; (8000798 <SysTick_Config+0x40>)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	3b01      	subs	r3, #1
 8000774:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000776:	210f      	movs	r1, #15
 8000778:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800077c:	f7ff ff8e 	bl	800069c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000780:	4b05      	ldr	r3, [pc, #20]	; (8000798 <SysTick_Config+0x40>)
 8000782:	2200      	movs	r2, #0
 8000784:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000786:	4b04      	ldr	r3, [pc, #16]	; (8000798 <SysTick_Config+0x40>)
 8000788:	2207      	movs	r2, #7
 800078a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800078c:	2300      	movs	r3, #0
}
 800078e:	4618      	mov	r0, r3
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	e000e010 	.word	0xe000e010

0800079c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f7ff ff29 	bl	80005fc <__NVIC_SetPriorityGrouping>
}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007b2:	b580      	push	{r7, lr}
 80007b4:	b086      	sub	sp, #24
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	4603      	mov	r3, r0
 80007ba:	60b9      	str	r1, [r7, #8]
 80007bc:	607a      	str	r2, [r7, #4]
 80007be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007c0:	2300      	movs	r3, #0
 80007c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007c4:	f7ff ff3e 	bl	8000644 <__NVIC_GetPriorityGrouping>
 80007c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007ca:	687a      	ldr	r2, [r7, #4]
 80007cc:	68b9      	ldr	r1, [r7, #8]
 80007ce:	6978      	ldr	r0, [r7, #20]
 80007d0:	f7ff ff8e 	bl	80006f0 <NVIC_EncodePriority>
 80007d4:	4602      	mov	r2, r0
 80007d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007da:	4611      	mov	r1, r2
 80007dc:	4618      	mov	r0, r3
 80007de:	f7ff ff5d 	bl	800069c <__NVIC_SetPriority>
}
 80007e2:	bf00      	nop
 80007e4:	3718      	adds	r7, #24
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}

080007ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007ea:	b580      	push	{r7, lr}
 80007ec:	b082      	sub	sp, #8
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	4603      	mov	r3, r0
 80007f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f8:	4618      	mov	r0, r3
 80007fa:	f7ff ff31 	bl	8000660 <__NVIC_EnableIRQ>
}
 80007fe:	bf00      	nop
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}

08000806 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000806:	b580      	push	{r7, lr}
 8000808:	b082      	sub	sp, #8
 800080a:	af00      	add	r7, sp, #0
 800080c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800080e:	6878      	ldr	r0, [r7, #4]
 8000810:	f7ff ffa2 	bl	8000758 <SysTick_Config>
 8000814:	4603      	mov	r3, r0
}
 8000816:	4618      	mov	r0, r3
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}

0800081e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800081e:	b480      	push	{r7}
 8000820:	b083      	sub	sp, #12
 8000822:	af00      	add	r7, sp, #0
 8000824:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800082c:	b2db      	uxtb	r3, r3
 800082e:	2b02      	cmp	r3, #2
 8000830:	d004      	beq.n	800083c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	2280      	movs	r2, #128	; 0x80
 8000836:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000838:	2301      	movs	r3, #1
 800083a:	e00c      	b.n	8000856 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	2205      	movs	r2, #5
 8000840:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	681a      	ldr	r2, [r3, #0]
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	f022 0201 	bic.w	r2, r2, #1
 8000852:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000854:	2300      	movs	r3, #0
}
 8000856:	4618      	mov	r0, r3
 8000858:	370c      	adds	r7, #12
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
	...

08000864 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000864:	b480      	push	{r7}
 8000866:	b089      	sub	sp, #36	; 0x24
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
 800086c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800086e:	2300      	movs	r3, #0
 8000870:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000872:	2300      	movs	r3, #0
 8000874:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000876:	2300      	movs	r3, #0
 8000878:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800087a:	2300      	movs	r3, #0
 800087c:	61fb      	str	r3, [r7, #28]
 800087e:	e165      	b.n	8000b4c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000880:	2201      	movs	r2, #1
 8000882:	69fb      	ldr	r3, [r7, #28]
 8000884:	fa02 f303 	lsl.w	r3, r2, r3
 8000888:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	697a      	ldr	r2, [r7, #20]
 8000890:	4013      	ands	r3, r2
 8000892:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000894:	693a      	ldr	r2, [r7, #16]
 8000896:	697b      	ldr	r3, [r7, #20]
 8000898:	429a      	cmp	r2, r3
 800089a:	f040 8154 	bne.w	8000b46 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	685b      	ldr	r3, [r3, #4]
 80008a2:	2b02      	cmp	r3, #2
 80008a4:	d003      	beq.n	80008ae <HAL_GPIO_Init+0x4a>
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	685b      	ldr	r3, [r3, #4]
 80008aa:	2b12      	cmp	r3, #18
 80008ac:	d123      	bne.n	80008f6 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80008ae:	69fb      	ldr	r3, [r7, #28]
 80008b0:	08da      	lsrs	r2, r3, #3
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	3208      	adds	r2, #8
 80008b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80008bc:	69fb      	ldr	r3, [r7, #28]
 80008be:	f003 0307 	and.w	r3, r3, #7
 80008c2:	009b      	lsls	r3, r3, #2
 80008c4:	220f      	movs	r2, #15
 80008c6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ca:	43db      	mvns	r3, r3
 80008cc:	69ba      	ldr	r2, [r7, #24]
 80008ce:	4013      	ands	r3, r2
 80008d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	691a      	ldr	r2, [r3, #16]
 80008d6:	69fb      	ldr	r3, [r7, #28]
 80008d8:	f003 0307 	and.w	r3, r3, #7
 80008dc:	009b      	lsls	r3, r3, #2
 80008de:	fa02 f303 	lsl.w	r3, r2, r3
 80008e2:	69ba      	ldr	r2, [r7, #24]
 80008e4:	4313      	orrs	r3, r2
 80008e6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80008e8:	69fb      	ldr	r3, [r7, #28]
 80008ea:	08da      	lsrs	r2, r3, #3
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	3208      	adds	r2, #8
 80008f0:	69b9      	ldr	r1, [r7, #24]
 80008f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80008fc:	69fb      	ldr	r3, [r7, #28]
 80008fe:	005b      	lsls	r3, r3, #1
 8000900:	2203      	movs	r2, #3
 8000902:	fa02 f303 	lsl.w	r3, r2, r3
 8000906:	43db      	mvns	r3, r3
 8000908:	69ba      	ldr	r2, [r7, #24]
 800090a:	4013      	ands	r3, r2
 800090c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	685b      	ldr	r3, [r3, #4]
 8000912:	f003 0203 	and.w	r2, r3, #3
 8000916:	69fb      	ldr	r3, [r7, #28]
 8000918:	005b      	lsls	r3, r3, #1
 800091a:	fa02 f303 	lsl.w	r3, r2, r3
 800091e:	69ba      	ldr	r2, [r7, #24]
 8000920:	4313      	orrs	r3, r2
 8000922:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	69ba      	ldr	r2, [r7, #24]
 8000928:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	685b      	ldr	r3, [r3, #4]
 800092e:	2b01      	cmp	r3, #1
 8000930:	d00b      	beq.n	800094a <HAL_GPIO_Init+0xe6>
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	685b      	ldr	r3, [r3, #4]
 8000936:	2b02      	cmp	r3, #2
 8000938:	d007      	beq.n	800094a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800093e:	2b11      	cmp	r3, #17
 8000940:	d003      	beq.n	800094a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	685b      	ldr	r3, [r3, #4]
 8000946:	2b12      	cmp	r3, #18
 8000948:	d130      	bne.n	80009ac <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	689b      	ldr	r3, [r3, #8]
 800094e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000950:	69fb      	ldr	r3, [r7, #28]
 8000952:	005b      	lsls	r3, r3, #1
 8000954:	2203      	movs	r2, #3
 8000956:	fa02 f303 	lsl.w	r3, r2, r3
 800095a:	43db      	mvns	r3, r3
 800095c:	69ba      	ldr	r2, [r7, #24]
 800095e:	4013      	ands	r3, r2
 8000960:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	68da      	ldr	r2, [r3, #12]
 8000966:	69fb      	ldr	r3, [r7, #28]
 8000968:	005b      	lsls	r3, r3, #1
 800096a:	fa02 f303 	lsl.w	r3, r2, r3
 800096e:	69ba      	ldr	r2, [r7, #24]
 8000970:	4313      	orrs	r3, r2
 8000972:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	69ba      	ldr	r2, [r7, #24]
 8000978:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	685b      	ldr	r3, [r3, #4]
 800097e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000980:	2201      	movs	r2, #1
 8000982:	69fb      	ldr	r3, [r7, #28]
 8000984:	fa02 f303 	lsl.w	r3, r2, r3
 8000988:	43db      	mvns	r3, r3
 800098a:	69ba      	ldr	r2, [r7, #24]
 800098c:	4013      	ands	r3, r2
 800098e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	685b      	ldr	r3, [r3, #4]
 8000994:	091b      	lsrs	r3, r3, #4
 8000996:	f003 0201 	and.w	r2, r3, #1
 800099a:	69fb      	ldr	r3, [r7, #28]
 800099c:	fa02 f303 	lsl.w	r3, r2, r3
 80009a0:	69ba      	ldr	r2, [r7, #24]
 80009a2:	4313      	orrs	r3, r2
 80009a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	69ba      	ldr	r2, [r7, #24]
 80009aa:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	68db      	ldr	r3, [r3, #12]
 80009b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80009b2:	69fb      	ldr	r3, [r7, #28]
 80009b4:	005b      	lsls	r3, r3, #1
 80009b6:	2203      	movs	r2, #3
 80009b8:	fa02 f303 	lsl.w	r3, r2, r3
 80009bc:	43db      	mvns	r3, r3
 80009be:	69ba      	ldr	r2, [r7, #24]
 80009c0:	4013      	ands	r3, r2
 80009c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	689a      	ldr	r2, [r3, #8]
 80009c8:	69fb      	ldr	r3, [r7, #28]
 80009ca:	005b      	lsls	r3, r3, #1
 80009cc:	fa02 f303 	lsl.w	r3, r2, r3
 80009d0:	69ba      	ldr	r2, [r7, #24]
 80009d2:	4313      	orrs	r3, r2
 80009d4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	69ba      	ldr	r2, [r7, #24]
 80009da:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	f000 80ae 	beq.w	8000b46 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	60fb      	str	r3, [r7, #12]
 80009ee:	4b5c      	ldr	r3, [pc, #368]	; (8000b60 <HAL_GPIO_Init+0x2fc>)
 80009f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f2:	4a5b      	ldr	r2, [pc, #364]	; (8000b60 <HAL_GPIO_Init+0x2fc>)
 80009f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009f8:	6453      	str	r3, [r2, #68]	; 0x44
 80009fa:	4b59      	ldr	r3, [pc, #356]	; (8000b60 <HAL_GPIO_Init+0x2fc>)
 80009fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000a06:	4a57      	ldr	r2, [pc, #348]	; (8000b64 <HAL_GPIO_Init+0x300>)
 8000a08:	69fb      	ldr	r3, [r7, #28]
 8000a0a:	089b      	lsrs	r3, r3, #2
 8000a0c:	3302      	adds	r3, #2
 8000a0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a14:	69fb      	ldr	r3, [r7, #28]
 8000a16:	f003 0303 	and.w	r3, r3, #3
 8000a1a:	009b      	lsls	r3, r3, #2
 8000a1c:	220f      	movs	r2, #15
 8000a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a22:	43db      	mvns	r3, r3
 8000a24:	69ba      	ldr	r2, [r7, #24]
 8000a26:	4013      	ands	r3, r2
 8000a28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	4a4e      	ldr	r2, [pc, #312]	; (8000b68 <HAL_GPIO_Init+0x304>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d025      	beq.n	8000a7e <HAL_GPIO_Init+0x21a>
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	4a4d      	ldr	r2, [pc, #308]	; (8000b6c <HAL_GPIO_Init+0x308>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d01f      	beq.n	8000a7a <HAL_GPIO_Init+0x216>
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	4a4c      	ldr	r2, [pc, #304]	; (8000b70 <HAL_GPIO_Init+0x30c>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d019      	beq.n	8000a76 <HAL_GPIO_Init+0x212>
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	4a4b      	ldr	r2, [pc, #300]	; (8000b74 <HAL_GPIO_Init+0x310>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d013      	beq.n	8000a72 <HAL_GPIO_Init+0x20e>
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	4a4a      	ldr	r2, [pc, #296]	; (8000b78 <HAL_GPIO_Init+0x314>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d00d      	beq.n	8000a6e <HAL_GPIO_Init+0x20a>
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	4a49      	ldr	r2, [pc, #292]	; (8000b7c <HAL_GPIO_Init+0x318>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d007      	beq.n	8000a6a <HAL_GPIO_Init+0x206>
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	4a48      	ldr	r2, [pc, #288]	; (8000b80 <HAL_GPIO_Init+0x31c>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d101      	bne.n	8000a66 <HAL_GPIO_Init+0x202>
 8000a62:	2306      	movs	r3, #6
 8000a64:	e00c      	b.n	8000a80 <HAL_GPIO_Init+0x21c>
 8000a66:	2307      	movs	r3, #7
 8000a68:	e00a      	b.n	8000a80 <HAL_GPIO_Init+0x21c>
 8000a6a:	2305      	movs	r3, #5
 8000a6c:	e008      	b.n	8000a80 <HAL_GPIO_Init+0x21c>
 8000a6e:	2304      	movs	r3, #4
 8000a70:	e006      	b.n	8000a80 <HAL_GPIO_Init+0x21c>
 8000a72:	2303      	movs	r3, #3
 8000a74:	e004      	b.n	8000a80 <HAL_GPIO_Init+0x21c>
 8000a76:	2302      	movs	r3, #2
 8000a78:	e002      	b.n	8000a80 <HAL_GPIO_Init+0x21c>
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	e000      	b.n	8000a80 <HAL_GPIO_Init+0x21c>
 8000a7e:	2300      	movs	r3, #0
 8000a80:	69fa      	ldr	r2, [r7, #28]
 8000a82:	f002 0203 	and.w	r2, r2, #3
 8000a86:	0092      	lsls	r2, r2, #2
 8000a88:	4093      	lsls	r3, r2
 8000a8a:	69ba      	ldr	r2, [r7, #24]
 8000a8c:	4313      	orrs	r3, r2
 8000a8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a90:	4934      	ldr	r1, [pc, #208]	; (8000b64 <HAL_GPIO_Init+0x300>)
 8000a92:	69fb      	ldr	r3, [r7, #28]
 8000a94:	089b      	lsrs	r3, r3, #2
 8000a96:	3302      	adds	r3, #2
 8000a98:	69ba      	ldr	r2, [r7, #24]
 8000a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a9e:	4b39      	ldr	r3, [pc, #228]	; (8000b84 <HAL_GPIO_Init+0x320>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000aa4:	693b      	ldr	r3, [r7, #16]
 8000aa6:	43db      	mvns	r3, r3
 8000aa8:	69ba      	ldr	r2, [r7, #24]
 8000aaa:	4013      	ands	r3, r2
 8000aac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d003      	beq.n	8000ac2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000aba:	69ba      	ldr	r2, [r7, #24]
 8000abc:	693b      	ldr	r3, [r7, #16]
 8000abe:	4313      	orrs	r3, r2
 8000ac0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ac2:	4a30      	ldr	r2, [pc, #192]	; (8000b84 <HAL_GPIO_Init+0x320>)
 8000ac4:	69bb      	ldr	r3, [r7, #24]
 8000ac6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ac8:	4b2e      	ldr	r3, [pc, #184]	; (8000b84 <HAL_GPIO_Init+0x320>)
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ace:	693b      	ldr	r3, [r7, #16]
 8000ad0:	43db      	mvns	r3, r3
 8000ad2:	69ba      	ldr	r2, [r7, #24]
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d003      	beq.n	8000aec <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000ae4:	69ba      	ldr	r2, [r7, #24]
 8000ae6:	693b      	ldr	r3, [r7, #16]
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000aec:	4a25      	ldr	r2, [pc, #148]	; (8000b84 <HAL_GPIO_Init+0x320>)
 8000aee:	69bb      	ldr	r3, [r7, #24]
 8000af0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000af2:	4b24      	ldr	r3, [pc, #144]	; (8000b84 <HAL_GPIO_Init+0x320>)
 8000af4:	689b      	ldr	r3, [r3, #8]
 8000af6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000af8:	693b      	ldr	r3, [r7, #16]
 8000afa:	43db      	mvns	r3, r3
 8000afc:	69ba      	ldr	r2, [r7, #24]
 8000afe:	4013      	ands	r3, r2
 8000b00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d003      	beq.n	8000b16 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000b0e:	69ba      	ldr	r2, [r7, #24]
 8000b10:	693b      	ldr	r3, [r7, #16]
 8000b12:	4313      	orrs	r3, r2
 8000b14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000b16:	4a1b      	ldr	r2, [pc, #108]	; (8000b84 <HAL_GPIO_Init+0x320>)
 8000b18:	69bb      	ldr	r3, [r7, #24]
 8000b1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b1c:	4b19      	ldr	r3, [pc, #100]	; (8000b84 <HAL_GPIO_Init+0x320>)
 8000b1e:	68db      	ldr	r3, [r3, #12]
 8000b20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b22:	693b      	ldr	r3, [r7, #16]
 8000b24:	43db      	mvns	r3, r3
 8000b26:	69ba      	ldr	r2, [r7, #24]
 8000b28:	4013      	ands	r3, r2
 8000b2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d003      	beq.n	8000b40 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000b38:	69ba      	ldr	r2, [r7, #24]
 8000b3a:	693b      	ldr	r3, [r7, #16]
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000b40:	4a10      	ldr	r2, [pc, #64]	; (8000b84 <HAL_GPIO_Init+0x320>)
 8000b42:	69bb      	ldr	r3, [r7, #24]
 8000b44:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b46:	69fb      	ldr	r3, [r7, #28]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	61fb      	str	r3, [r7, #28]
 8000b4c:	69fb      	ldr	r3, [r7, #28]
 8000b4e:	2b0f      	cmp	r3, #15
 8000b50:	f67f ae96 	bls.w	8000880 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000b54:	bf00      	nop
 8000b56:	3724      	adds	r7, #36	; 0x24
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	40023800 	.word	0x40023800
 8000b64:	40013800 	.word	0x40013800
 8000b68:	40020000 	.word	0x40020000
 8000b6c:	40020400 	.word	0x40020400
 8000b70:	40020800 	.word	0x40020800
 8000b74:	40020c00 	.word	0x40020c00
 8000b78:	40021000 	.word	0x40021000
 8000b7c:	40021400 	.word	0x40021400
 8000b80:	40021800 	.word	0x40021800
 8000b84:	40013c00 	.word	0x40013c00

08000b88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b085      	sub	sp, #20
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	460b      	mov	r3, r1
 8000b92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	691a      	ldr	r2, [r3, #16]
 8000b98:	887b      	ldrh	r3, [r7, #2]
 8000b9a:	4013      	ands	r3, r2
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d002      	beq.n	8000ba6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	73fb      	strb	r3, [r7, #15]
 8000ba4:	e001      	b.n	8000baa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	3714      	adds	r7, #20
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr

08000bb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	460b      	mov	r3, r1
 8000bc2:	807b      	strh	r3, [r7, #2]
 8000bc4:	4613      	mov	r3, r2
 8000bc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000bc8:	787b      	ldrb	r3, [r7, #1]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d003      	beq.n	8000bd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000bce:	887a      	ldrh	r2, [r7, #2]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000bd4:	e003      	b.n	8000bde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000bd6:	887b      	ldrh	r3, [r7, #2]
 8000bd8:	041a      	lsls	r2, r3, #16
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	619a      	str	r2, [r3, #24]
}
 8000bde:	bf00      	nop
 8000be0:	370c      	adds	r7, #12
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr

08000bea <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000bea:	b480      	push	{r7}
 8000bec:	b083      	sub	sp, #12
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	6078      	str	r0, [r7, #4]
 8000bf2:	460b      	mov	r3, r1
 8000bf4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	695a      	ldr	r2, [r3, #20]
 8000bfa:	887b      	ldrh	r3, [r7, #2]
 8000bfc:	401a      	ands	r2, r3
 8000bfe:	887b      	ldrh	r3, [r7, #2]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	d104      	bne.n	8000c0e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000c04:	887b      	ldrh	r3, [r7, #2]
 8000c06:	041a      	lsls	r2, r3, #16
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8000c0c:	e002      	b.n	8000c14 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8000c0e:	887a      	ldrh	r2, [r7, #2]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	619a      	str	r2, [r3, #24]
}
 8000c14:	bf00      	nop
 8000c16:	370c      	adds	r7, #12
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr

08000c20 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000c2a:	4b08      	ldr	r3, [pc, #32]	; (8000c4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000c2c:	695a      	ldr	r2, [r3, #20]
 8000c2e:	88fb      	ldrh	r3, [r7, #6]
 8000c30:	4013      	ands	r3, r2
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d006      	beq.n	8000c44 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000c36:	4a05      	ldr	r2, [pc, #20]	; (8000c4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000c38:	88fb      	ldrh	r3, [r7, #6]
 8000c3a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000c3c:	88fb      	ldrh	r3, [r7, #6]
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f001 fd7e 	bl	8002740 <HAL_GPIO_EXTI_Callback>
  }
}
 8000c44:	bf00      	nop
 8000c46:	3708      	adds	r7, #8
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	40013c00 	.word	0x40013c00

08000c50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
 8000c58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d101      	bne.n	8000c64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000c60:	2301      	movs	r3, #1
 8000c62:	e0ca      	b.n	8000dfa <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000c64:	4b67      	ldr	r3, [pc, #412]	; (8000e04 <HAL_RCC_ClockConfig+0x1b4>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f003 030f 	and.w	r3, r3, #15
 8000c6c:	683a      	ldr	r2, [r7, #0]
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	d90c      	bls.n	8000c8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c72:	4b64      	ldr	r3, [pc, #400]	; (8000e04 <HAL_RCC_ClockConfig+0x1b4>)
 8000c74:	683a      	ldr	r2, [r7, #0]
 8000c76:	b2d2      	uxtb	r2, r2
 8000c78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c7a:	4b62      	ldr	r3, [pc, #392]	; (8000e04 <HAL_RCC_ClockConfig+0x1b4>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f003 030f 	and.w	r3, r3, #15
 8000c82:	683a      	ldr	r2, [r7, #0]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d001      	beq.n	8000c8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	e0b6      	b.n	8000dfa <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f003 0302 	and.w	r3, r3, #2
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d020      	beq.n	8000cda <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f003 0304 	and.w	r3, r3, #4
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d005      	beq.n	8000cb0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000ca4:	4b58      	ldr	r3, [pc, #352]	; (8000e08 <HAL_RCC_ClockConfig+0x1b8>)
 8000ca6:	689b      	ldr	r3, [r3, #8]
 8000ca8:	4a57      	ldr	r2, [pc, #348]	; (8000e08 <HAL_RCC_ClockConfig+0x1b8>)
 8000caa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000cae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f003 0308 	and.w	r3, r3, #8
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d005      	beq.n	8000cc8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000cbc:	4b52      	ldr	r3, [pc, #328]	; (8000e08 <HAL_RCC_ClockConfig+0x1b8>)
 8000cbe:	689b      	ldr	r3, [r3, #8]
 8000cc0:	4a51      	ldr	r2, [pc, #324]	; (8000e08 <HAL_RCC_ClockConfig+0x1b8>)
 8000cc2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000cc6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000cc8:	4b4f      	ldr	r3, [pc, #316]	; (8000e08 <HAL_RCC_ClockConfig+0x1b8>)
 8000cca:	689b      	ldr	r3, [r3, #8]
 8000ccc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	689b      	ldr	r3, [r3, #8]
 8000cd4:	494c      	ldr	r1, [pc, #304]	; (8000e08 <HAL_RCC_ClockConfig+0x1b8>)
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d044      	beq.n	8000d70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d107      	bne.n	8000cfe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cee:	4b46      	ldr	r3, [pc, #280]	; (8000e08 <HAL_RCC_ClockConfig+0x1b8>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d119      	bne.n	8000d2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	e07d      	b.n	8000dfa <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	2b02      	cmp	r3, #2
 8000d04:	d003      	beq.n	8000d0e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000d0a:	2b03      	cmp	r3, #3
 8000d0c:	d107      	bne.n	8000d1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d0e:	4b3e      	ldr	r3, [pc, #248]	; (8000e08 <HAL_RCC_ClockConfig+0x1b8>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d109      	bne.n	8000d2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	e06d      	b.n	8000dfa <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d1e:	4b3a      	ldr	r3, [pc, #232]	; (8000e08 <HAL_RCC_ClockConfig+0x1b8>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f003 0302 	and.w	r3, r3, #2
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d101      	bne.n	8000d2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	e065      	b.n	8000dfa <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d2e:	4b36      	ldr	r3, [pc, #216]	; (8000e08 <HAL_RCC_ClockConfig+0x1b8>)
 8000d30:	689b      	ldr	r3, [r3, #8]
 8000d32:	f023 0203 	bic.w	r2, r3, #3
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	4933      	ldr	r1, [pc, #204]	; (8000e08 <HAL_RCC_ClockConfig+0x1b8>)
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000d40:	f7ff fc50 	bl	80005e4 <HAL_GetTick>
 8000d44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d46:	e00a      	b.n	8000d5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d48:	f7ff fc4c 	bl	80005e4 <HAL_GetTick>
 8000d4c:	4602      	mov	r2, r0
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	1ad3      	subs	r3, r2, r3
 8000d52:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d901      	bls.n	8000d5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000d5a:	2303      	movs	r3, #3
 8000d5c:	e04d      	b.n	8000dfa <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d5e:	4b2a      	ldr	r3, [pc, #168]	; (8000e08 <HAL_RCC_ClockConfig+0x1b8>)
 8000d60:	689b      	ldr	r3, [r3, #8]
 8000d62:	f003 020c 	and.w	r2, r3, #12
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	009b      	lsls	r3, r3, #2
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	d1eb      	bne.n	8000d48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000d70:	4b24      	ldr	r3, [pc, #144]	; (8000e04 <HAL_RCC_ClockConfig+0x1b4>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f003 030f 	and.w	r3, r3, #15
 8000d78:	683a      	ldr	r2, [r7, #0]
 8000d7a:	429a      	cmp	r2, r3
 8000d7c:	d20c      	bcs.n	8000d98 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d7e:	4b21      	ldr	r3, [pc, #132]	; (8000e04 <HAL_RCC_ClockConfig+0x1b4>)
 8000d80:	683a      	ldr	r2, [r7, #0]
 8000d82:	b2d2      	uxtb	r2, r2
 8000d84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d86:	4b1f      	ldr	r3, [pc, #124]	; (8000e04 <HAL_RCC_ClockConfig+0x1b4>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f003 030f 	and.w	r3, r3, #15
 8000d8e:	683a      	ldr	r2, [r7, #0]
 8000d90:	429a      	cmp	r2, r3
 8000d92:	d001      	beq.n	8000d98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8000d94:	2301      	movs	r3, #1
 8000d96:	e030      	b.n	8000dfa <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f003 0304 	and.w	r3, r3, #4
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d008      	beq.n	8000db6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000da4:	4b18      	ldr	r3, [pc, #96]	; (8000e08 <HAL_RCC_ClockConfig+0x1b8>)
 8000da6:	689b      	ldr	r3, [r3, #8]
 8000da8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	4915      	ldr	r1, [pc, #84]	; (8000e08 <HAL_RCC_ClockConfig+0x1b8>)
 8000db2:	4313      	orrs	r3, r2
 8000db4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f003 0308 	and.w	r3, r3, #8
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d009      	beq.n	8000dd6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000dc2:	4b11      	ldr	r3, [pc, #68]	; (8000e08 <HAL_RCC_ClockConfig+0x1b8>)
 8000dc4:	689b      	ldr	r3, [r3, #8]
 8000dc6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	691b      	ldr	r3, [r3, #16]
 8000dce:	00db      	lsls	r3, r3, #3
 8000dd0:	490d      	ldr	r1, [pc, #52]	; (8000e08 <HAL_RCC_ClockConfig+0x1b8>)
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000dd6:	f000 f81d 	bl	8000e14 <HAL_RCC_GetSysClockFreq>
 8000dda:	4601      	mov	r1, r0
 8000ddc:	4b0a      	ldr	r3, [pc, #40]	; (8000e08 <HAL_RCC_ClockConfig+0x1b8>)
 8000dde:	689b      	ldr	r3, [r3, #8]
 8000de0:	091b      	lsrs	r3, r3, #4
 8000de2:	f003 030f 	and.w	r3, r3, #15
 8000de6:	4a09      	ldr	r2, [pc, #36]	; (8000e0c <HAL_RCC_ClockConfig+0x1bc>)
 8000de8:	5cd3      	ldrb	r3, [r2, r3]
 8000dea:	fa21 f303 	lsr.w	r3, r1, r3
 8000dee:	4a08      	ldr	r2, [pc, #32]	; (8000e10 <HAL_RCC_ClockConfig+0x1c0>)
 8000df0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8000df2:	2000      	movs	r0, #0
 8000df4:	f7ff fbb2 	bl	800055c <HAL_InitTick>

  return HAL_OK;
 8000df8:	2300      	movs	r3, #0
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3710      	adds	r7, #16
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40023c00 	.word	0x40023c00
 8000e08:	40023800 	.word	0x40023800
 8000e0c:	08002f28 	.word	0x08002f28
 8000e10:	20000008 	.word	0x20000008

08000e14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000e14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e16:	b085      	sub	sp, #20
 8000e18:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	607b      	str	r3, [r7, #4]
 8000e1e:	2300      	movs	r3, #0
 8000e20:	60fb      	str	r3, [r7, #12]
 8000e22:	2300      	movs	r3, #0
 8000e24:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8000e26:	2300      	movs	r3, #0
 8000e28:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000e2a:	4b50      	ldr	r3, [pc, #320]	; (8000f6c <HAL_RCC_GetSysClockFreq+0x158>)
 8000e2c:	689b      	ldr	r3, [r3, #8]
 8000e2e:	f003 030c 	and.w	r3, r3, #12
 8000e32:	2b04      	cmp	r3, #4
 8000e34:	d007      	beq.n	8000e46 <HAL_RCC_GetSysClockFreq+0x32>
 8000e36:	2b08      	cmp	r3, #8
 8000e38:	d008      	beq.n	8000e4c <HAL_RCC_GetSysClockFreq+0x38>
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	f040 808d 	bne.w	8000f5a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000e40:	4b4b      	ldr	r3, [pc, #300]	; (8000f70 <HAL_RCC_GetSysClockFreq+0x15c>)
 8000e42:	60bb      	str	r3, [r7, #8]
       break;
 8000e44:	e08c      	b.n	8000f60 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8000e46:	4b4b      	ldr	r3, [pc, #300]	; (8000f74 <HAL_RCC_GetSysClockFreq+0x160>)
 8000e48:	60bb      	str	r3, [r7, #8]
      break;
 8000e4a:	e089      	b.n	8000f60 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000e4c:	4b47      	ldr	r3, [pc, #284]	; (8000f6c <HAL_RCC_GetSysClockFreq+0x158>)
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000e54:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000e56:	4b45      	ldr	r3, [pc, #276]	; (8000f6c <HAL_RCC_GetSysClockFreq+0x158>)
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d023      	beq.n	8000eaa <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e62:	4b42      	ldr	r3, [pc, #264]	; (8000f6c <HAL_RCC_GetSysClockFreq+0x158>)
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	099b      	lsrs	r3, r3, #6
 8000e68:	f04f 0400 	mov.w	r4, #0
 8000e6c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000e70:	f04f 0200 	mov.w	r2, #0
 8000e74:	ea03 0501 	and.w	r5, r3, r1
 8000e78:	ea04 0602 	and.w	r6, r4, r2
 8000e7c:	4a3d      	ldr	r2, [pc, #244]	; (8000f74 <HAL_RCC_GetSysClockFreq+0x160>)
 8000e7e:	fb02 f106 	mul.w	r1, r2, r6
 8000e82:	2200      	movs	r2, #0
 8000e84:	fb02 f205 	mul.w	r2, r2, r5
 8000e88:	440a      	add	r2, r1
 8000e8a:	493a      	ldr	r1, [pc, #232]	; (8000f74 <HAL_RCC_GetSysClockFreq+0x160>)
 8000e8c:	fba5 0101 	umull	r0, r1, r5, r1
 8000e90:	1853      	adds	r3, r2, r1
 8000e92:	4619      	mov	r1, r3
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	f04f 0400 	mov.w	r4, #0
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	4623      	mov	r3, r4
 8000e9e:	f7ff f9bb 	bl	8000218 <__aeabi_uldivmod>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	460c      	mov	r4, r1
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	e049      	b.n	8000f3e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000eaa:	4b30      	ldr	r3, [pc, #192]	; (8000f6c <HAL_RCC_GetSysClockFreq+0x158>)
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	099b      	lsrs	r3, r3, #6
 8000eb0:	f04f 0400 	mov.w	r4, #0
 8000eb4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000eb8:	f04f 0200 	mov.w	r2, #0
 8000ebc:	ea03 0501 	and.w	r5, r3, r1
 8000ec0:	ea04 0602 	and.w	r6, r4, r2
 8000ec4:	4629      	mov	r1, r5
 8000ec6:	4632      	mov	r2, r6
 8000ec8:	f04f 0300 	mov.w	r3, #0
 8000ecc:	f04f 0400 	mov.w	r4, #0
 8000ed0:	0154      	lsls	r4, r2, #5
 8000ed2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000ed6:	014b      	lsls	r3, r1, #5
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4622      	mov	r2, r4
 8000edc:	1b49      	subs	r1, r1, r5
 8000ede:	eb62 0206 	sbc.w	r2, r2, r6
 8000ee2:	f04f 0300 	mov.w	r3, #0
 8000ee6:	f04f 0400 	mov.w	r4, #0
 8000eea:	0194      	lsls	r4, r2, #6
 8000eec:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8000ef0:	018b      	lsls	r3, r1, #6
 8000ef2:	1a5b      	subs	r3, r3, r1
 8000ef4:	eb64 0402 	sbc.w	r4, r4, r2
 8000ef8:	f04f 0100 	mov.w	r1, #0
 8000efc:	f04f 0200 	mov.w	r2, #0
 8000f00:	00e2      	lsls	r2, r4, #3
 8000f02:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8000f06:	00d9      	lsls	r1, r3, #3
 8000f08:	460b      	mov	r3, r1
 8000f0a:	4614      	mov	r4, r2
 8000f0c:	195b      	adds	r3, r3, r5
 8000f0e:	eb44 0406 	adc.w	r4, r4, r6
 8000f12:	f04f 0100 	mov.w	r1, #0
 8000f16:	f04f 0200 	mov.w	r2, #0
 8000f1a:	02a2      	lsls	r2, r4, #10
 8000f1c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8000f20:	0299      	lsls	r1, r3, #10
 8000f22:	460b      	mov	r3, r1
 8000f24:	4614      	mov	r4, r2
 8000f26:	4618      	mov	r0, r3
 8000f28:	4621      	mov	r1, r4
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	f04f 0400 	mov.w	r4, #0
 8000f30:	461a      	mov	r2, r3
 8000f32:	4623      	mov	r3, r4
 8000f34:	f7ff f970 	bl	8000218 <__aeabi_uldivmod>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	460c      	mov	r4, r1
 8000f3c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000f3e:	4b0b      	ldr	r3, [pc, #44]	; (8000f6c <HAL_RCC_GetSysClockFreq+0x158>)
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	0c1b      	lsrs	r3, r3, #16
 8000f44:	f003 0303 	and.w	r3, r3, #3
 8000f48:	3301      	adds	r3, #1
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8000f4e:	68fa      	ldr	r2, [r7, #12]
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f56:	60bb      	str	r3, [r7, #8]
      break;
 8000f58:	e002      	b.n	8000f60 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8000f5a:	4b05      	ldr	r3, [pc, #20]	; (8000f70 <HAL_RCC_GetSysClockFreq+0x15c>)
 8000f5c:	60bb      	str	r3, [r7, #8]
      break;
 8000f5e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000f60:	68bb      	ldr	r3, [r7, #8]
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3714      	adds	r7, #20
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40023800 	.word	0x40023800
 8000f70:	00f42400 	.word	0x00f42400
 8000f74:	017d7840 	.word	0x017d7840

08000f78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000f7c:	4b03      	ldr	r3, [pc, #12]	; (8000f8c <HAL_RCC_GetHCLKFreq+0x14>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	20000008 	.word	0x20000008

08000f90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000f94:	f7ff fff0 	bl	8000f78 <HAL_RCC_GetHCLKFreq>
 8000f98:	4601      	mov	r1, r0
 8000f9a:	4b05      	ldr	r3, [pc, #20]	; (8000fb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000f9c:	689b      	ldr	r3, [r3, #8]
 8000f9e:	0a9b      	lsrs	r3, r3, #10
 8000fa0:	f003 0307 	and.w	r3, r3, #7
 8000fa4:	4a03      	ldr	r2, [pc, #12]	; (8000fb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000fa6:	5cd3      	ldrb	r3, [r2, r3]
 8000fa8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	40023800 	.word	0x40023800
 8000fb4:	08002f38 	.word	0x08002f38

08000fb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000fbc:	f7ff ffdc 	bl	8000f78 <HAL_RCC_GetHCLKFreq>
 8000fc0:	4601      	mov	r1, r0
 8000fc2:	4b05      	ldr	r3, [pc, #20]	; (8000fd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000fc4:	689b      	ldr	r3, [r3, #8]
 8000fc6:	0b5b      	lsrs	r3, r3, #13
 8000fc8:	f003 0307 	and.w	r3, r3, #7
 8000fcc:	4a03      	ldr	r2, [pc, #12]	; (8000fdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8000fce:	5cd3      	ldrb	r3, [r2, r3]
 8000fd0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40023800 	.word	0x40023800
 8000fdc:	08002f38 	.word	0x08002f38

08000fe0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b086      	sub	sp, #24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f003 0301 	and.w	r3, r3, #1
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d075      	beq.n	80010e4 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8000ff8:	4ba2      	ldr	r3, [pc, #648]	; (8001284 <HAL_RCC_OscConfig+0x2a4>)
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	f003 030c 	and.w	r3, r3, #12
 8001000:	2b04      	cmp	r3, #4
 8001002:	d00c      	beq.n	800101e <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001004:	4b9f      	ldr	r3, [pc, #636]	; (8001284 <HAL_RCC_OscConfig+0x2a4>)
 8001006:	689b      	ldr	r3, [r3, #8]
 8001008:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800100c:	2b08      	cmp	r3, #8
 800100e:	d112      	bne.n	8001036 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001010:	4b9c      	ldr	r3, [pc, #624]	; (8001284 <HAL_RCC_OscConfig+0x2a4>)
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001018:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800101c:	d10b      	bne.n	8001036 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800101e:	4b99      	ldr	r3, [pc, #612]	; (8001284 <HAL_RCC_OscConfig+0x2a4>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001026:	2b00      	cmp	r3, #0
 8001028:	d05b      	beq.n	80010e2 <HAL_RCC_OscConfig+0x102>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d157      	bne.n	80010e2 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e20b      	b.n	800144e <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800103e:	d106      	bne.n	800104e <HAL_RCC_OscConfig+0x6e>
 8001040:	4b90      	ldr	r3, [pc, #576]	; (8001284 <HAL_RCC_OscConfig+0x2a4>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a8f      	ldr	r2, [pc, #572]	; (8001284 <HAL_RCC_OscConfig+0x2a4>)
 8001046:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800104a:	6013      	str	r3, [r2, #0]
 800104c:	e01d      	b.n	800108a <HAL_RCC_OscConfig+0xaa>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001056:	d10c      	bne.n	8001072 <HAL_RCC_OscConfig+0x92>
 8001058:	4b8a      	ldr	r3, [pc, #552]	; (8001284 <HAL_RCC_OscConfig+0x2a4>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a89      	ldr	r2, [pc, #548]	; (8001284 <HAL_RCC_OscConfig+0x2a4>)
 800105e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001062:	6013      	str	r3, [r2, #0]
 8001064:	4b87      	ldr	r3, [pc, #540]	; (8001284 <HAL_RCC_OscConfig+0x2a4>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a86      	ldr	r2, [pc, #536]	; (8001284 <HAL_RCC_OscConfig+0x2a4>)
 800106a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800106e:	6013      	str	r3, [r2, #0]
 8001070:	e00b      	b.n	800108a <HAL_RCC_OscConfig+0xaa>
 8001072:	4b84      	ldr	r3, [pc, #528]	; (8001284 <HAL_RCC_OscConfig+0x2a4>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a83      	ldr	r2, [pc, #524]	; (8001284 <HAL_RCC_OscConfig+0x2a4>)
 8001078:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800107c:	6013      	str	r3, [r2, #0]
 800107e:	4b81      	ldr	r3, [pc, #516]	; (8001284 <HAL_RCC_OscConfig+0x2a4>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a80      	ldr	r2, [pc, #512]	; (8001284 <HAL_RCC_OscConfig+0x2a4>)
 8001084:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001088:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d013      	beq.n	80010ba <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001092:	f7ff faa7 	bl	80005e4 <HAL_GetTick>
 8001096:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001098:	e008      	b.n	80010ac <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800109a:	f7ff faa3 	bl	80005e4 <HAL_GetTick>
 800109e:	4602      	mov	r2, r0
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	2b64      	cmp	r3, #100	; 0x64
 80010a6:	d901      	bls.n	80010ac <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 80010a8:	2303      	movs	r3, #3
 80010aa:	e1d0      	b.n	800144e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ac:	4b75      	ldr	r3, [pc, #468]	; (8001284 <HAL_RCC_OscConfig+0x2a4>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d0f0      	beq.n	800109a <HAL_RCC_OscConfig+0xba>
 80010b8:	e014      	b.n	80010e4 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010ba:	f7ff fa93 	bl	80005e4 <HAL_GetTick>
 80010be:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010c0:	e008      	b.n	80010d4 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010c2:	f7ff fa8f 	bl	80005e4 <HAL_GetTick>
 80010c6:	4602      	mov	r2, r0
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	2b64      	cmp	r3, #100	; 0x64
 80010ce:	d901      	bls.n	80010d4 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 80010d0:	2303      	movs	r3, #3
 80010d2:	e1bc      	b.n	800144e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010d4:	4b6b      	ldr	r3, [pc, #428]	; (8001284 <HAL_RCC_OscConfig+0x2a4>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d1f0      	bne.n	80010c2 <HAL_RCC_OscConfig+0xe2>
 80010e0:	e000      	b.n	80010e4 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010e2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f003 0302 	and.w	r3, r3, #2
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d063      	beq.n	80011b8 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80010f0:	4b64      	ldr	r3, [pc, #400]	; (8001284 <HAL_RCC_OscConfig+0x2a4>)
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	f003 030c 	and.w	r3, r3, #12
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d00b      	beq.n	8001114 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010fc:	4b61      	ldr	r3, [pc, #388]	; (8001284 <HAL_RCC_OscConfig+0x2a4>)
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001104:	2b08      	cmp	r3, #8
 8001106:	d11c      	bne.n	8001142 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001108:	4b5e      	ldr	r3, [pc, #376]	; (8001284 <HAL_RCC_OscConfig+0x2a4>)
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001110:	2b00      	cmp	r3, #0
 8001112:	d116      	bne.n	8001142 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001114:	4b5b      	ldr	r3, [pc, #364]	; (8001284 <HAL_RCC_OscConfig+0x2a4>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f003 0302 	and.w	r3, r3, #2
 800111c:	2b00      	cmp	r3, #0
 800111e:	d005      	beq.n	800112c <HAL_RCC_OscConfig+0x14c>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	2b01      	cmp	r3, #1
 8001126:	d001      	beq.n	800112c <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8001128:	2301      	movs	r3, #1
 800112a:	e190      	b.n	800144e <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800112c:	4b55      	ldr	r3, [pc, #340]	; (8001284 <HAL_RCC_OscConfig+0x2a4>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	691b      	ldr	r3, [r3, #16]
 8001138:	00db      	lsls	r3, r3, #3
 800113a:	4952      	ldr	r1, [pc, #328]	; (8001284 <HAL_RCC_OscConfig+0x2a4>)
 800113c:	4313      	orrs	r3, r2
 800113e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001140:	e03a      	b.n	80011b8 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	68db      	ldr	r3, [r3, #12]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d020      	beq.n	800118c <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800114a:	4b4f      	ldr	r3, [pc, #316]	; (8001288 <HAL_RCC_OscConfig+0x2a8>)
 800114c:	2201      	movs	r2, #1
 800114e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001150:	f7ff fa48 	bl	80005e4 <HAL_GetTick>
 8001154:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001156:	e008      	b.n	800116a <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001158:	f7ff fa44 	bl	80005e4 <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	2b02      	cmp	r3, #2
 8001164:	d901      	bls.n	800116a <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8001166:	2303      	movs	r3, #3
 8001168:	e171      	b.n	800144e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800116a:	4b46      	ldr	r3, [pc, #280]	; (8001284 <HAL_RCC_OscConfig+0x2a4>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 0302 	and.w	r3, r3, #2
 8001172:	2b00      	cmp	r3, #0
 8001174:	d0f0      	beq.n	8001158 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001176:	4b43      	ldr	r3, [pc, #268]	; (8001284 <HAL_RCC_OscConfig+0x2a4>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	691b      	ldr	r3, [r3, #16]
 8001182:	00db      	lsls	r3, r3, #3
 8001184:	493f      	ldr	r1, [pc, #252]	; (8001284 <HAL_RCC_OscConfig+0x2a4>)
 8001186:	4313      	orrs	r3, r2
 8001188:	600b      	str	r3, [r1, #0]
 800118a:	e015      	b.n	80011b8 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800118c:	4b3e      	ldr	r3, [pc, #248]	; (8001288 <HAL_RCC_OscConfig+0x2a8>)
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001192:	f7ff fa27 	bl	80005e4 <HAL_GetTick>
 8001196:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001198:	e008      	b.n	80011ac <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800119a:	f7ff fa23 	bl	80005e4 <HAL_GetTick>
 800119e:	4602      	mov	r2, r0
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	2b02      	cmp	r3, #2
 80011a6:	d901      	bls.n	80011ac <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80011a8:	2303      	movs	r3, #3
 80011aa:	e150      	b.n	800144e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011ac:	4b35      	ldr	r3, [pc, #212]	; (8001284 <HAL_RCC_OscConfig+0x2a4>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f003 0302 	and.w	r3, r3, #2
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d1f0      	bne.n	800119a <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f003 0308 	and.w	r3, r3, #8
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d030      	beq.n	8001226 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	695b      	ldr	r3, [r3, #20]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d016      	beq.n	80011fa <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011cc:	4b2f      	ldr	r3, [pc, #188]	; (800128c <HAL_RCC_OscConfig+0x2ac>)
 80011ce:	2201      	movs	r2, #1
 80011d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011d2:	f7ff fa07 	bl	80005e4 <HAL_GetTick>
 80011d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011d8:	e008      	b.n	80011ec <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011da:	f7ff fa03 	bl	80005e4 <HAL_GetTick>
 80011de:	4602      	mov	r2, r0
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	1ad3      	subs	r3, r2, r3
 80011e4:	2b02      	cmp	r3, #2
 80011e6:	d901      	bls.n	80011ec <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 80011e8:	2303      	movs	r3, #3
 80011ea:	e130      	b.n	800144e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011ec:	4b25      	ldr	r3, [pc, #148]	; (8001284 <HAL_RCC_OscConfig+0x2a4>)
 80011ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011f0:	f003 0302 	and.w	r3, r3, #2
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d0f0      	beq.n	80011da <HAL_RCC_OscConfig+0x1fa>
 80011f8:	e015      	b.n	8001226 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011fa:	4b24      	ldr	r3, [pc, #144]	; (800128c <HAL_RCC_OscConfig+0x2ac>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001200:	f7ff f9f0 	bl	80005e4 <HAL_GetTick>
 8001204:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001206:	e008      	b.n	800121a <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001208:	f7ff f9ec 	bl	80005e4 <HAL_GetTick>
 800120c:	4602      	mov	r2, r0
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	2b02      	cmp	r3, #2
 8001214:	d901      	bls.n	800121a <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 8001216:	2303      	movs	r3, #3
 8001218:	e119      	b.n	800144e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800121a:	4b1a      	ldr	r3, [pc, #104]	; (8001284 <HAL_RCC_OscConfig+0x2a4>)
 800121c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800121e:	f003 0302 	and.w	r3, r3, #2
 8001222:	2b00      	cmp	r3, #0
 8001224:	d1f0      	bne.n	8001208 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f003 0304 	and.w	r3, r3, #4
 800122e:	2b00      	cmp	r3, #0
 8001230:	f000 809f 	beq.w	8001372 <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001234:	2300      	movs	r3, #0
 8001236:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001238:	4b12      	ldr	r3, [pc, #72]	; (8001284 <HAL_RCC_OscConfig+0x2a4>)
 800123a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001240:	2b00      	cmp	r3, #0
 8001242:	d10f      	bne.n	8001264 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001244:	2300      	movs	r3, #0
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	4b0e      	ldr	r3, [pc, #56]	; (8001284 <HAL_RCC_OscConfig+0x2a4>)
 800124a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124c:	4a0d      	ldr	r2, [pc, #52]	; (8001284 <HAL_RCC_OscConfig+0x2a4>)
 800124e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001252:	6413      	str	r3, [r2, #64]	; 0x40
 8001254:	4b0b      	ldr	r3, [pc, #44]	; (8001284 <HAL_RCC_OscConfig+0x2a4>)
 8001256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001258:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800125c:	60fb      	str	r3, [r7, #12]
 800125e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001260:	2301      	movs	r3, #1
 8001262:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001264:	4b0a      	ldr	r3, [pc, #40]	; (8001290 <HAL_RCC_OscConfig+0x2b0>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800126c:	2b00      	cmp	r3, #0
 800126e:	d120      	bne.n	80012b2 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001270:	4b07      	ldr	r3, [pc, #28]	; (8001290 <HAL_RCC_OscConfig+0x2b0>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a06      	ldr	r2, [pc, #24]	; (8001290 <HAL_RCC_OscConfig+0x2b0>)
 8001276:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800127a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800127c:	f7ff f9b2 	bl	80005e4 <HAL_GetTick>
 8001280:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001282:	e010      	b.n	80012a6 <HAL_RCC_OscConfig+0x2c6>
 8001284:	40023800 	.word	0x40023800
 8001288:	42470000 	.word	0x42470000
 800128c:	42470e80 	.word	0x42470e80
 8001290:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001294:	f7ff f9a6 	bl	80005e4 <HAL_GetTick>
 8001298:	4602      	mov	r2, r0
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d901      	bls.n	80012a6 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 80012a2:	2303      	movs	r3, #3
 80012a4:	e0d3      	b.n	800144e <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012a6:	4b6c      	ldr	r3, [pc, #432]	; (8001458 <HAL_RCC_OscConfig+0x478>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d0f0      	beq.n	8001294 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d106      	bne.n	80012c8 <HAL_RCC_OscConfig+0x2e8>
 80012ba:	4b68      	ldr	r3, [pc, #416]	; (800145c <HAL_RCC_OscConfig+0x47c>)
 80012bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012be:	4a67      	ldr	r2, [pc, #412]	; (800145c <HAL_RCC_OscConfig+0x47c>)
 80012c0:	f043 0301 	orr.w	r3, r3, #1
 80012c4:	6713      	str	r3, [r2, #112]	; 0x70
 80012c6:	e01c      	b.n	8001302 <HAL_RCC_OscConfig+0x322>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	2b05      	cmp	r3, #5
 80012ce:	d10c      	bne.n	80012ea <HAL_RCC_OscConfig+0x30a>
 80012d0:	4b62      	ldr	r3, [pc, #392]	; (800145c <HAL_RCC_OscConfig+0x47c>)
 80012d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012d4:	4a61      	ldr	r2, [pc, #388]	; (800145c <HAL_RCC_OscConfig+0x47c>)
 80012d6:	f043 0304 	orr.w	r3, r3, #4
 80012da:	6713      	str	r3, [r2, #112]	; 0x70
 80012dc:	4b5f      	ldr	r3, [pc, #380]	; (800145c <HAL_RCC_OscConfig+0x47c>)
 80012de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012e0:	4a5e      	ldr	r2, [pc, #376]	; (800145c <HAL_RCC_OscConfig+0x47c>)
 80012e2:	f043 0301 	orr.w	r3, r3, #1
 80012e6:	6713      	str	r3, [r2, #112]	; 0x70
 80012e8:	e00b      	b.n	8001302 <HAL_RCC_OscConfig+0x322>
 80012ea:	4b5c      	ldr	r3, [pc, #368]	; (800145c <HAL_RCC_OscConfig+0x47c>)
 80012ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012ee:	4a5b      	ldr	r2, [pc, #364]	; (800145c <HAL_RCC_OscConfig+0x47c>)
 80012f0:	f023 0301 	bic.w	r3, r3, #1
 80012f4:	6713      	str	r3, [r2, #112]	; 0x70
 80012f6:	4b59      	ldr	r3, [pc, #356]	; (800145c <HAL_RCC_OscConfig+0x47c>)
 80012f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012fa:	4a58      	ldr	r2, [pc, #352]	; (800145c <HAL_RCC_OscConfig+0x47c>)
 80012fc:	f023 0304 	bic.w	r3, r3, #4
 8001300:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d015      	beq.n	8001336 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800130a:	f7ff f96b 	bl	80005e4 <HAL_GetTick>
 800130e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001310:	e00a      	b.n	8001328 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001312:	f7ff f967 	bl	80005e4 <HAL_GetTick>
 8001316:	4602      	mov	r2, r0
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001320:	4293      	cmp	r3, r2
 8001322:	d901      	bls.n	8001328 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8001324:	2303      	movs	r3, #3
 8001326:	e092      	b.n	800144e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001328:	4b4c      	ldr	r3, [pc, #304]	; (800145c <HAL_RCC_OscConfig+0x47c>)
 800132a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800132c:	f003 0302 	and.w	r3, r3, #2
 8001330:	2b00      	cmp	r3, #0
 8001332:	d0ee      	beq.n	8001312 <HAL_RCC_OscConfig+0x332>
 8001334:	e014      	b.n	8001360 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001336:	f7ff f955 	bl	80005e4 <HAL_GetTick>
 800133a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800133c:	e00a      	b.n	8001354 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800133e:	f7ff f951 	bl	80005e4 <HAL_GetTick>
 8001342:	4602      	mov	r2, r0
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	1ad3      	subs	r3, r2, r3
 8001348:	f241 3288 	movw	r2, #5000	; 0x1388
 800134c:	4293      	cmp	r3, r2
 800134e:	d901      	bls.n	8001354 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8001350:	2303      	movs	r3, #3
 8001352:	e07c      	b.n	800144e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001354:	4b41      	ldr	r3, [pc, #260]	; (800145c <HAL_RCC_OscConfig+0x47c>)
 8001356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001358:	f003 0302 	and.w	r3, r3, #2
 800135c:	2b00      	cmp	r3, #0
 800135e:	d1ee      	bne.n	800133e <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001360:	7dfb      	ldrb	r3, [r7, #23]
 8001362:	2b01      	cmp	r3, #1
 8001364:	d105      	bne.n	8001372 <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001366:	4b3d      	ldr	r3, [pc, #244]	; (800145c <HAL_RCC_OscConfig+0x47c>)
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136a:	4a3c      	ldr	r2, [pc, #240]	; (800145c <HAL_RCC_OscConfig+0x47c>)
 800136c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001370:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	699b      	ldr	r3, [r3, #24]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d068      	beq.n	800144c <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800137a:	4b38      	ldr	r3, [pc, #224]	; (800145c <HAL_RCC_OscConfig+0x47c>)
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	f003 030c 	and.w	r3, r3, #12
 8001382:	2b08      	cmp	r3, #8
 8001384:	d060      	beq.n	8001448 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	699b      	ldr	r3, [r3, #24]
 800138a:	2b02      	cmp	r3, #2
 800138c:	d145      	bne.n	800141a <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800138e:	4b34      	ldr	r3, [pc, #208]	; (8001460 <HAL_RCC_OscConfig+0x480>)
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001394:	f7ff f926 	bl	80005e4 <HAL_GetTick>
 8001398:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800139a:	e008      	b.n	80013ae <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800139c:	f7ff f922 	bl	80005e4 <HAL_GetTick>
 80013a0:	4602      	mov	r2, r0
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	d901      	bls.n	80013ae <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 80013aa:	2303      	movs	r3, #3
 80013ac:	e04f      	b.n	800144e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013ae:	4b2b      	ldr	r3, [pc, #172]	; (800145c <HAL_RCC_OscConfig+0x47c>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d1f0      	bne.n	800139c <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	69da      	ldr	r2, [r3, #28]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6a1b      	ldr	r3, [r3, #32]
 80013c2:	431a      	orrs	r2, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c8:	019b      	lsls	r3, r3, #6
 80013ca:	431a      	orrs	r2, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d0:	085b      	lsrs	r3, r3, #1
 80013d2:	3b01      	subs	r3, #1
 80013d4:	041b      	lsls	r3, r3, #16
 80013d6:	431a      	orrs	r2, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013dc:	061b      	lsls	r3, r3, #24
 80013de:	431a      	orrs	r2, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e4:	071b      	lsls	r3, r3, #28
 80013e6:	491d      	ldr	r1, [pc, #116]	; (800145c <HAL_RCC_OscConfig+0x47c>)
 80013e8:	4313      	orrs	r3, r2
 80013ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013ec:	4b1c      	ldr	r3, [pc, #112]	; (8001460 <HAL_RCC_OscConfig+0x480>)
 80013ee:	2201      	movs	r2, #1
 80013f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f2:	f7ff f8f7 	bl	80005e4 <HAL_GetTick>
 80013f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013f8:	e008      	b.n	800140c <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013fa:	f7ff f8f3 	bl	80005e4 <HAL_GetTick>
 80013fe:	4602      	mov	r2, r0
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	2b02      	cmp	r3, #2
 8001406:	d901      	bls.n	800140c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8001408:	2303      	movs	r3, #3
 800140a:	e020      	b.n	800144e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800140c:	4b13      	ldr	r3, [pc, #76]	; (800145c <HAL_RCC_OscConfig+0x47c>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d0f0      	beq.n	80013fa <HAL_RCC_OscConfig+0x41a>
 8001418:	e018      	b.n	800144c <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800141a:	4b11      	ldr	r3, [pc, #68]	; (8001460 <HAL_RCC_OscConfig+0x480>)
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001420:	f7ff f8e0 	bl	80005e4 <HAL_GetTick>
 8001424:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001426:	e008      	b.n	800143a <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001428:	f7ff f8dc 	bl	80005e4 <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	2b02      	cmp	r3, #2
 8001434:	d901      	bls.n	800143a <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e009      	b.n	800144e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800143a:	4b08      	ldr	r3, [pc, #32]	; (800145c <HAL_RCC_OscConfig+0x47c>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d1f0      	bne.n	8001428 <HAL_RCC_OscConfig+0x448>
 8001446:	e001      	b.n	800144c <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	e000      	b.n	800144e <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800144c:	2300      	movs	r3, #0
}
 800144e:	4618      	mov	r0, r3
 8001450:	3718      	adds	r7, #24
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	40007000 	.word	0x40007000
 800145c:	40023800 	.word	0x40023800
 8001460:	42470060 	.word	0x42470060

08001464 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d101      	bne.n	8001476 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e03f      	b.n	80014f6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800147c:	b2db      	uxtb	r3, r3
 800147e:	2b00      	cmp	r3, #0
 8001480:	d106      	bne.n	8001490 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2200      	movs	r2, #0
 8001486:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f001 fb92 	bl	8002bb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2224      	movs	r2, #36	; 0x24
 8001494:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	68da      	ldr	r2, [r3, #12]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80014a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f000 fb9d 	bl	8001be8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	691a      	ldr	r2, [r3, #16]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80014bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	695a      	ldr	r2, [r3, #20]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80014cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	68da      	ldr	r2, [r3, #12]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80014dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2200      	movs	r2, #0
 80014e2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2220      	movs	r2, #32
 80014e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2220      	movs	r2, #32
 80014f0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80014f4:	2300      	movs	r3, #0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	b088      	sub	sp, #32
 8001502:	af02      	add	r7, sp, #8
 8001504:	60f8      	str	r0, [r7, #12]
 8001506:	60b9      	str	r1, [r7, #8]
 8001508:	603b      	str	r3, [r7, #0]
 800150a:	4613      	mov	r3, r2
 800150c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800150e:	2300      	movs	r3, #0
 8001510:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001518:	b2db      	uxtb	r3, r3
 800151a:	2b20      	cmp	r3, #32
 800151c:	f040 8083 	bne.w	8001626 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d002      	beq.n	800152c <HAL_UART_Transmit+0x2e>
 8001526:	88fb      	ldrh	r3, [r7, #6]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d101      	bne.n	8001530 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e07b      	b.n	8001628 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001536:	2b01      	cmp	r3, #1
 8001538:	d101      	bne.n	800153e <HAL_UART_Transmit+0x40>
 800153a:	2302      	movs	r3, #2
 800153c:	e074      	b.n	8001628 <HAL_UART_Transmit+0x12a>
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	2201      	movs	r2, #1
 8001542:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	2200      	movs	r2, #0
 800154a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	2221      	movs	r2, #33	; 0x21
 8001550:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001554:	f7ff f846 	bl	80005e4 <HAL_GetTick>
 8001558:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	88fa      	ldrh	r2, [r7, #6]
 800155e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	88fa      	ldrh	r2, [r7, #6]
 8001564:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001566:	e042      	b.n	80015ee <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800156c:	b29b      	uxth	r3, r3
 800156e:	3b01      	subs	r3, #1
 8001570:	b29a      	uxth	r2, r3
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800157e:	d122      	bne.n	80015c6 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	9300      	str	r3, [sp, #0]
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	2200      	movs	r2, #0
 8001588:	2180      	movs	r1, #128	; 0x80
 800158a:	68f8      	ldr	r0, [r7, #12]
 800158c:	f000 f9c0 	bl	8001910 <UART_WaitOnFlagUntilTimeout>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e046      	b.n	8001628 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	881b      	ldrh	r3, [r3, #0]
 80015a2:	461a      	mov	r2, r3
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80015ac:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	691b      	ldr	r3, [r3, #16]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d103      	bne.n	80015be <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	3302      	adds	r3, #2
 80015ba:	60bb      	str	r3, [r7, #8]
 80015bc:	e017      	b.n	80015ee <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	3301      	adds	r3, #1
 80015c2:	60bb      	str	r3, [r7, #8]
 80015c4:	e013      	b.n	80015ee <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	9300      	str	r3, [sp, #0]
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	2200      	movs	r2, #0
 80015ce:	2180      	movs	r1, #128	; 0x80
 80015d0:	68f8      	ldr	r0, [r7, #12]
 80015d2:	f000 f99d 	bl	8001910 <UART_WaitOnFlagUntilTimeout>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80015dc:	2303      	movs	r3, #3
 80015de:	e023      	b.n	8001628 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	1c5a      	adds	r2, r3, #1
 80015e4:	60ba      	str	r2, [r7, #8]
 80015e6:	781a      	ldrb	r2, [r3, #0]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80015f2:	b29b      	uxth	r3, r3
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d1b7      	bne.n	8001568 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	9300      	str	r3, [sp, #0]
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	2200      	movs	r2, #0
 8001600:	2140      	movs	r1, #64	; 0x40
 8001602:	68f8      	ldr	r0, [r7, #12]
 8001604:	f000 f984 	bl	8001910 <UART_WaitOnFlagUntilTimeout>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e00a      	b.n	8001628 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	2220      	movs	r2, #32
 8001616:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	2200      	movs	r2, #0
 800161e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8001622:	2300      	movs	r3, #0
 8001624:	e000      	b.n	8001628 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001626:	2302      	movs	r3, #2
  }
}
 8001628:	4618      	mov	r0, r3
 800162a:	3718      	adds	r7, #24
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}

08001630 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001630:	b480      	push	{r7}
 8001632:	b085      	sub	sp, #20
 8001634:	af00      	add	r7, sp, #0
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	60b9      	str	r1, [r7, #8]
 800163a:	4613      	mov	r3, r2
 800163c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001644:	b2db      	uxtb	r3, r3
 8001646:	2b20      	cmp	r3, #32
 8001648:	d140      	bne.n	80016cc <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d002      	beq.n	8001656 <HAL_UART_Receive_IT+0x26>
 8001650:	88fb      	ldrh	r3, [r7, #6]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d101      	bne.n	800165a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e039      	b.n	80016ce <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001660:	2b01      	cmp	r3, #1
 8001662:	d101      	bne.n	8001668 <HAL_UART_Receive_IT+0x38>
 8001664:	2302      	movs	r3, #2
 8001666:	e032      	b.n	80016ce <HAL_UART_Receive_IT+0x9e>
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	2201      	movs	r2, #1
 800166c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	68ba      	ldr	r2, [r7, #8]
 8001674:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	88fa      	ldrh	r2, [r7, #6]
 800167a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	88fa      	ldrh	r2, [r7, #6]
 8001680:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	2200      	movs	r2, #0
 8001686:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	2222      	movs	r2, #34	; 0x22
 800168c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	2200      	movs	r2, #0
 8001694:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	68da      	ldr	r2, [r3, #12]
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80016a6:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	695a      	ldr	r2, [r3, #20]
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f042 0201 	orr.w	r2, r2, #1
 80016b6:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	68da      	ldr	r2, [r3, #12]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f042 0220 	orr.w	r2, r2, #32
 80016c6:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80016c8:	2300      	movs	r3, #0
 80016ca:	e000      	b.n	80016ce <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80016cc:	2302      	movs	r3, #2
  }
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3714      	adds	r7, #20
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
	...

080016dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b088      	sub	sp, #32
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	68db      	ldr	r3, [r3, #12]
 80016f2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	695b      	ldr	r3, [r3, #20]
 80016fa:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80016fc:	2300      	movs	r3, #0
 80016fe:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8001700:	2300      	movs	r3, #0
 8001702:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	f003 030f 	and.w	r3, r3, #15
 800170a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d10d      	bne.n	800172e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	f003 0320 	and.w	r3, r3, #32
 8001718:	2b00      	cmp	r3, #0
 800171a:	d008      	beq.n	800172e <HAL_UART_IRQHandler+0x52>
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	f003 0320 	and.w	r3, r3, #32
 8001722:	2b00      	cmp	r3, #0
 8001724:	d003      	beq.n	800172e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f000 f9dc 	bl	8001ae4 <UART_Receive_IT>
      return;
 800172c:	e0cc      	b.n	80018c8 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	2b00      	cmp	r3, #0
 8001732:	f000 80ab 	beq.w	800188c <HAL_UART_IRQHandler+0x1b0>
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	f003 0301 	and.w	r3, r3, #1
 800173c:	2b00      	cmp	r3, #0
 800173e:	d105      	bne.n	800174c <HAL_UART_IRQHandler+0x70>
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001746:	2b00      	cmp	r3, #0
 8001748:	f000 80a0 	beq.w	800188c <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	2b00      	cmp	r3, #0
 8001754:	d00a      	beq.n	800176c <HAL_UART_IRQHandler+0x90>
 8001756:	69bb      	ldr	r3, [r7, #24]
 8001758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800175c:	2b00      	cmp	r3, #0
 800175e:	d005      	beq.n	800176c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001764:	f043 0201 	orr.w	r2, r3, #1
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	f003 0304 	and.w	r3, r3, #4
 8001772:	2b00      	cmp	r3, #0
 8001774:	d00a      	beq.n	800178c <HAL_UART_IRQHandler+0xb0>
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	f003 0301 	and.w	r3, r3, #1
 800177c:	2b00      	cmp	r3, #0
 800177e:	d005      	beq.n	800178c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001784:	f043 0202 	orr.w	r2, r3, #2
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	2b00      	cmp	r3, #0
 8001794:	d00a      	beq.n	80017ac <HAL_UART_IRQHandler+0xd0>
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	f003 0301 	and.w	r3, r3, #1
 800179c:	2b00      	cmp	r3, #0
 800179e:	d005      	beq.n	80017ac <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017a4:	f043 0204 	orr.w	r2, r3, #4
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	f003 0308 	and.w	r3, r3, #8
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d00a      	beq.n	80017cc <HAL_UART_IRQHandler+0xf0>
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	f003 0301 	and.w	r3, r3, #1
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d005      	beq.n	80017cc <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017c4:	f043 0208 	orr.w	r2, r3, #8
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d078      	beq.n	80018c6 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	f003 0320 	and.w	r3, r3, #32
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d007      	beq.n	80017ee <HAL_UART_IRQHandler+0x112>
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	f003 0320 	and.w	r3, r3, #32
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d002      	beq.n	80017ee <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f000 f97b 	bl	8001ae4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	695b      	ldr	r3, [r3, #20]
 80017f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017f8:	2b40      	cmp	r3, #64	; 0x40
 80017fa:	bf0c      	ite	eq
 80017fc:	2301      	moveq	r3, #1
 80017fe:	2300      	movne	r3, #0
 8001800:	b2db      	uxtb	r3, r3
 8001802:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001808:	f003 0308 	and.w	r3, r3, #8
 800180c:	2b00      	cmp	r3, #0
 800180e:	d102      	bne.n	8001816 <HAL_UART_IRQHandler+0x13a>
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d031      	beq.n	800187a <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f000 f8c4 	bl	80019a4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	695b      	ldr	r3, [r3, #20]
 8001822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001826:	2b40      	cmp	r3, #64	; 0x40
 8001828:	d123      	bne.n	8001872 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	695a      	ldr	r2, [r3, #20]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001838:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800183e:	2b00      	cmp	r3, #0
 8001840:	d013      	beq.n	800186a <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001846:	4a22      	ldr	r2, [pc, #136]	; (80018d0 <HAL_UART_IRQHandler+0x1f4>)
 8001848:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800184e:	4618      	mov	r0, r3
 8001850:	f7fe ffe5 	bl	800081e <HAL_DMA_Abort_IT>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d016      	beq.n	8001888 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800185e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001864:	4610      	mov	r0, r2
 8001866:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001868:	e00e      	b.n	8001888 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f000 f846 	bl	80018fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001870:	e00a      	b.n	8001888 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f000 f842 	bl	80018fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001878:	e006      	b.n	8001888 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f000 f83e 	bl	80018fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2200      	movs	r2, #0
 8001884:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8001886:	e01e      	b.n	80018c6 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001888:	bf00      	nop
    return;
 800188a:	e01c      	b.n	80018c6 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001892:	2b00      	cmp	r3, #0
 8001894:	d008      	beq.n	80018a8 <HAL_UART_IRQHandler+0x1cc>
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800189c:	2b00      	cmp	r3, #0
 800189e:	d003      	beq.n	80018a8 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f000 f8b1 	bl	8001a08 <UART_Transmit_IT>
    return;
 80018a6:	e00f      	b.n	80018c8 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d00a      	beq.n	80018c8 <HAL_UART_IRQHandler+0x1ec>
 80018b2:	69bb      	ldr	r3, [r7, #24]
 80018b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d005      	beq.n	80018c8 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f000 f8f9 	bl	8001ab4 <UART_EndTransmit_IT>
    return;
 80018c2:	bf00      	nop
 80018c4:	e000      	b.n	80018c8 <HAL_UART_IRQHandler+0x1ec>
    return;
 80018c6:	bf00      	nop
  }
}
 80018c8:	3720      	adds	r7, #32
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	080019e1 	.word	0x080019e1

080018d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80018dc:	bf00      	nop
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80018f0:	bf00      	nop
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001904:	bf00      	nop
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	603b      	str	r3, [r7, #0]
 800191c:	4613      	mov	r3, r2
 800191e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001920:	e02c      	b.n	800197c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001922:	69bb      	ldr	r3, [r7, #24]
 8001924:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001928:	d028      	beq.n	800197c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d007      	beq.n	8001940 <UART_WaitOnFlagUntilTimeout+0x30>
 8001930:	f7fe fe58 	bl	80005e4 <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	429a      	cmp	r2, r3
 800193e:	d21d      	bcs.n	800197c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	68da      	ldr	r2, [r3, #12]
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800194e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	695a      	ldr	r2, [r3, #20]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f022 0201 	bic.w	r2, r2, #1
 800195e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2220      	movs	r2, #32
 8001964:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2220      	movs	r2, #32
 800196c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	2200      	movs	r2, #0
 8001974:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001978:	2303      	movs	r3, #3
 800197a:	e00f      	b.n	800199c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	4013      	ands	r3, r2
 8001986:	68ba      	ldr	r2, [r7, #8]
 8001988:	429a      	cmp	r2, r3
 800198a:	bf0c      	ite	eq
 800198c:	2301      	moveq	r3, #1
 800198e:	2300      	movne	r3, #0
 8001990:	b2db      	uxtb	r3, r3
 8001992:	461a      	mov	r2, r3
 8001994:	79fb      	ldrb	r3, [r7, #7]
 8001996:	429a      	cmp	r2, r3
 8001998:	d0c3      	beq.n	8001922 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800199a:	2300      	movs	r3, #0
}
 800199c:	4618      	mov	r0, r3
 800199e:	3710      	adds	r7, #16
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	68da      	ldr	r2, [r3, #12]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80019ba:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	695a      	ldr	r2, [r3, #20]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f022 0201 	bic.w	r2, r2, #1
 80019ca:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2220      	movs	r2, #32
 80019d0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80019d4:	bf00      	nop
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	2200      	movs	r2, #0
 80019f2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2200      	movs	r2, #0
 80019f8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80019fa:	68f8      	ldr	r0, [r7, #12]
 80019fc:	f7ff ff7e 	bl	80018fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001a00:	bf00      	nop
 8001a02:	3710      	adds	r7, #16
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	2b21      	cmp	r3, #33	; 0x21
 8001a1a:	d144      	bne.n	8001aa6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a24:	d11a      	bne.n	8001a5c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6a1b      	ldr	r3, [r3, #32]
 8001a2a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	881b      	ldrh	r3, [r3, #0]
 8001a30:	461a      	mov	r2, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001a3a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	691b      	ldr	r3, [r3, #16]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d105      	bne.n	8001a50 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6a1b      	ldr	r3, [r3, #32]
 8001a48:	1c9a      	adds	r2, r3, #2
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	621a      	str	r2, [r3, #32]
 8001a4e:	e00e      	b.n	8001a6e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6a1b      	ldr	r3, [r3, #32]
 8001a54:	1c5a      	adds	r2, r3, #1
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	621a      	str	r2, [r3, #32]
 8001a5a:	e008      	b.n	8001a6e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6a1b      	ldr	r3, [r3, #32]
 8001a60:	1c59      	adds	r1, r3, #1
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	6211      	str	r1, [r2, #32]
 8001a66:	781a      	ldrb	r2, [r3, #0]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	3b01      	subs	r3, #1
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d10f      	bne.n	8001aa2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	68da      	ldr	r2, [r3, #12]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a90:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	68da      	ldr	r2, [r3, #12]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001aa0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	e000      	b.n	8001aa8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8001aa6:	2302      	movs	r3, #2
  }
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3714      	adds	r7, #20
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	68da      	ldr	r2, [r3, #12]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001aca:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2220      	movs	r2, #32
 8001ad0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f7ff fefd 	bl	80018d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8001ada:	2300      	movs	r3, #0
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3708      	adds	r7, #8
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	2b22      	cmp	r3, #34	; 0x22
 8001af6:	d171      	bne.n	8001bdc <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b00:	d123      	bne.n	8001b4a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b06:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	691b      	ldr	r3, [r3, #16]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d10e      	bne.n	8001b2e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b1c:	b29a      	uxth	r2, r3
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b26:	1c9a      	adds	r2, r3, #2
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	629a      	str	r2, [r3, #40]	; 0x28
 8001b2c:	e029      	b.n	8001b82 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	b29a      	uxth	r2, r3
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b42:	1c5a      	adds	r2, r3, #1
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	629a      	str	r2, [r3, #40]	; 0x28
 8001b48:	e01b      	b.n	8001b82 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	691b      	ldr	r3, [r3, #16]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d10a      	bne.n	8001b68 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	6858      	ldr	r0, [r3, #4]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b5c:	1c59      	adds	r1, r3, #1
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	6291      	str	r1, [r2, #40]	; 0x28
 8001b62:	b2c2      	uxtb	r2, r0
 8001b64:	701a      	strb	r2, [r3, #0]
 8001b66:	e00c      	b.n	8001b82 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	b2da      	uxtb	r2, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b74:	1c58      	adds	r0, r3, #1
 8001b76:	6879      	ldr	r1, [r7, #4]
 8001b78:	6288      	str	r0, [r1, #40]	; 0x28
 8001b7a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001b7e:	b2d2      	uxtb	r2, r2
 8001b80:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	3b01      	subs	r3, #1
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	4619      	mov	r1, r3
 8001b90:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d120      	bne.n	8001bd8 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	68da      	ldr	r2, [r3, #12]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f022 0220 	bic.w	r2, r2, #32
 8001ba4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	68da      	ldr	r2, [r3, #12]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001bb4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	695a      	ldr	r2, [r3, #20]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f022 0201 	bic.w	r2, r2, #1
 8001bc4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2220      	movs	r2, #32
 8001bca:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f7ff fe8a 	bl	80018e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	e002      	b.n	8001bde <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	e000      	b.n	8001bde <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8001bdc:	2302      	movs	r3, #2
  }
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3710      	adds	r7, #16
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
	...

08001be8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001be8:	b5b0      	push	{r4, r5, r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	691b      	ldr	r3, [r3, #16]
 8001bf6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	68da      	ldr	r2, [r3, #12]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	430a      	orrs	r2, r1
 8001c04:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	689a      	ldr	r2, [r3, #8]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	691b      	ldr	r3, [r3, #16]
 8001c0e:	431a      	orrs	r2, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	695b      	ldr	r3, [r3, #20]
 8001c14:	431a      	orrs	r2, r3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	69db      	ldr	r3, [r3, #28]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001c28:	f023 030c 	bic.w	r3, r3, #12
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	6812      	ldr	r2, [r2, #0]
 8001c30:	68f9      	ldr	r1, [r7, #12]
 8001c32:	430b      	orrs	r3, r1
 8001c34:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	695b      	ldr	r3, [r3, #20]
 8001c3c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	699a      	ldr	r2, [r3, #24]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	430a      	orrs	r2, r1
 8001c4a:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	69db      	ldr	r3, [r3, #28]
 8001c50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c54:	f040 80e4 	bne.w	8001e20 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4aab      	ldr	r2, [pc, #684]	; (8001f0c <UART_SetConfig+0x324>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d004      	beq.n	8001c6c <UART_SetConfig+0x84>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4aaa      	ldr	r2, [pc, #680]	; (8001f10 <UART_SetConfig+0x328>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d16c      	bne.n	8001d46 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001c6c:	f7ff f9a4 	bl	8000fb8 <HAL_RCC_GetPCLK2Freq>
 8001c70:	4602      	mov	r2, r0
 8001c72:	4613      	mov	r3, r2
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	4413      	add	r3, r2
 8001c78:	009a      	lsls	r2, r3, #2
 8001c7a:	441a      	add	r2, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c86:	4aa3      	ldr	r2, [pc, #652]	; (8001f14 <UART_SetConfig+0x32c>)
 8001c88:	fba2 2303 	umull	r2, r3, r2, r3
 8001c8c:	095b      	lsrs	r3, r3, #5
 8001c8e:	011c      	lsls	r4, r3, #4
 8001c90:	f7ff f992 	bl	8000fb8 <HAL_RCC_GetPCLK2Freq>
 8001c94:	4602      	mov	r2, r0
 8001c96:	4613      	mov	r3, r2
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	4413      	add	r3, r2
 8001c9c:	009a      	lsls	r2, r3, #2
 8001c9e:	441a      	add	r2, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	fbb2 f5f3 	udiv	r5, r2, r3
 8001caa:	f7ff f985 	bl	8000fb8 <HAL_RCC_GetPCLK2Freq>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	4413      	add	r3, r2
 8001cb6:	009a      	lsls	r2, r3, #2
 8001cb8:	441a      	add	r2, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	005b      	lsls	r3, r3, #1
 8001cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cc4:	4a93      	ldr	r2, [pc, #588]	; (8001f14 <UART_SetConfig+0x32c>)
 8001cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cca:	095b      	lsrs	r3, r3, #5
 8001ccc:	2264      	movs	r2, #100	; 0x64
 8001cce:	fb02 f303 	mul.w	r3, r2, r3
 8001cd2:	1aeb      	subs	r3, r5, r3
 8001cd4:	00db      	lsls	r3, r3, #3
 8001cd6:	3332      	adds	r3, #50	; 0x32
 8001cd8:	4a8e      	ldr	r2, [pc, #568]	; (8001f14 <UART_SetConfig+0x32c>)
 8001cda:	fba2 2303 	umull	r2, r3, r2, r3
 8001cde:	095b      	lsrs	r3, r3, #5
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001ce6:	441c      	add	r4, r3
 8001ce8:	f7ff f966 	bl	8000fb8 <HAL_RCC_GetPCLK2Freq>
 8001cec:	4602      	mov	r2, r0
 8001cee:	4613      	mov	r3, r2
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	4413      	add	r3, r2
 8001cf4:	009a      	lsls	r2, r3, #2
 8001cf6:	441a      	add	r2, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	fbb2 f5f3 	udiv	r5, r2, r3
 8001d02:	f7ff f959 	bl	8000fb8 <HAL_RCC_GetPCLK2Freq>
 8001d06:	4602      	mov	r2, r0
 8001d08:	4613      	mov	r3, r2
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	4413      	add	r3, r2
 8001d0e:	009a      	lsls	r2, r3, #2
 8001d10:	441a      	add	r2, r3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d1c:	4a7d      	ldr	r2, [pc, #500]	; (8001f14 <UART_SetConfig+0x32c>)
 8001d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d22:	095b      	lsrs	r3, r3, #5
 8001d24:	2264      	movs	r2, #100	; 0x64
 8001d26:	fb02 f303 	mul.w	r3, r2, r3
 8001d2a:	1aeb      	subs	r3, r5, r3
 8001d2c:	00db      	lsls	r3, r3, #3
 8001d2e:	3332      	adds	r3, #50	; 0x32
 8001d30:	4a78      	ldr	r2, [pc, #480]	; (8001f14 <UART_SetConfig+0x32c>)
 8001d32:	fba2 2303 	umull	r2, r3, r2, r3
 8001d36:	095b      	lsrs	r3, r3, #5
 8001d38:	f003 0207 	and.w	r2, r3, #7
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4422      	add	r2, r4
 8001d42:	609a      	str	r2, [r3, #8]
 8001d44:	e154      	b.n	8001ff0 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001d46:	f7ff f923 	bl	8000f90 <HAL_RCC_GetPCLK1Freq>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	4413      	add	r3, r2
 8001d52:	009a      	lsls	r2, r3, #2
 8001d54:	441a      	add	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d60:	4a6c      	ldr	r2, [pc, #432]	; (8001f14 <UART_SetConfig+0x32c>)
 8001d62:	fba2 2303 	umull	r2, r3, r2, r3
 8001d66:	095b      	lsrs	r3, r3, #5
 8001d68:	011c      	lsls	r4, r3, #4
 8001d6a:	f7ff f911 	bl	8000f90 <HAL_RCC_GetPCLK1Freq>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	4613      	mov	r3, r2
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	4413      	add	r3, r2
 8001d76:	009a      	lsls	r2, r3, #2
 8001d78:	441a      	add	r2, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	fbb2 f5f3 	udiv	r5, r2, r3
 8001d84:	f7ff f904 	bl	8000f90 <HAL_RCC_GetPCLK1Freq>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	4413      	add	r3, r2
 8001d90:	009a      	lsls	r2, r3, #2
 8001d92:	441a      	add	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d9e:	4a5d      	ldr	r2, [pc, #372]	; (8001f14 <UART_SetConfig+0x32c>)
 8001da0:	fba2 2303 	umull	r2, r3, r2, r3
 8001da4:	095b      	lsrs	r3, r3, #5
 8001da6:	2264      	movs	r2, #100	; 0x64
 8001da8:	fb02 f303 	mul.w	r3, r2, r3
 8001dac:	1aeb      	subs	r3, r5, r3
 8001dae:	00db      	lsls	r3, r3, #3
 8001db0:	3332      	adds	r3, #50	; 0x32
 8001db2:	4a58      	ldr	r2, [pc, #352]	; (8001f14 <UART_SetConfig+0x32c>)
 8001db4:	fba2 2303 	umull	r2, r3, r2, r3
 8001db8:	095b      	lsrs	r3, r3, #5
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001dc0:	441c      	add	r4, r3
 8001dc2:	f7ff f8e5 	bl	8000f90 <HAL_RCC_GetPCLK1Freq>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	4613      	mov	r3, r2
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	4413      	add	r3, r2
 8001dce:	009a      	lsls	r2, r3, #2
 8001dd0:	441a      	add	r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	fbb2 f5f3 	udiv	r5, r2, r3
 8001ddc:	f7ff f8d8 	bl	8000f90 <HAL_RCC_GetPCLK1Freq>
 8001de0:	4602      	mov	r2, r0
 8001de2:	4613      	mov	r3, r2
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	4413      	add	r3, r2
 8001de8:	009a      	lsls	r2, r3, #2
 8001dea:	441a      	add	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df6:	4a47      	ldr	r2, [pc, #284]	; (8001f14 <UART_SetConfig+0x32c>)
 8001df8:	fba2 2303 	umull	r2, r3, r2, r3
 8001dfc:	095b      	lsrs	r3, r3, #5
 8001dfe:	2264      	movs	r2, #100	; 0x64
 8001e00:	fb02 f303 	mul.w	r3, r2, r3
 8001e04:	1aeb      	subs	r3, r5, r3
 8001e06:	00db      	lsls	r3, r3, #3
 8001e08:	3332      	adds	r3, #50	; 0x32
 8001e0a:	4a42      	ldr	r2, [pc, #264]	; (8001f14 <UART_SetConfig+0x32c>)
 8001e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e10:	095b      	lsrs	r3, r3, #5
 8001e12:	f003 0207 	and.w	r2, r3, #7
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4422      	add	r2, r4
 8001e1c:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8001e1e:	e0e7      	b.n	8001ff0 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a39      	ldr	r2, [pc, #228]	; (8001f0c <UART_SetConfig+0x324>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d004      	beq.n	8001e34 <UART_SetConfig+0x24c>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a38      	ldr	r2, [pc, #224]	; (8001f10 <UART_SetConfig+0x328>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d171      	bne.n	8001f18 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001e34:	f7ff f8c0 	bl	8000fb8 <HAL_RCC_GetPCLK2Freq>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	4413      	add	r3, r2
 8001e40:	009a      	lsls	r2, r3, #2
 8001e42:	441a      	add	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e4e:	4a31      	ldr	r2, [pc, #196]	; (8001f14 <UART_SetConfig+0x32c>)
 8001e50:	fba2 2303 	umull	r2, r3, r2, r3
 8001e54:	095b      	lsrs	r3, r3, #5
 8001e56:	011c      	lsls	r4, r3, #4
 8001e58:	f7ff f8ae 	bl	8000fb8 <HAL_RCC_GetPCLK2Freq>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	4613      	mov	r3, r2
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	4413      	add	r3, r2
 8001e64:	009a      	lsls	r2, r3, #2
 8001e66:	441a      	add	r2, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	fbb2 f5f3 	udiv	r5, r2, r3
 8001e72:	f7ff f8a1 	bl	8000fb8 <HAL_RCC_GetPCLK2Freq>
 8001e76:	4602      	mov	r2, r0
 8001e78:	4613      	mov	r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	4413      	add	r3, r2
 8001e7e:	009a      	lsls	r2, r3, #2
 8001e80:	441a      	add	r2, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e8c:	4a21      	ldr	r2, [pc, #132]	; (8001f14 <UART_SetConfig+0x32c>)
 8001e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e92:	095b      	lsrs	r3, r3, #5
 8001e94:	2264      	movs	r2, #100	; 0x64
 8001e96:	fb02 f303 	mul.w	r3, r2, r3
 8001e9a:	1aeb      	subs	r3, r5, r3
 8001e9c:	011b      	lsls	r3, r3, #4
 8001e9e:	3332      	adds	r3, #50	; 0x32
 8001ea0:	4a1c      	ldr	r2, [pc, #112]	; (8001f14 <UART_SetConfig+0x32c>)
 8001ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea6:	095b      	lsrs	r3, r3, #5
 8001ea8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001eac:	441c      	add	r4, r3
 8001eae:	f7ff f883 	bl	8000fb8 <HAL_RCC_GetPCLK2Freq>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	4413      	add	r3, r2
 8001eba:	009a      	lsls	r2, r3, #2
 8001ebc:	441a      	add	r2, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	fbb2 f5f3 	udiv	r5, r2, r3
 8001ec8:	f7ff f876 	bl	8000fb8 <HAL_RCC_GetPCLK2Freq>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	4613      	mov	r3, r2
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	4413      	add	r3, r2
 8001ed4:	009a      	lsls	r2, r3, #2
 8001ed6:	441a      	add	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ee2:	4a0c      	ldr	r2, [pc, #48]	; (8001f14 <UART_SetConfig+0x32c>)
 8001ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee8:	095b      	lsrs	r3, r3, #5
 8001eea:	2264      	movs	r2, #100	; 0x64
 8001eec:	fb02 f303 	mul.w	r3, r2, r3
 8001ef0:	1aeb      	subs	r3, r5, r3
 8001ef2:	011b      	lsls	r3, r3, #4
 8001ef4:	3332      	adds	r3, #50	; 0x32
 8001ef6:	4a07      	ldr	r2, [pc, #28]	; (8001f14 <UART_SetConfig+0x32c>)
 8001ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8001efc:	095b      	lsrs	r3, r3, #5
 8001efe:	f003 020f 	and.w	r2, r3, #15
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4422      	add	r2, r4
 8001f08:	609a      	str	r2, [r3, #8]
 8001f0a:	e071      	b.n	8001ff0 <UART_SetConfig+0x408>
 8001f0c:	40011000 	.word	0x40011000
 8001f10:	40011400 	.word	0x40011400
 8001f14:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001f18:	f7ff f83a 	bl	8000f90 <HAL_RCC_GetPCLK1Freq>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	4613      	mov	r3, r2
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	4413      	add	r3, r2
 8001f24:	009a      	lsls	r2, r3, #2
 8001f26:	441a      	add	r2, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f32:	4a31      	ldr	r2, [pc, #196]	; (8001ff8 <UART_SetConfig+0x410>)
 8001f34:	fba2 2303 	umull	r2, r3, r2, r3
 8001f38:	095b      	lsrs	r3, r3, #5
 8001f3a:	011c      	lsls	r4, r3, #4
 8001f3c:	f7ff f828 	bl	8000f90 <HAL_RCC_GetPCLK1Freq>
 8001f40:	4602      	mov	r2, r0
 8001f42:	4613      	mov	r3, r2
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	4413      	add	r3, r2
 8001f48:	009a      	lsls	r2, r3, #2
 8001f4a:	441a      	add	r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	fbb2 f5f3 	udiv	r5, r2, r3
 8001f56:	f7ff f81b 	bl	8000f90 <HAL_RCC_GetPCLK1Freq>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	4413      	add	r3, r2
 8001f62:	009a      	lsls	r2, r3, #2
 8001f64:	441a      	add	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f70:	4a21      	ldr	r2, [pc, #132]	; (8001ff8 <UART_SetConfig+0x410>)
 8001f72:	fba2 2303 	umull	r2, r3, r2, r3
 8001f76:	095b      	lsrs	r3, r3, #5
 8001f78:	2264      	movs	r2, #100	; 0x64
 8001f7a:	fb02 f303 	mul.w	r3, r2, r3
 8001f7e:	1aeb      	subs	r3, r5, r3
 8001f80:	011b      	lsls	r3, r3, #4
 8001f82:	3332      	adds	r3, #50	; 0x32
 8001f84:	4a1c      	ldr	r2, [pc, #112]	; (8001ff8 <UART_SetConfig+0x410>)
 8001f86:	fba2 2303 	umull	r2, r3, r2, r3
 8001f8a:	095b      	lsrs	r3, r3, #5
 8001f8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f90:	441c      	add	r4, r3
 8001f92:	f7fe fffd 	bl	8000f90 <HAL_RCC_GetPCLK1Freq>
 8001f96:	4602      	mov	r2, r0
 8001f98:	4613      	mov	r3, r2
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	4413      	add	r3, r2
 8001f9e:	009a      	lsls	r2, r3, #2
 8001fa0:	441a      	add	r2, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	fbb2 f5f3 	udiv	r5, r2, r3
 8001fac:	f7fe fff0 	bl	8000f90 <HAL_RCC_GetPCLK1Freq>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	4413      	add	r3, r2
 8001fb8:	009a      	lsls	r2, r3, #2
 8001fba:	441a      	add	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fc6:	4a0c      	ldr	r2, [pc, #48]	; (8001ff8 <UART_SetConfig+0x410>)
 8001fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8001fcc:	095b      	lsrs	r3, r3, #5
 8001fce:	2264      	movs	r2, #100	; 0x64
 8001fd0:	fb02 f303 	mul.w	r3, r2, r3
 8001fd4:	1aeb      	subs	r3, r5, r3
 8001fd6:	011b      	lsls	r3, r3, #4
 8001fd8:	3332      	adds	r3, #50	; 0x32
 8001fda:	4a07      	ldr	r2, [pc, #28]	; (8001ff8 <UART_SetConfig+0x410>)
 8001fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe0:	095b      	lsrs	r3, r3, #5
 8001fe2:	f003 020f 	and.w	r2, r3, #15
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4422      	add	r2, r4
 8001fec:	609a      	str	r2, [r3, #8]
}
 8001fee:	e7ff      	b.n	8001ff0 <UART_SetConfig+0x408>
 8001ff0:	bf00      	nop
 8001ff2:	3710      	adds	r7, #16
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bdb0      	pop	{r4, r5, r7, pc}
 8001ff8:	51eb851f 	.word	0x51eb851f

08001ffc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002000:	f7fe fa8a 	bl	8000518 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002004:	f000 f97e 	bl	8002304 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002008:	f000 fa2e 	bl	8002468 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800200c:	f000 fa02 	bl	8002414 <MX_USART3_UART_Init>
  MX_UART8_Init();
 8002010:	f000 f9d6 	bl	80023c0 <MX_UART8_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_UART_Receive_IT(&huart8, data.info_in_buffer, 3);
 8002014:	2203      	movs	r2, #3
 8002016:	49af      	ldr	r1, [pc, #700]	; (80022d4 <main+0x2d8>)
 8002018:	48af      	ldr	r0, [pc, #700]	; (80022d8 <main+0x2dc>)
 800201a:	f7ff fb09 	bl	8001630 <HAL_UART_Receive_IT>

	  // Assign board info
	  board_data.board_info_raw.board_type_1 = HAL_GPIO_ReadPin(GPIOD, board_type_1_Pin) ? 0b1 : 0b0;
 800201e:	2102      	movs	r1, #2
 8002020:	48ae      	ldr	r0, [pc, #696]	; (80022dc <main+0x2e0>)
 8002022:	f7fe fdb1 	bl	8000b88 <HAL_GPIO_ReadPin>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	bf14      	ite	ne
 800202c:	2301      	movne	r3, #1
 800202e:	2300      	moveq	r3, #0
 8002030:	b2db      	uxtb	r3, r3
 8002032:	01db      	lsls	r3, r3, #7
 8002034:	b25b      	sxtb	r3, r3
 8002036:	11db      	asrs	r3, r3, #7
 8002038:	b259      	sxtb	r1, r3
 800203a:	4aa9      	ldr	r2, [pc, #676]	; (80022e0 <main+0x2e4>)
 800203c:	7813      	ldrb	r3, [r2, #0]
 800203e:	f361 0300 	bfi	r3, r1, #0, #1
 8002042:	7013      	strb	r3, [r2, #0]
	  board_data.board_info_raw.board_type_2 = HAL_GPIO_ReadPin(GPIOD, board_type_2_Pin) ? 0b1 : 0b0;
 8002044:	2101      	movs	r1, #1
 8002046:	48a5      	ldr	r0, [pc, #660]	; (80022dc <main+0x2e0>)
 8002048:	f7fe fd9e 	bl	8000b88 <HAL_GPIO_ReadPin>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	bf14      	ite	ne
 8002052:	2301      	movne	r3, #1
 8002054:	2300      	moveq	r3, #0
 8002056:	b2db      	uxtb	r3, r3
 8002058:	01db      	lsls	r3, r3, #7
 800205a:	b25b      	sxtb	r3, r3
 800205c:	11db      	asrs	r3, r3, #7
 800205e:	b259      	sxtb	r1, r3
 8002060:	4a9f      	ldr	r2, [pc, #636]	; (80022e0 <main+0x2e4>)
 8002062:	7813      	ldrb	r3, [r2, #0]
 8002064:	f361 0341 	bfi	r3, r1, #1, #1
 8002068:	7013      	strb	r3, [r2, #0]
	  board_data.board_info_raw.board_type_3 = HAL_GPIO_ReadPin(GPIOC, board_type_3_Pin) ? 0b1 : 0b0;
 800206a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800206e:	489d      	ldr	r0, [pc, #628]	; (80022e4 <main+0x2e8>)
 8002070:	f7fe fd8a 	bl	8000b88 <HAL_GPIO_ReadPin>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	bf14      	ite	ne
 800207a:	2301      	movne	r3, #1
 800207c:	2300      	moveq	r3, #0
 800207e:	b2db      	uxtb	r3, r3
 8002080:	01db      	lsls	r3, r3, #7
 8002082:	b25b      	sxtb	r3, r3
 8002084:	11db      	asrs	r3, r3, #7
 8002086:	b259      	sxtb	r1, r3
 8002088:	4a95      	ldr	r2, [pc, #596]	; (80022e0 <main+0x2e4>)
 800208a:	7813      	ldrb	r3, [r2, #0]
 800208c:	f361 0382 	bfi	r3, r1, #2, #1
 8002090:	7013      	strb	r3, [r2, #0]
	  board_data.board_info_raw.board_type_4 = HAL_GPIO_ReadPin(GPIOC, board_type_4_Pin) ? 0b1 : 0b0;
 8002092:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002096:	4893      	ldr	r0, [pc, #588]	; (80022e4 <main+0x2e8>)
 8002098:	f7fe fd76 	bl	8000b88 <HAL_GPIO_ReadPin>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	bf14      	ite	ne
 80020a2:	2301      	movne	r3, #1
 80020a4:	2300      	moveq	r3, #0
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	01db      	lsls	r3, r3, #7
 80020aa:	b25b      	sxtb	r3, r3
 80020ac:	11db      	asrs	r3, r3, #7
 80020ae:	b259      	sxtb	r1, r3
 80020b0:	4a8b      	ldr	r2, [pc, #556]	; (80022e0 <main+0x2e4>)
 80020b2:	7813      	ldrb	r3, [r2, #0]
 80020b4:	f361 03c3 	bfi	r3, r1, #3, #1
 80020b8:	7013      	strb	r3, [r2, #0]

	  board_data.board_info_raw.board_num_1 = HAL_GPIO_ReadPin(GPIOD, board_num_1_Pin) ? 0b1 : 0b0;
 80020ba:	2120      	movs	r1, #32
 80020bc:	4887      	ldr	r0, [pc, #540]	; (80022dc <main+0x2e0>)
 80020be:	f7fe fd63 	bl	8000b88 <HAL_GPIO_ReadPin>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	bf14      	ite	ne
 80020c8:	2301      	movne	r3, #1
 80020ca:	2300      	moveq	r3, #0
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	01db      	lsls	r3, r3, #7
 80020d0:	b25b      	sxtb	r3, r3
 80020d2:	11db      	asrs	r3, r3, #7
 80020d4:	b259      	sxtb	r1, r3
 80020d6:	4a82      	ldr	r2, [pc, #520]	; (80022e0 <main+0x2e4>)
 80020d8:	7813      	ldrb	r3, [r2, #0]
 80020da:	f361 1304 	bfi	r3, r1, #4, #1
 80020de:	7013      	strb	r3, [r2, #0]
	  board_data.board_info_raw.board_num_2 = HAL_GPIO_ReadPin(GPIOD, board_num_2_Pin) ? 0b1 : 0b0;
 80020e0:	2110      	movs	r1, #16
 80020e2:	487e      	ldr	r0, [pc, #504]	; (80022dc <main+0x2e0>)
 80020e4:	f7fe fd50 	bl	8000b88 <HAL_GPIO_ReadPin>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	bf14      	ite	ne
 80020ee:	2301      	movne	r3, #1
 80020f0:	2300      	moveq	r3, #0
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	01db      	lsls	r3, r3, #7
 80020f6:	b25b      	sxtb	r3, r3
 80020f8:	11db      	asrs	r3, r3, #7
 80020fa:	b259      	sxtb	r1, r3
 80020fc:	4a78      	ldr	r2, [pc, #480]	; (80022e0 <main+0x2e4>)
 80020fe:	7813      	ldrb	r3, [r2, #0]
 8002100:	f361 1345 	bfi	r3, r1, #5, #1
 8002104:	7013      	strb	r3, [r2, #0]
	  board_data.board_info_raw.board_num_3 = HAL_GPIO_ReadPin(GPIOD, board_num_3_Pin) ? 0b1 : 0b0;
 8002106:	2108      	movs	r1, #8
 8002108:	4874      	ldr	r0, [pc, #464]	; (80022dc <main+0x2e0>)
 800210a:	f7fe fd3d 	bl	8000b88 <HAL_GPIO_ReadPin>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	bf14      	ite	ne
 8002114:	2301      	movne	r3, #1
 8002116:	2300      	moveq	r3, #0
 8002118:	b2db      	uxtb	r3, r3
 800211a:	01db      	lsls	r3, r3, #7
 800211c:	b25b      	sxtb	r3, r3
 800211e:	11db      	asrs	r3, r3, #7
 8002120:	b259      	sxtb	r1, r3
 8002122:	4a6f      	ldr	r2, [pc, #444]	; (80022e0 <main+0x2e4>)
 8002124:	7813      	ldrb	r3, [r2, #0]
 8002126:	f361 1386 	bfi	r3, r1, #6, #1
 800212a:	7013      	strb	r3, [r2, #0]
	  board_data.board_info_raw.board_num_4 = HAL_GPIO_ReadPin(GPIOD, board_num_4_Pin) ? 0b1 : 0b0;
 800212c:	2104      	movs	r1, #4
 800212e:	486b      	ldr	r0, [pc, #428]	; (80022dc <main+0x2e0>)
 8002130:	f7fe fd2a 	bl	8000b88 <HAL_GPIO_ReadPin>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	bf14      	ite	ne
 800213a:	2301      	movne	r3, #1
 800213c:	2300      	moveq	r3, #0
 800213e:	b2db      	uxtb	r3, r3
 8002140:	01db      	lsls	r3, r3, #7
 8002142:	b25b      	sxtb	r3, r3
 8002144:	11db      	asrs	r3, r3, #7
 8002146:	b259      	sxtb	r1, r3
 8002148:	4a65      	ldr	r2, [pc, #404]	; (80022e0 <main+0x2e4>)
 800214a:	7813      	ldrb	r3, [r2, #0]
 800214c:	f361 13c7 	bfi	r3, r1, #7, #1
 8002150:	7013      	strb	r3, [r2, #0]

	  info_out.board_info = board_data.board_info_char;
 8002152:	4b63      	ldr	r3, [pc, #396]	; (80022e0 <main+0x2e4>)
 8002154:	781a      	ldrb	r2, [r3, #0]
 8002156:	4b64      	ldr	r3, [pc, #400]	; (80022e8 <main+0x2ec>)
 8002158:	701a      	strb	r2, [r3, #0]

	  //Status LED
	  ticker++;
 800215a:	4b64      	ldr	r3, [pc, #400]	; (80022ec <main+0x2f0>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	3301      	adds	r3, #1
 8002160:	4a62      	ldr	r2, [pc, #392]	; (80022ec <main+0x2f0>)
 8002162:	6013      	str	r3, [r2, #0]
	  if (ticker % LED_SCALER == 0)  HAL_GPIO_TogglePin(status_led_GPIO_Port, status_led_Pin);
 8002164:	4b61      	ldr	r3, [pc, #388]	; (80022ec <main+0x2f0>)
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	4b61      	ldr	r3, [pc, #388]	; (80022f0 <main+0x2f4>)
 800216a:	fba3 1302 	umull	r1, r3, r3, r2
 800216e:	0b5b      	lsrs	r3, r3, #13
 8002170:	f242 7110 	movw	r1, #10000	; 0x2710
 8002174:	fb01 f303 	mul.w	r3, r1, r3
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b00      	cmp	r3, #0
 800217c:	d103      	bne.n	8002186 <main+0x18a>
 800217e:	2108      	movs	r1, #8
 8002180:	485c      	ldr	r0, [pc, #368]	; (80022f4 <main+0x2f8>)
 8002182:	f7fe fd32 	bl	8000bea <HAL_GPIO_TogglePin>
	  if (ticker == MAX_TICKER_VALUE) ticker = 0;
 8002186:	4b59      	ldr	r3, [pc, #356]	; (80022ec <main+0x2f0>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800218e:	d102      	bne.n	8002196 <main+0x19a>
 8002190:	4b56      	ldr	r3, [pc, #344]	; (80022ec <main+0x2f0>)
 8002192:	2200      	movs	r2, #0
 8002194:	601a      	str	r2, [r3, #0]

	  //Dip switches linked to LEDs
	  (HAL_GPIO_ReadPin(GPIOD, board_type_1_Pin) == 0) ? HAL_GPIO_WritePin(GPIOE, d6_Pin, GPIO_PIN_RESET) :
 8002196:	2102      	movs	r1, #2
 8002198:	4850      	ldr	r0, [pc, #320]	; (80022dc <main+0x2e0>)
 800219a:	f7fe fcf5 	bl	8000b88 <HAL_GPIO_ReadPin>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d105      	bne.n	80021b0 <main+0x1b4>
 80021a4:	2200      	movs	r2, #0
 80021a6:	2104      	movs	r1, #4
 80021a8:	4853      	ldr	r0, [pc, #332]	; (80022f8 <main+0x2fc>)
 80021aa:	f7fe fd05 	bl	8000bb8 <HAL_GPIO_WritePin>
 80021ae:	e004      	b.n	80021ba <main+0x1be>
			  	  HAL_GPIO_WritePin(GPIOE, d6_Pin, GPIO_PIN_SET);
 80021b0:	2201      	movs	r2, #1
 80021b2:	2104      	movs	r1, #4
 80021b4:	4850      	ldr	r0, [pc, #320]	; (80022f8 <main+0x2fc>)
 80021b6:	f7fe fcff 	bl	8000bb8 <HAL_GPIO_WritePin>

	  (HAL_GPIO_ReadPin(GPIOD, board_type_2_Pin) == 0) ? HAL_GPIO_WritePin(GPIOE, d7_Pin, GPIO_PIN_RESET) :
 80021ba:	2101      	movs	r1, #1
 80021bc:	4847      	ldr	r0, [pc, #284]	; (80022dc <main+0x2e0>)
 80021be:	f7fe fce3 	bl	8000b88 <HAL_GPIO_ReadPin>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d105      	bne.n	80021d4 <main+0x1d8>
 80021c8:	2200      	movs	r2, #0
 80021ca:	2108      	movs	r1, #8
 80021cc:	484a      	ldr	r0, [pc, #296]	; (80022f8 <main+0x2fc>)
 80021ce:	f7fe fcf3 	bl	8000bb8 <HAL_GPIO_WritePin>
 80021d2:	e004      	b.n	80021de <main+0x1e2>
		  	  HAL_GPIO_WritePin(GPIOE, d7_Pin, GPIO_PIN_SET);
 80021d4:	2201      	movs	r2, #1
 80021d6:	2108      	movs	r1, #8
 80021d8:	4847      	ldr	r0, [pc, #284]	; (80022f8 <main+0x2fc>)
 80021da:	f7fe fced 	bl	8000bb8 <HAL_GPIO_WritePin>

	  (HAL_GPIO_ReadPin(GPIOC, board_type_3_Pin) == 0) ? HAL_GPIO_WritePin(GPIOA, d8_Pin, GPIO_PIN_RESET) :
 80021de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021e2:	4840      	ldr	r0, [pc, #256]	; (80022e4 <main+0x2e8>)
 80021e4:	f7fe fcd0 	bl	8000b88 <HAL_GPIO_ReadPin>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d106      	bne.n	80021fc <main+0x200>
 80021ee:	2200      	movs	r2, #0
 80021f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021f4:	4841      	ldr	r0, [pc, #260]	; (80022fc <main+0x300>)
 80021f6:	f7fe fcdf 	bl	8000bb8 <HAL_GPIO_WritePin>
 80021fa:	e005      	b.n	8002208 <main+0x20c>
		  	  HAL_GPIO_WritePin(GPIOA, d8_Pin, GPIO_PIN_SET);
 80021fc:	2201      	movs	r2, #1
 80021fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002202:	483e      	ldr	r0, [pc, #248]	; (80022fc <main+0x300>)
 8002204:	f7fe fcd8 	bl	8000bb8 <HAL_GPIO_WritePin>

	  (HAL_GPIO_ReadPin(GPIOC, board_type_4_Pin) == 0) ? HAL_GPIO_WritePin(GPIOC, d9_Pin, GPIO_PIN_RESET) :
 8002208:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800220c:	4835      	ldr	r0, [pc, #212]	; (80022e4 <main+0x2e8>)
 800220e:	f7fe fcbb 	bl	8000b88 <HAL_GPIO_ReadPin>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d106      	bne.n	8002226 <main+0x22a>
 8002218:	2200      	movs	r2, #0
 800221a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800221e:	4831      	ldr	r0, [pc, #196]	; (80022e4 <main+0x2e8>)
 8002220:	f7fe fcca 	bl	8000bb8 <HAL_GPIO_WritePin>
 8002224:	e005      	b.n	8002232 <main+0x236>
		  	  HAL_GPIO_WritePin(GPIOC, d9_Pin, GPIO_PIN_SET);
 8002226:	2201      	movs	r2, #1
 8002228:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800222c:	482d      	ldr	r0, [pc, #180]	; (80022e4 <main+0x2e8>)
 800222e:	f7fe fcc3 	bl	8000bb8 <HAL_GPIO_WritePin>

	  (HAL_GPIO_ReadPin(GPIOD, board_num_1_Pin) == 0) ? HAL_GPIO_WritePin(GPIOF, d5_Pin, GPIO_PIN_RESET) :
 8002232:	2120      	movs	r1, #32
 8002234:	4829      	ldr	r0, [pc, #164]	; (80022dc <main+0x2e0>)
 8002236:	f7fe fca7 	bl	8000b88 <HAL_GPIO_ReadPin>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d106      	bne.n	800224e <main+0x252>
 8002240:	2200      	movs	r2, #0
 8002242:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002246:	482e      	ldr	r0, [pc, #184]	; (8002300 <main+0x304>)
 8002248:	f7fe fcb6 	bl	8000bb8 <HAL_GPIO_WritePin>
 800224c:	e005      	b.n	800225a <main+0x25e>
		  	  HAL_GPIO_WritePin(GPIOF, d5_Pin, GPIO_PIN_SET);
 800224e:	2201      	movs	r2, #1
 8002250:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002254:	482a      	ldr	r0, [pc, #168]	; (8002300 <main+0x304>)
 8002256:	f7fe fcaf 	bl	8000bb8 <HAL_GPIO_WritePin>

	  (HAL_GPIO_ReadPin(GPIOD, board_num_2_Pin) == 0) ? HAL_GPIO_WritePin(GPIOF, d4_Pin, GPIO_PIN_RESET) :
 800225a:	2110      	movs	r1, #16
 800225c:	481f      	ldr	r0, [pc, #124]	; (80022dc <main+0x2e0>)
 800225e:	f7fe fc93 	bl	8000b88 <HAL_GPIO_ReadPin>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d106      	bne.n	8002276 <main+0x27a>
 8002268:	2200      	movs	r2, #0
 800226a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800226e:	4824      	ldr	r0, [pc, #144]	; (8002300 <main+0x304>)
 8002270:	f7fe fca2 	bl	8000bb8 <HAL_GPIO_WritePin>
 8002274:	e005      	b.n	8002282 <main+0x286>
		  	  HAL_GPIO_WritePin(GPIOF, d4_Pin, GPIO_PIN_SET);
 8002276:	2201      	movs	r2, #1
 8002278:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800227c:	4820      	ldr	r0, [pc, #128]	; (8002300 <main+0x304>)
 800227e:	f7fe fc9b 	bl	8000bb8 <HAL_GPIO_WritePin>

	  (HAL_GPIO_ReadPin(GPIOD, board_num_3_Pin) == 0) ? HAL_GPIO_WritePin(GPIOF, d3_Pin, GPIO_PIN_RESET) :
 8002282:	2108      	movs	r1, #8
 8002284:	4815      	ldr	r0, [pc, #84]	; (80022dc <main+0x2e0>)
 8002286:	f7fe fc7f 	bl	8000b88 <HAL_GPIO_ReadPin>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d106      	bne.n	800229e <main+0x2a2>
 8002290:	2200      	movs	r2, #0
 8002292:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002296:	481a      	ldr	r0, [pc, #104]	; (8002300 <main+0x304>)
 8002298:	f7fe fc8e 	bl	8000bb8 <HAL_GPIO_WritePin>
 800229c:	e005      	b.n	80022aa <main+0x2ae>
		  	  HAL_GPIO_WritePin(GPIOF, d3_Pin, GPIO_PIN_SET);
 800229e:	2201      	movs	r2, #1
 80022a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022a4:	4816      	ldr	r0, [pc, #88]	; (8002300 <main+0x304>)
 80022a6:	f7fe fc87 	bl	8000bb8 <HAL_GPIO_WritePin>

	  (HAL_GPIO_ReadPin(GPIOD, board_num_4_Pin) == 0) ? HAL_GPIO_WritePin(GPIOF, d2_Pin, GPIO_PIN_RESET) :
 80022aa:	2104      	movs	r1, #4
 80022ac:	480b      	ldr	r0, [pc, #44]	; (80022dc <main+0x2e0>)
 80022ae:	f7fe fc6b 	bl	8000b88 <HAL_GPIO_ReadPin>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d106      	bne.n	80022c6 <main+0x2ca>
 80022b8:	2200      	movs	r2, #0
 80022ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022be:	4810      	ldr	r0, [pc, #64]	; (8002300 <main+0x304>)
 80022c0:	f7fe fc7a 	bl	8000bb8 <HAL_GPIO_WritePin>
 80022c4:	e6a6      	b.n	8002014 <main+0x18>
	  		  HAL_GPIO_WritePin(GPIOF, d2_Pin, GPIO_PIN_SET);
 80022c6:	2201      	movs	r2, #1
 80022c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022cc:	480c      	ldr	r0, [pc, #48]	; (8002300 <main+0x304>)
 80022ce:	f7fe fc73 	bl	8000bb8 <HAL_GPIO_WritePin>
	  HAL_UART_Receive_IT(&huart8, data.info_in_buffer, 3);
 80022d2:	e69f      	b.n	8002014 <main+0x18>
 80022d4:	20000094 	.word	0x20000094
 80022d8:	20000098 	.word	0x20000098
 80022dc:	40020c00 	.word	0x40020c00
 80022e0:	20000050 	.word	0x20000050
 80022e4:	40020800 	.word	0x40020800
 80022e8:	200000d8 	.word	0x200000d8
 80022ec:	20000028 	.word	0x20000028
 80022f0:	d1b71759 	.word	0xd1b71759
 80022f4:	40020400 	.word	0x40020400
 80022f8:	40021000 	.word	0x40021000
 80022fc:	40020000 	.word	0x40020000
 8002300:	40021400 	.word	0x40021400

08002304 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b094      	sub	sp, #80	; 0x50
 8002308:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800230a:	f107 031c 	add.w	r3, r7, #28
 800230e:	2234      	movs	r2, #52	; 0x34
 8002310:	2100      	movs	r1, #0
 8002312:	4618      	mov	r0, r3
 8002314:	f000 fdf4 	bl	8002f00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002318:	f107 0308 	add.w	r3, r7, #8
 800231c:	2200      	movs	r2, #0
 800231e:	601a      	str	r2, [r3, #0]
 8002320:	605a      	str	r2, [r3, #4]
 8002322:	609a      	str	r2, [r3, #8]
 8002324:	60da      	str	r2, [r3, #12]
 8002326:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002328:	2300      	movs	r3, #0
 800232a:	607b      	str	r3, [r7, #4]
 800232c:	4b22      	ldr	r3, [pc, #136]	; (80023b8 <SystemClock_Config+0xb4>)
 800232e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002330:	4a21      	ldr	r2, [pc, #132]	; (80023b8 <SystemClock_Config+0xb4>)
 8002332:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002336:	6413      	str	r3, [r2, #64]	; 0x40
 8002338:	4b1f      	ldr	r3, [pc, #124]	; (80023b8 <SystemClock_Config+0xb4>)
 800233a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002340:	607b      	str	r3, [r7, #4]
 8002342:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002344:	2300      	movs	r3, #0
 8002346:	603b      	str	r3, [r7, #0]
 8002348:	4b1c      	ldr	r3, [pc, #112]	; (80023bc <SystemClock_Config+0xb8>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a1b      	ldr	r2, [pc, #108]	; (80023bc <SystemClock_Config+0xb8>)
 800234e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002352:	6013      	str	r3, [r2, #0]
 8002354:	4b19      	ldr	r3, [pc, #100]	; (80023bc <SystemClock_Config+0xb8>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800235c:	603b      	str	r3, [r7, #0]
 800235e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002360:	2302      	movs	r3, #2
 8002362:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002364:	2301      	movs	r3, #1
 8002366:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002368:	2310      	movs	r3, #16
 800236a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800236c:	2300      	movs	r3, #0
 800236e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002370:	f107 031c 	add.w	r3, r7, #28
 8002374:	4618      	mov	r0, r3
 8002376:	f7fe fe33 	bl	8000fe0 <HAL_RCC_OscConfig>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d001      	beq.n	8002384 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8002380:	f000 fbe8 	bl	8002b54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002384:	230f      	movs	r3, #15
 8002386:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002388:	2300      	movs	r3, #0
 800238a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800238c:	2300      	movs	r3, #0
 800238e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002390:	2300      	movs	r3, #0
 8002392:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002394:	2300      	movs	r3, #0
 8002396:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002398:	f107 0308 	add.w	r3, r7, #8
 800239c:	2100      	movs	r1, #0
 800239e:	4618      	mov	r0, r3
 80023a0:	f7fe fc56 	bl	8000c50 <HAL_RCC_ClockConfig>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80023aa:	f000 fbd3 	bl	8002b54 <Error_Handler>
  }
}
 80023ae:	bf00      	nop
 80023b0:	3750      	adds	r7, #80	; 0x50
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	40023800 	.word	0x40023800
 80023bc:	40007000 	.word	0x40007000

080023c0 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 80023c4:	4b11      	ldr	r3, [pc, #68]	; (800240c <MX_UART8_Init+0x4c>)
 80023c6:	4a12      	ldr	r2, [pc, #72]	; (8002410 <MX_UART8_Init+0x50>)
 80023c8:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 9600;
 80023ca:	4b10      	ldr	r3, [pc, #64]	; (800240c <MX_UART8_Init+0x4c>)
 80023cc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80023d0:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80023d2:	4b0e      	ldr	r3, [pc, #56]	; (800240c <MX_UART8_Init+0x4c>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80023d8:	4b0c      	ldr	r3, [pc, #48]	; (800240c <MX_UART8_Init+0x4c>)
 80023da:	2200      	movs	r2, #0
 80023dc:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80023de:	4b0b      	ldr	r3, [pc, #44]	; (800240c <MX_UART8_Init+0x4c>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80023e4:	4b09      	ldr	r3, [pc, #36]	; (800240c <MX_UART8_Init+0x4c>)
 80023e6:	220c      	movs	r2, #12
 80023e8:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023ea:	4b08      	ldr	r3, [pc, #32]	; (800240c <MX_UART8_Init+0x4c>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80023f0:	4b06      	ldr	r3, [pc, #24]	; (800240c <MX_UART8_Init+0x4c>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80023f6:	4805      	ldr	r0, [pc, #20]	; (800240c <MX_UART8_Init+0x4c>)
 80023f8:	f7ff f834 	bl	8001464 <HAL_UART_Init>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <MX_UART8_Init+0x46>
  {
    Error_Handler();
 8002402:	f000 fba7 	bl	8002b54 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8002406:	bf00      	nop
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	20000098 	.word	0x20000098
 8002410:	40007c00 	.word	0x40007c00

08002414 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002418:	4b11      	ldr	r3, [pc, #68]	; (8002460 <MX_USART3_UART_Init+0x4c>)
 800241a:	4a12      	ldr	r2, [pc, #72]	; (8002464 <MX_USART3_UART_Init+0x50>)
 800241c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800241e:	4b10      	ldr	r3, [pc, #64]	; (8002460 <MX_USART3_UART_Init+0x4c>)
 8002420:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002424:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002426:	4b0e      	ldr	r3, [pc, #56]	; (8002460 <MX_USART3_UART_Init+0x4c>)
 8002428:	2200      	movs	r2, #0
 800242a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800242c:	4b0c      	ldr	r3, [pc, #48]	; (8002460 <MX_USART3_UART_Init+0x4c>)
 800242e:	2200      	movs	r2, #0
 8002430:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002432:	4b0b      	ldr	r3, [pc, #44]	; (8002460 <MX_USART3_UART_Init+0x4c>)
 8002434:	2200      	movs	r2, #0
 8002436:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002438:	4b09      	ldr	r3, [pc, #36]	; (8002460 <MX_USART3_UART_Init+0x4c>)
 800243a:	220c      	movs	r2, #12
 800243c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800243e:	4b08      	ldr	r3, [pc, #32]	; (8002460 <MX_USART3_UART_Init+0x4c>)
 8002440:	2200      	movs	r2, #0
 8002442:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002444:	4b06      	ldr	r3, [pc, #24]	; (8002460 <MX_USART3_UART_Init+0x4c>)
 8002446:	2200      	movs	r2, #0
 8002448:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800244a:	4805      	ldr	r0, [pc, #20]	; (8002460 <MX_USART3_UART_Init+0x4c>)
 800244c:	f7ff f80a 	bl	8001464 <HAL_UART_Init>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002456:	f000 fb7d 	bl	8002b54 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800245a:	bf00      	nop
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	20000054 	.word	0x20000054
 8002464:	40004800 	.word	0x40004800

08002468 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b08c      	sub	sp, #48	; 0x30
 800246c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800246e:	f107 031c 	add.w	r3, r7, #28
 8002472:	2200      	movs	r2, #0
 8002474:	601a      	str	r2, [r3, #0]
 8002476:	605a      	str	r2, [r3, #4]
 8002478:	609a      	str	r2, [r3, #8]
 800247a:	60da      	str	r2, [r3, #12]
 800247c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800247e:	2300      	movs	r3, #0
 8002480:	61bb      	str	r3, [r7, #24]
 8002482:	4ba7      	ldr	r3, [pc, #668]	; (8002720 <MX_GPIO_Init+0x2b8>)
 8002484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002486:	4aa6      	ldr	r2, [pc, #664]	; (8002720 <MX_GPIO_Init+0x2b8>)
 8002488:	f043 0310 	orr.w	r3, r3, #16
 800248c:	6313      	str	r3, [r2, #48]	; 0x30
 800248e:	4ba4      	ldr	r3, [pc, #656]	; (8002720 <MX_GPIO_Init+0x2b8>)
 8002490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002492:	f003 0310 	and.w	r3, r3, #16
 8002496:	61bb      	str	r3, [r7, #24]
 8002498:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800249a:	2300      	movs	r3, #0
 800249c:	617b      	str	r3, [r7, #20]
 800249e:	4ba0      	ldr	r3, [pc, #640]	; (8002720 <MX_GPIO_Init+0x2b8>)
 80024a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a2:	4a9f      	ldr	r2, [pc, #636]	; (8002720 <MX_GPIO_Init+0x2b8>)
 80024a4:	f043 0304 	orr.w	r3, r3, #4
 80024a8:	6313      	str	r3, [r2, #48]	; 0x30
 80024aa:	4b9d      	ldr	r3, [pc, #628]	; (8002720 <MX_GPIO_Init+0x2b8>)
 80024ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ae:	f003 0304 	and.w	r3, r3, #4
 80024b2:	617b      	str	r3, [r7, #20]
 80024b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80024b6:	2300      	movs	r3, #0
 80024b8:	613b      	str	r3, [r7, #16]
 80024ba:	4b99      	ldr	r3, [pc, #612]	; (8002720 <MX_GPIO_Init+0x2b8>)
 80024bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024be:	4a98      	ldr	r2, [pc, #608]	; (8002720 <MX_GPIO_Init+0x2b8>)
 80024c0:	f043 0320 	orr.w	r3, r3, #32
 80024c4:	6313      	str	r3, [r2, #48]	; 0x30
 80024c6:	4b96      	ldr	r3, [pc, #600]	; (8002720 <MX_GPIO_Init+0x2b8>)
 80024c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ca:	f003 0320 	and.w	r3, r3, #32
 80024ce:	613b      	str	r3, [r7, #16]
 80024d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80024d2:	2300      	movs	r3, #0
 80024d4:	60fb      	str	r3, [r7, #12]
 80024d6:	4b92      	ldr	r3, [pc, #584]	; (8002720 <MX_GPIO_Init+0x2b8>)
 80024d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024da:	4a91      	ldr	r2, [pc, #580]	; (8002720 <MX_GPIO_Init+0x2b8>)
 80024dc:	f043 0308 	orr.w	r3, r3, #8
 80024e0:	6313      	str	r3, [r2, #48]	; 0x30
 80024e2:	4b8f      	ldr	r3, [pc, #572]	; (8002720 <MX_GPIO_Init+0x2b8>)
 80024e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e6:	f003 0308 	and.w	r3, r3, #8
 80024ea:	60fb      	str	r3, [r7, #12]
 80024ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ee:	2300      	movs	r3, #0
 80024f0:	60bb      	str	r3, [r7, #8]
 80024f2:	4b8b      	ldr	r3, [pc, #556]	; (8002720 <MX_GPIO_Init+0x2b8>)
 80024f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f6:	4a8a      	ldr	r2, [pc, #552]	; (8002720 <MX_GPIO_Init+0x2b8>)
 80024f8:	f043 0301 	orr.w	r3, r3, #1
 80024fc:	6313      	str	r3, [r2, #48]	; 0x30
 80024fe:	4b88      	ldr	r3, [pc, #544]	; (8002720 <MX_GPIO_Init+0x2b8>)
 8002500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	60bb      	str	r3, [r7, #8]
 8002508:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800250a:	2300      	movs	r3, #0
 800250c:	607b      	str	r3, [r7, #4]
 800250e:	4b84      	ldr	r3, [pc, #528]	; (8002720 <MX_GPIO_Init+0x2b8>)
 8002510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002512:	4a83      	ldr	r2, [pc, #524]	; (8002720 <MX_GPIO_Init+0x2b8>)
 8002514:	f043 0302 	orr.w	r3, r3, #2
 8002518:	6313      	str	r3, [r2, #48]	; 0x30
 800251a:	4b81      	ldr	r3, [pc, #516]	; (8002720 <MX_GPIO_Init+0x2b8>)
 800251c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251e:	f003 0302 	and.w	r3, r3, #2
 8002522:	607b      	str	r3, [r7, #4]
 8002524:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, d6_Pin|d7_Pin|test2_Pin|test1_Pin, GPIO_PIN_RESET);
 8002526:	2200      	movs	r2, #0
 8002528:	210f      	movs	r1, #15
 800252a:	487e      	ldr	r0, [pc, #504]	; (8002724 <MX_GPIO_Init+0x2bc>)
 800252c:	f7fe fb44 	bl	8000bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, con4_1_Pin|con4_2_Pin|con3_2_Pin|d2_Pin 
 8002530:	2200      	movs	r2, #0
 8002532:	f647 0183 	movw	r1, #30851	; 0x7883
 8002536:	487c      	ldr	r0, [pc, #496]	; (8002728 <MX_GPIO_Init+0x2c0>)
 8002538:	f7fe fb3e 	bl	8000bb8 <HAL_GPIO_WritePin>
                          |d3_Pin|d4_Pin|d5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(d9_GPIO_Port, d9_Pin, GPIO_PIN_RESET);
 800253c:	2200      	movs	r2, #0
 800253e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002542:	487a      	ldr	r0, [pc, #488]	; (800272c <MX_GPIO_Init+0x2c4>)
 8002544:	f7fe fb38 	bl	8000bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(d8_GPIO_Port, d8_Pin, GPIO_PIN_RESET);
 8002548:	2200      	movs	r2, #0
 800254a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800254e:	4878      	ldr	r0, [pc, #480]	; (8002730 <MX_GPIO_Init+0x2c8>)
 8002550:	f7fe fb32 	bl	8000bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, status_led_Pin|con4_3_Pin|test3_Pin, GPIO_PIN_RESET);
 8002554:	2200      	movs	r2, #0
 8002556:	f44f 710a 	mov.w	r1, #552	; 0x228
 800255a:	4876      	ldr	r0, [pc, #472]	; (8002734 <MX_GPIO_Init+0x2cc>)
 800255c:	f7fe fb2c 	bl	8000bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : d6_Pin d7_Pin test2_Pin test1_Pin */
  GPIO_InitStruct.Pin = d6_Pin|d7_Pin|test2_Pin|test1_Pin;
 8002560:	230f      	movs	r3, #15
 8002562:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002564:	2301      	movs	r3, #1
 8002566:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002568:	2300      	movs	r3, #0
 800256a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800256c:	2300      	movs	r3, #0
 800256e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002570:	f107 031c 	add.w	r3, r7, #28
 8002574:	4619      	mov	r1, r3
 8002576:	486b      	ldr	r0, [pc, #428]	; (8002724 <MX_GPIO_Init+0x2bc>)
 8002578:	f7fe f974 	bl	8000864 <HAL_GPIO_Init>

  /*Configure GPIO pins : con4_1_Pin con4_2_Pin con3_2_Pin d2_Pin 
                           d3_Pin d4_Pin d5_Pin */
  GPIO_InitStruct.Pin = con4_1_Pin|con4_2_Pin|con3_2_Pin|d2_Pin 
 800257c:	f647 0383 	movw	r3, #30851	; 0x7883
 8002580:	61fb      	str	r3, [r7, #28]
                          |d3_Pin|d4_Pin|d5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002582:	2301      	movs	r3, #1
 8002584:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002586:	2300      	movs	r3, #0
 8002588:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800258a:	2300      	movs	r3, #0
 800258c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800258e:	f107 031c 	add.w	r3, r7, #28
 8002592:	4619      	mov	r1, r3
 8002594:	4864      	ldr	r0, [pc, #400]	; (8002728 <MX_GPIO_Init+0x2c0>)
 8002596:	f7fe f965 	bl	8000864 <HAL_GPIO_Init>

  /*Configure GPIO pin : con3_1_Pin */
  GPIO_InitStruct.Pin = con3_1_Pin;
 800259a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800259e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80025a0:	4b65      	ldr	r3, [pc, #404]	; (8002738 <MX_GPIO_Init+0x2d0>)
 80025a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a4:	2300      	movs	r3, #0
 80025a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(con3_1_GPIO_Port, &GPIO_InitStruct);
 80025a8:	f107 031c 	add.w	r3, r7, #28
 80025ac:	4619      	mov	r1, r3
 80025ae:	485e      	ldr	r0, [pc, #376]	; (8002728 <MX_GPIO_Init+0x2c0>)
 80025b0:	f7fe f958 	bl	8000864 <HAL_GPIO_Init>

  /*Configure GPIO pins : con2_6_Pin con2_5_Pin con2_4_Pin con2_3_Pin 
                           con2_2_Pin con2_1_Pin */
  GPIO_InitStruct.Pin = con2_6_Pin|con2_5_Pin|con2_4_Pin|con2_3_Pin 
 80025b4:	233f      	movs	r3, #63	; 0x3f
 80025b6:	61fb      	str	r3, [r7, #28]
                          |con2_2_Pin|con2_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80025b8:	4b5f      	ldr	r3, [pc, #380]	; (8002738 <MX_GPIO_Init+0x2d0>)
 80025ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025bc:	2301      	movs	r3, #1
 80025be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025c0:	f107 031c 	add.w	r3, r7, #28
 80025c4:	4619      	mov	r1, r3
 80025c6:	485a      	ldr	r0, [pc, #360]	; (8002730 <MX_GPIO_Init+0x2c8>)
 80025c8:	f7fe f94c 	bl	8000864 <HAL_GPIO_Init>

  /*Configure GPIO pins : con2_7_Pin con2_8_Pin con2_9_Pin con2_10_Pin */
  GPIO_InitStruct.Pin = con2_7_Pin|con2_8_Pin|con2_9_Pin|con2_10_Pin;
 80025cc:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80025d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80025d2:	4b59      	ldr	r3, [pc, #356]	; (8002738 <MX_GPIO_Init+0x2d0>)
 80025d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025d6:	2301      	movs	r3, #1
 80025d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025da:	f107 031c 	add.w	r3, r7, #28
 80025de:	4619      	mov	r1, r3
 80025e0:	4856      	ldr	r0, [pc, #344]	; (800273c <MX_GPIO_Init+0x2d4>)
 80025e2:	f7fe f93f 	bl	8000864 <HAL_GPIO_Init>

  /*Configure GPIO pins : con4_9_Pin con4_8_Pin */
  GPIO_InitStruct.Pin = con4_9_Pin|con4_8_Pin;
 80025e6:	f44f 7310 	mov.w	r3, #576	; 0x240
 80025ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80025ec:	4b52      	ldr	r3, [pc, #328]	; (8002738 <MX_GPIO_Init+0x2d0>)
 80025ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f0:	2300      	movs	r3, #0
 80025f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025f4:	f107 031c 	add.w	r3, r7, #28
 80025f8:	4619      	mov	r1, r3
 80025fa:	484d      	ldr	r0, [pc, #308]	; (8002730 <MX_GPIO_Init+0x2c8>)
 80025fc:	f7fe f932 	bl	8000864 <HAL_GPIO_Init>

  /*Configure GPIO pin : d9_Pin */
  GPIO_InitStruct.Pin = d9_Pin;
 8002600:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002604:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002606:	2301      	movs	r3, #1
 8002608:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260a:	2300      	movs	r3, #0
 800260c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800260e:	2300      	movs	r3, #0
 8002610:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(d9_GPIO_Port, &GPIO_InitStruct);
 8002612:	f107 031c 	add.w	r3, r7, #28
 8002616:	4619      	mov	r1, r3
 8002618:	4844      	ldr	r0, [pc, #272]	; (800272c <MX_GPIO_Init+0x2c4>)
 800261a:	f7fe f923 	bl	8000864 <HAL_GPIO_Init>

  /*Configure GPIO pin : d8_Pin */
  GPIO_InitStruct.Pin = d8_Pin;
 800261e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002622:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002624:	2301      	movs	r3, #1
 8002626:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002628:	2300      	movs	r3, #0
 800262a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800262c:	2300      	movs	r3, #0
 800262e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(d8_GPIO_Port, &GPIO_InitStruct);
 8002630:	f107 031c 	add.w	r3, r7, #28
 8002634:	4619      	mov	r1, r3
 8002636:	483e      	ldr	r0, [pc, #248]	; (8002730 <MX_GPIO_Init+0x2c8>)
 8002638:	f7fe f914 	bl	8000864 <HAL_GPIO_Init>

  /*Configure GPIO pins : board_type_4_Pin board_type_3_Pin */
  GPIO_InitStruct.Pin = board_type_4_Pin|board_type_3_Pin;
 800263c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002640:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002642:	2300      	movs	r3, #0
 8002644:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002646:	2300      	movs	r3, #0
 8002648:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800264a:	f107 031c 	add.w	r3, r7, #28
 800264e:	4619      	mov	r1, r3
 8002650:	4837      	ldr	r0, [pc, #220]	; (8002730 <MX_GPIO_Init+0x2c8>)
 8002652:	f7fe f907 	bl	8000864 <HAL_GPIO_Init>

  /*Configure GPIO pins : board_type_2_Pin board_type_1_Pin board_num_4_Pin board_num_3_Pin 
                           board_num_2_Pin board_num_1_Pin */
  GPIO_InitStruct.Pin = board_type_2_Pin|board_type_1_Pin|board_num_4_Pin|board_num_3_Pin 
 8002656:	233f      	movs	r3, #63	; 0x3f
 8002658:	61fb      	str	r3, [r7, #28]
                          |board_num_2_Pin|board_num_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800265a:	2300      	movs	r3, #0
 800265c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265e:	2300      	movs	r3, #0
 8002660:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002662:	f107 031c 	add.w	r3, r7, #28
 8002666:	4619      	mov	r1, r3
 8002668:	4834      	ldr	r0, [pc, #208]	; (800273c <MX_GPIO_Init+0x2d4>)
 800266a:	f7fe f8fb 	bl	8000864 <HAL_GPIO_Init>

  /*Configure GPIO pins : status_led_Pin con4_3_Pin test3_Pin */
  GPIO_InitStruct.Pin = status_led_Pin|con4_3_Pin|test3_Pin;
 800266e:	f44f 730a 	mov.w	r3, #552	; 0x228
 8002672:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002674:	2301      	movs	r3, #1
 8002676:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002678:	2300      	movs	r3, #0
 800267a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800267c:	2300      	movs	r3, #0
 800267e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002680:	f107 031c 	add.w	r3, r7, #28
 8002684:	4619      	mov	r1, r3
 8002686:	482b      	ldr	r0, [pc, #172]	; (8002734 <MX_GPIO_Init+0x2cc>)
 8002688:	f7fe f8ec 	bl	8000864 <HAL_GPIO_Init>

  /*Configure GPIO pins : con4_5_Pin con4_6_Pin */
  GPIO_InitStruct.Pin = con4_5_Pin|con4_6_Pin;
 800268c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002690:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002692:	4b29      	ldr	r3, [pc, #164]	; (8002738 <MX_GPIO_Init+0x2d0>)
 8002694:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002696:	2300      	movs	r3, #0
 8002698:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800269a:	f107 031c 	add.w	r3, r7, #28
 800269e:	4619      	mov	r1, r3
 80026a0:	4824      	ldr	r0, [pc, #144]	; (8002734 <MX_GPIO_Init+0x2cc>)
 80026a2:	f7fe f8df 	bl	8000864 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80026a6:	2200      	movs	r2, #0
 80026a8:	2100      	movs	r1, #0
 80026aa:	2006      	movs	r0, #6
 80026ac:	f7fe f881 	bl	80007b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80026b0:	2006      	movs	r0, #6
 80026b2:	f7fe f89a 	bl	80007ea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80026b6:	2200      	movs	r2, #0
 80026b8:	2100      	movs	r1, #0
 80026ba:	2007      	movs	r0, #7
 80026bc:	f7fe f879 	bl	80007b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80026c0:	2007      	movs	r0, #7
 80026c2:	f7fe f892 	bl	80007ea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80026c6:	2200      	movs	r2, #0
 80026c8:	2100      	movs	r1, #0
 80026ca:	2008      	movs	r0, #8
 80026cc:	f7fe f871 	bl	80007b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80026d0:	2008      	movs	r0, #8
 80026d2:	f7fe f88a 	bl	80007ea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80026d6:	2200      	movs	r2, #0
 80026d8:	2100      	movs	r1, #0
 80026da:	2009      	movs	r0, #9
 80026dc:	f7fe f869 	bl	80007b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80026e0:	2009      	movs	r0, #9
 80026e2:	f7fe f882 	bl	80007ea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80026e6:	2200      	movs	r2, #0
 80026e8:	2100      	movs	r1, #0
 80026ea:	200a      	movs	r0, #10
 80026ec:	f7fe f861 	bl	80007b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80026f0:	200a      	movs	r0, #10
 80026f2:	f7fe f87a 	bl	80007ea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80026f6:	2200      	movs	r2, #0
 80026f8:	2100      	movs	r1, #0
 80026fa:	2017      	movs	r0, #23
 80026fc:	f7fe f859 	bl	80007b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002700:	2017      	movs	r0, #23
 8002702:	f7fe f872 	bl	80007ea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002706:	2200      	movs	r2, #0
 8002708:	2100      	movs	r1, #0
 800270a:	2028      	movs	r0, #40	; 0x28
 800270c:	f7fe f851 	bl	80007b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002710:	2028      	movs	r0, #40	; 0x28
 8002712:	f7fe f86a 	bl	80007ea <HAL_NVIC_EnableIRQ>

}
 8002716:	bf00      	nop
 8002718:	3730      	adds	r7, #48	; 0x30
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	40023800 	.word	0x40023800
 8002724:	40021000 	.word	0x40021000
 8002728:	40021400 	.word	0x40021400
 800272c:	40020000 	.word	0x40020000
 8002730:	40020800 	.word	0x40020800
 8002734:	40020400 	.word	0x40020400
 8002738:	10310000 	.word	0x10310000
 800273c:	40020c00 	.word	0x40020c00

08002740 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	4603      	mov	r3, r0
 8002748:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin)
 800274a:	88fb      	ldrh	r3, [r7, #6]
 800274c:	2b20      	cmp	r3, #32
 800274e:	d02b      	beq.n	80027a8 <HAL_GPIO_EXTI_Callback+0x68>
 8002750:	2b20      	cmp	r3, #32
 8002752:	dc10      	bgt.n	8002776 <HAL_GPIO_EXTI_Callback+0x36>
 8002754:	2b04      	cmp	r3, #4
 8002756:	f000 8099 	beq.w	800288c <HAL_GPIO_EXTI_Callback+0x14c>
 800275a:	2b04      	cmp	r3, #4
 800275c:	dc06      	bgt.n	800276c <HAL_GPIO_EXTI_Callback+0x2c>
 800275e:	2b01      	cmp	r3, #1
 8002760:	f000 80e0 	beq.w	8002924 <HAL_GPIO_EXTI_Callback+0x1e4>
 8002764:	2b02      	cmp	r3, #2
 8002766:	f000 80b7 	beq.w	80028d8 <HAL_GPIO_EXTI_Callback+0x198>
			break;*/

	}


}
 800276a:	e1e2      	b.n	8002b32 <HAL_GPIO_EXTI_Callback+0x3f2>
	switch (GPIO_Pin)
 800276c:	2b08      	cmp	r3, #8
 800276e:	d067      	beq.n	8002840 <HAL_GPIO_EXTI_Callback+0x100>
 8002770:	2b10      	cmp	r3, #16
 8002772:	d03f      	beq.n	80027f4 <HAL_GPIO_EXTI_Callback+0xb4>
}
 8002774:	e1dd      	b.n	8002b32 <HAL_GPIO_EXTI_Callback+0x3f2>
	switch (GPIO_Pin)
 8002776:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800277a:	f000 8120 	beq.w	80029be <HAL_GPIO_EXTI_Callback+0x27e>
 800277e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002782:	dc08      	bgt.n	8002796 <HAL_GPIO_EXTI_Callback+0x56>
 8002784:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002788:	f000 8198 	beq.w	8002abc <HAL_GPIO_EXTI_Callback+0x37c>
 800278c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002790:	f000 80ee 	beq.w	8002970 <HAL_GPIO_EXTI_Callback+0x230>
}
 8002794:	e1cd      	b.n	8002b32 <HAL_GPIO_EXTI_Callback+0x3f2>
	switch (GPIO_Pin)
 8002796:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800279a:	f000 8137 	beq.w	8002a0c <HAL_GPIO_EXTI_Callback+0x2cc>
 800279e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027a2:	f000 8165 	beq.w	8002a70 <HAL_GPIO_EXTI_Callback+0x330>
}
 80027a6:	e1c4      	b.n	8002b32 <HAL_GPIO_EXTI_Callback+0x3f2>
			newState[0] = HAL_GPIO_ReadPin(GPIOC, con2_1_Pin);
 80027a8:	2120      	movs	r1, #32
 80027aa:	48ab      	ldr	r0, [pc, #684]	; (8002a58 <HAL_GPIO_EXTI_Callback+0x318>)
 80027ac:	f7fe f9ec 	bl	8000b88 <HAL_GPIO_ReadPin>
 80027b0:	4603      	mov	r3, r0
 80027b2:	461a      	mov	r2, r3
 80027b4:	4ba9      	ldr	r3, [pc, #676]	; (8002a5c <HAL_GPIO_EXTI_Callback+0x31c>)
 80027b6:	701a      	strb	r2, [r3, #0]
			if (oldState[0] != newState[0])
 80027b8:	4ba9      	ldr	r3, [pc, #676]	; (8002a60 <HAL_GPIO_EXTI_Callback+0x320>)
 80027ba:	781a      	ldrb	r2, [r3, #0]
 80027bc:	4ba7      	ldr	r3, [pc, #668]	; (8002a5c <HAL_GPIO_EXTI_Callback+0x31c>)
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	f000 81a1 	beq.w	8002b08 <HAL_GPIO_EXTI_Callback+0x3c8>
				oldState[0] = newState[0];
 80027c6:	4ba5      	ldr	r3, [pc, #660]	; (8002a5c <HAL_GPIO_EXTI_Callback+0x31c>)
 80027c8:	781a      	ldrb	r2, [r3, #0]
 80027ca:	4ba5      	ldr	r3, [pc, #660]	; (8002a60 <HAL_GPIO_EXTI_Callback+0x320>)
 80027cc:	701a      	strb	r2, [r3, #0]
				info_out.board_add  =  con2_1_Pin_HWAdd;
 80027ce:	4ba5      	ldr	r3, [pc, #660]	; (8002a64 <HAL_GPIO_EXTI_Callback+0x324>)
 80027d0:	2214      	movs	r2, #20
 80027d2:	705a      	strb	r2, [r3, #1]
				info_out.state  = (newState[0]) ? LOW : HIGH;
 80027d4:	4ba1      	ldr	r3, [pc, #644]	; (8002a5c <HAL_GPIO_EXTI_Callback+0x31c>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d001      	beq.n	80027e0 <HAL_GPIO_EXTI_Callback+0xa0>
 80027dc:	2201      	movs	r2, #1
 80027de:	e000      	b.n	80027e2 <HAL_GPIO_EXTI_Callback+0xa2>
 80027e0:	2202      	movs	r2, #2
 80027e2:	4ba0      	ldr	r3, [pc, #640]	; (8002a64 <HAL_GPIO_EXTI_Callback+0x324>)
 80027e4:	709a      	strb	r2, [r3, #2]
				HAL_UART_Transmit(&huart8,&info_out,sizeof(info_out),10);
 80027e6:	230a      	movs	r3, #10
 80027e8:	2203      	movs	r2, #3
 80027ea:	499e      	ldr	r1, [pc, #632]	; (8002a64 <HAL_GPIO_EXTI_Callback+0x324>)
 80027ec:	489e      	ldr	r0, [pc, #632]	; (8002a68 <HAL_GPIO_EXTI_Callback+0x328>)
 80027ee:	f7fe fe86 	bl	80014fe <HAL_UART_Transmit>
			break;
 80027f2:	e189      	b.n	8002b08 <HAL_GPIO_EXTI_Callback+0x3c8>
			newState[1] = HAL_GPIO_ReadPin(GPIOC, con2_2_Pin);
 80027f4:	2110      	movs	r1, #16
 80027f6:	4898      	ldr	r0, [pc, #608]	; (8002a58 <HAL_GPIO_EXTI_Callback+0x318>)
 80027f8:	f7fe f9c6 	bl	8000b88 <HAL_GPIO_ReadPin>
 80027fc:	4603      	mov	r3, r0
 80027fe:	461a      	mov	r2, r3
 8002800:	4b96      	ldr	r3, [pc, #600]	; (8002a5c <HAL_GPIO_EXTI_Callback+0x31c>)
 8002802:	705a      	strb	r2, [r3, #1]
			if (oldState[1] != newState[1])
 8002804:	4b96      	ldr	r3, [pc, #600]	; (8002a60 <HAL_GPIO_EXTI_Callback+0x320>)
 8002806:	785a      	ldrb	r2, [r3, #1]
 8002808:	4b94      	ldr	r3, [pc, #592]	; (8002a5c <HAL_GPIO_EXTI_Callback+0x31c>)
 800280a:	785b      	ldrb	r3, [r3, #1]
 800280c:	429a      	cmp	r2, r3
 800280e:	f000 817d 	beq.w	8002b0c <HAL_GPIO_EXTI_Callback+0x3cc>
				oldState[1] = newState[1];
 8002812:	4b92      	ldr	r3, [pc, #584]	; (8002a5c <HAL_GPIO_EXTI_Callback+0x31c>)
 8002814:	785a      	ldrb	r2, [r3, #1]
 8002816:	4b92      	ldr	r3, [pc, #584]	; (8002a60 <HAL_GPIO_EXTI_Callback+0x320>)
 8002818:	705a      	strb	r2, [r3, #1]
				info_out.board_add  =  con2_2_Pin_HWAdd;
 800281a:	4b92      	ldr	r3, [pc, #584]	; (8002a64 <HAL_GPIO_EXTI_Callback+0x324>)
 800281c:	2216      	movs	r2, #22
 800281e:	705a      	strb	r2, [r3, #1]
				info_out.state  = (newState[1]) ? LOW : HIGH;
 8002820:	4b8e      	ldr	r3, [pc, #568]	; (8002a5c <HAL_GPIO_EXTI_Callback+0x31c>)
 8002822:	785b      	ldrb	r3, [r3, #1]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d001      	beq.n	800282c <HAL_GPIO_EXTI_Callback+0xec>
 8002828:	2201      	movs	r2, #1
 800282a:	e000      	b.n	800282e <HAL_GPIO_EXTI_Callback+0xee>
 800282c:	2202      	movs	r2, #2
 800282e:	4b8d      	ldr	r3, [pc, #564]	; (8002a64 <HAL_GPIO_EXTI_Callback+0x324>)
 8002830:	709a      	strb	r2, [r3, #2]
				HAL_UART_Transmit(&huart8,&info_out,sizeof(info_out),10);
 8002832:	230a      	movs	r3, #10
 8002834:	2203      	movs	r2, #3
 8002836:	498b      	ldr	r1, [pc, #556]	; (8002a64 <HAL_GPIO_EXTI_Callback+0x324>)
 8002838:	488b      	ldr	r0, [pc, #556]	; (8002a68 <HAL_GPIO_EXTI_Callback+0x328>)
 800283a:	f7fe fe60 	bl	80014fe <HAL_UART_Transmit>
			break;
 800283e:	e165      	b.n	8002b0c <HAL_GPIO_EXTI_Callback+0x3cc>
			newState[2] = HAL_GPIO_ReadPin(GPIOC, con2_3_Pin);
 8002840:	2108      	movs	r1, #8
 8002842:	4885      	ldr	r0, [pc, #532]	; (8002a58 <HAL_GPIO_EXTI_Callback+0x318>)
 8002844:	f7fe f9a0 	bl	8000b88 <HAL_GPIO_ReadPin>
 8002848:	4603      	mov	r3, r0
 800284a:	461a      	mov	r2, r3
 800284c:	4b83      	ldr	r3, [pc, #524]	; (8002a5c <HAL_GPIO_EXTI_Callback+0x31c>)
 800284e:	709a      	strb	r2, [r3, #2]
			if (oldState[2] != newState[2])
 8002850:	4b83      	ldr	r3, [pc, #524]	; (8002a60 <HAL_GPIO_EXTI_Callback+0x320>)
 8002852:	789a      	ldrb	r2, [r3, #2]
 8002854:	4b81      	ldr	r3, [pc, #516]	; (8002a5c <HAL_GPIO_EXTI_Callback+0x31c>)
 8002856:	789b      	ldrb	r3, [r3, #2]
 8002858:	429a      	cmp	r2, r3
 800285a:	f000 8159 	beq.w	8002b10 <HAL_GPIO_EXTI_Callback+0x3d0>
				oldState[2] = newState[2];
 800285e:	4b7f      	ldr	r3, [pc, #508]	; (8002a5c <HAL_GPIO_EXTI_Callback+0x31c>)
 8002860:	789a      	ldrb	r2, [r3, #2]
 8002862:	4b7f      	ldr	r3, [pc, #508]	; (8002a60 <HAL_GPIO_EXTI_Callback+0x320>)
 8002864:	709a      	strb	r2, [r3, #2]
				info_out.board_add  =  con2_3_Pin_HWAdd;
 8002866:	4b7f      	ldr	r3, [pc, #508]	; (8002a64 <HAL_GPIO_EXTI_Callback+0x324>)
 8002868:	2211      	movs	r2, #17
 800286a:	705a      	strb	r2, [r3, #1]
				info_out.state  = (newState[2]) ? LOW : HIGH;
 800286c:	4b7b      	ldr	r3, [pc, #492]	; (8002a5c <HAL_GPIO_EXTI_Callback+0x31c>)
 800286e:	789b      	ldrb	r3, [r3, #2]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d001      	beq.n	8002878 <HAL_GPIO_EXTI_Callback+0x138>
 8002874:	2201      	movs	r2, #1
 8002876:	e000      	b.n	800287a <HAL_GPIO_EXTI_Callback+0x13a>
 8002878:	2202      	movs	r2, #2
 800287a:	4b7a      	ldr	r3, [pc, #488]	; (8002a64 <HAL_GPIO_EXTI_Callback+0x324>)
 800287c:	709a      	strb	r2, [r3, #2]
				HAL_UART_Transmit(&huart8,&info_out,sizeof(info_out),10);
 800287e:	230a      	movs	r3, #10
 8002880:	2203      	movs	r2, #3
 8002882:	4978      	ldr	r1, [pc, #480]	; (8002a64 <HAL_GPIO_EXTI_Callback+0x324>)
 8002884:	4878      	ldr	r0, [pc, #480]	; (8002a68 <HAL_GPIO_EXTI_Callback+0x328>)
 8002886:	f7fe fe3a 	bl	80014fe <HAL_UART_Transmit>
			break;
 800288a:	e141      	b.n	8002b10 <HAL_GPIO_EXTI_Callback+0x3d0>
			newState[3] = HAL_GPIO_ReadPin(GPIOC, con2_4_Pin);
 800288c:	2104      	movs	r1, #4
 800288e:	4872      	ldr	r0, [pc, #456]	; (8002a58 <HAL_GPIO_EXTI_Callback+0x318>)
 8002890:	f7fe f97a 	bl	8000b88 <HAL_GPIO_ReadPin>
 8002894:	4603      	mov	r3, r0
 8002896:	461a      	mov	r2, r3
 8002898:	4b70      	ldr	r3, [pc, #448]	; (8002a5c <HAL_GPIO_EXTI_Callback+0x31c>)
 800289a:	70da      	strb	r2, [r3, #3]
			if (oldState[3] != newState[3])
 800289c:	4b70      	ldr	r3, [pc, #448]	; (8002a60 <HAL_GPIO_EXTI_Callback+0x320>)
 800289e:	78da      	ldrb	r2, [r3, #3]
 80028a0:	4b6e      	ldr	r3, [pc, #440]	; (8002a5c <HAL_GPIO_EXTI_Callback+0x31c>)
 80028a2:	78db      	ldrb	r3, [r3, #3]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	f000 8135 	beq.w	8002b14 <HAL_GPIO_EXTI_Callback+0x3d4>
				oldState[3] = newState[3];
 80028aa:	4b6c      	ldr	r3, [pc, #432]	; (8002a5c <HAL_GPIO_EXTI_Callback+0x31c>)
 80028ac:	78da      	ldrb	r2, [r3, #3]
 80028ae:	4b6c      	ldr	r3, [pc, #432]	; (8002a60 <HAL_GPIO_EXTI_Callback+0x320>)
 80028b0:	70da      	strb	r2, [r3, #3]
				info_out.board_add  =  con2_4_Pin_HWAdd;
 80028b2:	4b6c      	ldr	r3, [pc, #432]	; (8002a64 <HAL_GPIO_EXTI_Callback+0x324>)
 80028b4:	2218      	movs	r2, #24
 80028b6:	705a      	strb	r2, [r3, #1]
				info_out.state  = (newState[3]) ? LOW : HIGH;
 80028b8:	4b68      	ldr	r3, [pc, #416]	; (8002a5c <HAL_GPIO_EXTI_Callback+0x31c>)
 80028ba:	78db      	ldrb	r3, [r3, #3]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d001      	beq.n	80028c4 <HAL_GPIO_EXTI_Callback+0x184>
 80028c0:	2201      	movs	r2, #1
 80028c2:	e000      	b.n	80028c6 <HAL_GPIO_EXTI_Callback+0x186>
 80028c4:	2202      	movs	r2, #2
 80028c6:	4b67      	ldr	r3, [pc, #412]	; (8002a64 <HAL_GPIO_EXTI_Callback+0x324>)
 80028c8:	709a      	strb	r2, [r3, #2]
				HAL_UART_Transmit(&huart8,&info_out,sizeof(info_out),10);
 80028ca:	230a      	movs	r3, #10
 80028cc:	2203      	movs	r2, #3
 80028ce:	4965      	ldr	r1, [pc, #404]	; (8002a64 <HAL_GPIO_EXTI_Callback+0x324>)
 80028d0:	4865      	ldr	r0, [pc, #404]	; (8002a68 <HAL_GPIO_EXTI_Callback+0x328>)
 80028d2:	f7fe fe14 	bl	80014fe <HAL_UART_Transmit>
			break;
 80028d6:	e11d      	b.n	8002b14 <HAL_GPIO_EXTI_Callback+0x3d4>
			newState[4] = HAL_GPIO_ReadPin(GPIOC, con2_5_Pin);
 80028d8:	2102      	movs	r1, #2
 80028da:	485f      	ldr	r0, [pc, #380]	; (8002a58 <HAL_GPIO_EXTI_Callback+0x318>)
 80028dc:	f7fe f954 	bl	8000b88 <HAL_GPIO_ReadPin>
 80028e0:	4603      	mov	r3, r0
 80028e2:	461a      	mov	r2, r3
 80028e4:	4b5d      	ldr	r3, [pc, #372]	; (8002a5c <HAL_GPIO_EXTI_Callback+0x31c>)
 80028e6:	711a      	strb	r2, [r3, #4]
			if (oldState[4] != newState[4])
 80028e8:	4b5d      	ldr	r3, [pc, #372]	; (8002a60 <HAL_GPIO_EXTI_Callback+0x320>)
 80028ea:	791a      	ldrb	r2, [r3, #4]
 80028ec:	4b5b      	ldr	r3, [pc, #364]	; (8002a5c <HAL_GPIO_EXTI_Callback+0x31c>)
 80028ee:	791b      	ldrb	r3, [r3, #4]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	f000 8111 	beq.w	8002b18 <HAL_GPIO_EXTI_Callback+0x3d8>
				oldState[4] = newState[4];
 80028f6:	4b59      	ldr	r3, [pc, #356]	; (8002a5c <HAL_GPIO_EXTI_Callback+0x31c>)
 80028f8:	791a      	ldrb	r2, [r3, #4]
 80028fa:	4b59      	ldr	r3, [pc, #356]	; (8002a60 <HAL_GPIO_EXTI_Callback+0x320>)
 80028fc:	711a      	strb	r2, [r3, #4]
				info_out.board_add  =  con2_5_Pin_HWAdd;
 80028fe:	4b59      	ldr	r3, [pc, #356]	; (8002a64 <HAL_GPIO_EXTI_Callback+0x324>)
 8002900:	220f      	movs	r2, #15
 8002902:	705a      	strb	r2, [r3, #1]
				info_out.state  = (newState[4]) ? LOW : HIGH;
 8002904:	4b55      	ldr	r3, [pc, #340]	; (8002a5c <HAL_GPIO_EXTI_Callback+0x31c>)
 8002906:	791b      	ldrb	r3, [r3, #4]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d001      	beq.n	8002910 <HAL_GPIO_EXTI_Callback+0x1d0>
 800290c:	2201      	movs	r2, #1
 800290e:	e000      	b.n	8002912 <HAL_GPIO_EXTI_Callback+0x1d2>
 8002910:	2202      	movs	r2, #2
 8002912:	4b54      	ldr	r3, [pc, #336]	; (8002a64 <HAL_GPIO_EXTI_Callback+0x324>)
 8002914:	709a      	strb	r2, [r3, #2]
				HAL_UART_Transmit(&huart8,&info_out,sizeof(info_out),10);
 8002916:	230a      	movs	r3, #10
 8002918:	2203      	movs	r2, #3
 800291a:	4952      	ldr	r1, [pc, #328]	; (8002a64 <HAL_GPIO_EXTI_Callback+0x324>)
 800291c:	4852      	ldr	r0, [pc, #328]	; (8002a68 <HAL_GPIO_EXTI_Callback+0x328>)
 800291e:	f7fe fdee 	bl	80014fe <HAL_UART_Transmit>
			break;
 8002922:	e0f9      	b.n	8002b18 <HAL_GPIO_EXTI_Callback+0x3d8>
			newState[5] = HAL_GPIO_ReadPin(GPIOC, con2_6_Pin);
 8002924:	2101      	movs	r1, #1
 8002926:	484c      	ldr	r0, [pc, #304]	; (8002a58 <HAL_GPIO_EXTI_Callback+0x318>)
 8002928:	f7fe f92e 	bl	8000b88 <HAL_GPIO_ReadPin>
 800292c:	4603      	mov	r3, r0
 800292e:	461a      	mov	r2, r3
 8002930:	4b4a      	ldr	r3, [pc, #296]	; (8002a5c <HAL_GPIO_EXTI_Callback+0x31c>)
 8002932:	715a      	strb	r2, [r3, #5]
			if (oldState[5] != newState[5])
 8002934:	4b4a      	ldr	r3, [pc, #296]	; (8002a60 <HAL_GPIO_EXTI_Callback+0x320>)
 8002936:	795a      	ldrb	r2, [r3, #5]
 8002938:	4b48      	ldr	r3, [pc, #288]	; (8002a5c <HAL_GPIO_EXTI_Callback+0x31c>)
 800293a:	795b      	ldrb	r3, [r3, #5]
 800293c:	429a      	cmp	r2, r3
 800293e:	f000 80ed 	beq.w	8002b1c <HAL_GPIO_EXTI_Callback+0x3dc>
				oldState[5] = newState[5];
 8002942:	4b46      	ldr	r3, [pc, #280]	; (8002a5c <HAL_GPIO_EXTI_Callback+0x31c>)
 8002944:	795a      	ldrb	r2, [r3, #5]
 8002946:	4b46      	ldr	r3, [pc, #280]	; (8002a60 <HAL_GPIO_EXTI_Callback+0x320>)
 8002948:	715a      	strb	r2, [r3, #5]
				info_out.board_add  =  con2_6_Pin_HWAdd;
 800294a:	4b46      	ldr	r3, [pc, #280]	; (8002a64 <HAL_GPIO_EXTI_Callback+0x324>)
 800294c:	2210      	movs	r2, #16
 800294e:	705a      	strb	r2, [r3, #1]
				info_out.state  = (newState[5]) ? LOW : HIGH;
 8002950:	4b42      	ldr	r3, [pc, #264]	; (8002a5c <HAL_GPIO_EXTI_Callback+0x31c>)
 8002952:	795b      	ldrb	r3, [r3, #5]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d001      	beq.n	800295c <HAL_GPIO_EXTI_Callback+0x21c>
 8002958:	2201      	movs	r2, #1
 800295a:	e000      	b.n	800295e <HAL_GPIO_EXTI_Callback+0x21e>
 800295c:	2202      	movs	r2, #2
 800295e:	4b41      	ldr	r3, [pc, #260]	; (8002a64 <HAL_GPIO_EXTI_Callback+0x324>)
 8002960:	709a      	strb	r2, [r3, #2]
				HAL_UART_Transmit(&huart8,&info_out,sizeof(info_out),10);
 8002962:	230a      	movs	r3, #10
 8002964:	2203      	movs	r2, #3
 8002966:	493f      	ldr	r1, [pc, #252]	; (8002a64 <HAL_GPIO_EXTI_Callback+0x324>)
 8002968:	483f      	ldr	r0, [pc, #252]	; (8002a68 <HAL_GPIO_EXTI_Callback+0x328>)
 800296a:	f7fe fdc8 	bl	80014fe <HAL_UART_Transmit>
			break;
 800296e:	e0d5      	b.n	8002b1c <HAL_GPIO_EXTI_Callback+0x3dc>
			newState[6] = HAL_GPIO_ReadPin(GPIOD, con2_7_Pin);
 8002970:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002974:	483d      	ldr	r0, [pc, #244]	; (8002a6c <HAL_GPIO_EXTI_Callback+0x32c>)
 8002976:	f7fe f907 	bl	8000b88 <HAL_GPIO_ReadPin>
 800297a:	4603      	mov	r3, r0
 800297c:	461a      	mov	r2, r3
 800297e:	4b37      	ldr	r3, [pc, #220]	; (8002a5c <HAL_GPIO_EXTI_Callback+0x31c>)
 8002980:	719a      	strb	r2, [r3, #6]
			if (oldState[6] != newState[6])
 8002982:	4b37      	ldr	r3, [pc, #220]	; (8002a60 <HAL_GPIO_EXTI_Callback+0x320>)
 8002984:	799a      	ldrb	r2, [r3, #6]
 8002986:	4b35      	ldr	r3, [pc, #212]	; (8002a5c <HAL_GPIO_EXTI_Callback+0x31c>)
 8002988:	799b      	ldrb	r3, [r3, #6]
 800298a:	429a      	cmp	r2, r3
 800298c:	f000 80c8 	beq.w	8002b20 <HAL_GPIO_EXTI_Callback+0x3e0>
				oldState[6] = newState[6];
 8002990:	4b32      	ldr	r3, [pc, #200]	; (8002a5c <HAL_GPIO_EXTI_Callback+0x31c>)
 8002992:	799a      	ldrb	r2, [r3, #6]
 8002994:	4b32      	ldr	r3, [pc, #200]	; (8002a60 <HAL_GPIO_EXTI_Callback+0x320>)
 8002996:	719a      	strb	r2, [r3, #6]
				info_out.board_add  =  con2_7_Pin_HWAdd;
 8002998:	4b32      	ldr	r3, [pc, #200]	; (8002a64 <HAL_GPIO_EXTI_Callback+0x324>)
 800299a:	221b      	movs	r2, #27
 800299c:	705a      	strb	r2, [r3, #1]
				info_out.state  = (newState[6]) ? LOW : HIGH;
 800299e:	4b2f      	ldr	r3, [pc, #188]	; (8002a5c <HAL_GPIO_EXTI_Callback+0x31c>)
 80029a0:	799b      	ldrb	r3, [r3, #6]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d001      	beq.n	80029aa <HAL_GPIO_EXTI_Callback+0x26a>
 80029a6:	2201      	movs	r2, #1
 80029a8:	e000      	b.n	80029ac <HAL_GPIO_EXTI_Callback+0x26c>
 80029aa:	2202      	movs	r2, #2
 80029ac:	4b2d      	ldr	r3, [pc, #180]	; (8002a64 <HAL_GPIO_EXTI_Callback+0x324>)
 80029ae:	709a      	strb	r2, [r3, #2]
				HAL_UART_Transmit(&huart8,&info_out,sizeof(info_out),10);
 80029b0:	230a      	movs	r3, #10
 80029b2:	2203      	movs	r2, #3
 80029b4:	492b      	ldr	r1, [pc, #172]	; (8002a64 <HAL_GPIO_EXTI_Callback+0x324>)
 80029b6:	482c      	ldr	r0, [pc, #176]	; (8002a68 <HAL_GPIO_EXTI_Callback+0x328>)
 80029b8:	f7fe fda1 	bl	80014fe <HAL_UART_Transmit>
			break;
 80029bc:	e0b0      	b.n	8002b20 <HAL_GPIO_EXTI_Callback+0x3e0>
			newState[7] = HAL_GPIO_ReadPin(GPIOD, con2_8_Pin);
 80029be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80029c2:	482a      	ldr	r0, [pc, #168]	; (8002a6c <HAL_GPIO_EXTI_Callback+0x32c>)
 80029c4:	f7fe f8e0 	bl	8000b88 <HAL_GPIO_ReadPin>
 80029c8:	4603      	mov	r3, r0
 80029ca:	461a      	mov	r2, r3
 80029cc:	4b23      	ldr	r3, [pc, #140]	; (8002a5c <HAL_GPIO_EXTI_Callback+0x31c>)
 80029ce:	71da      	strb	r2, [r3, #7]
			if (oldState[7] != newState[7])
 80029d0:	4b23      	ldr	r3, [pc, #140]	; (8002a60 <HAL_GPIO_EXTI_Callback+0x320>)
 80029d2:	79da      	ldrb	r2, [r3, #7]
 80029d4:	4b21      	ldr	r3, [pc, #132]	; (8002a5c <HAL_GPIO_EXTI_Callback+0x31c>)
 80029d6:	79db      	ldrb	r3, [r3, #7]
 80029d8:	429a      	cmp	r2, r3
 80029da:	f000 80a3 	beq.w	8002b24 <HAL_GPIO_EXTI_Callback+0x3e4>
				oldState[7] = newState[7];
 80029de:	4b1f      	ldr	r3, [pc, #124]	; (8002a5c <HAL_GPIO_EXTI_Callback+0x31c>)
 80029e0:	79da      	ldrb	r2, [r3, #7]
 80029e2:	4b1f      	ldr	r3, [pc, #124]	; (8002a60 <HAL_GPIO_EXTI_Callback+0x320>)
 80029e4:	71da      	strb	r2, [r3, #7]
				info_out.board_add  =  con2_8_Pin_HWAdd;
 80029e6:	4b1f      	ldr	r3, [pc, #124]	; (8002a64 <HAL_GPIO_EXTI_Callback+0x324>)
 80029e8:	2212      	movs	r2, #18
 80029ea:	705a      	strb	r2, [r3, #1]
				info_out.state  = (newState[7]) ? LOW : HIGH;
 80029ec:	4b1b      	ldr	r3, [pc, #108]	; (8002a5c <HAL_GPIO_EXTI_Callback+0x31c>)
 80029ee:	79db      	ldrb	r3, [r3, #7]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d001      	beq.n	80029f8 <HAL_GPIO_EXTI_Callback+0x2b8>
 80029f4:	2201      	movs	r2, #1
 80029f6:	e000      	b.n	80029fa <HAL_GPIO_EXTI_Callback+0x2ba>
 80029f8:	2202      	movs	r2, #2
 80029fa:	4b1a      	ldr	r3, [pc, #104]	; (8002a64 <HAL_GPIO_EXTI_Callback+0x324>)
 80029fc:	709a      	strb	r2, [r3, #2]
				HAL_UART_Transmit(&huart8,&info_out,sizeof(info_out),10);
 80029fe:	230a      	movs	r3, #10
 8002a00:	2203      	movs	r2, #3
 8002a02:	4918      	ldr	r1, [pc, #96]	; (8002a64 <HAL_GPIO_EXTI_Callback+0x324>)
 8002a04:	4818      	ldr	r0, [pc, #96]	; (8002a68 <HAL_GPIO_EXTI_Callback+0x328>)
 8002a06:	f7fe fd7a 	bl	80014fe <HAL_UART_Transmit>
			break;
 8002a0a:	e08b      	b.n	8002b24 <HAL_GPIO_EXTI_Callback+0x3e4>
			newState[8] = HAL_GPIO_ReadPin(GPIOD, con2_9_Pin);
 8002a0c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002a10:	4816      	ldr	r0, [pc, #88]	; (8002a6c <HAL_GPIO_EXTI_Callback+0x32c>)
 8002a12:	f7fe f8b9 	bl	8000b88 <HAL_GPIO_ReadPin>
 8002a16:	4603      	mov	r3, r0
 8002a18:	461a      	mov	r2, r3
 8002a1a:	4b10      	ldr	r3, [pc, #64]	; (8002a5c <HAL_GPIO_EXTI_Callback+0x31c>)
 8002a1c:	721a      	strb	r2, [r3, #8]
			if (oldState[8] != newState[8])
 8002a1e:	4b10      	ldr	r3, [pc, #64]	; (8002a60 <HAL_GPIO_EXTI_Callback+0x320>)
 8002a20:	7a1a      	ldrb	r2, [r3, #8]
 8002a22:	4b0e      	ldr	r3, [pc, #56]	; (8002a5c <HAL_GPIO_EXTI_Callback+0x31c>)
 8002a24:	7a1b      	ldrb	r3, [r3, #8]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d07e      	beq.n	8002b28 <HAL_GPIO_EXTI_Callback+0x3e8>
				oldState[8] = newState[8];
 8002a2a:	4b0c      	ldr	r3, [pc, #48]	; (8002a5c <HAL_GPIO_EXTI_Callback+0x31c>)
 8002a2c:	7a1a      	ldrb	r2, [r3, #8]
 8002a2e:	4b0c      	ldr	r3, [pc, #48]	; (8002a60 <HAL_GPIO_EXTI_Callback+0x320>)
 8002a30:	721a      	strb	r2, [r3, #8]
				info_out.board_add  =  con2_9_Pin_HWAdd;
 8002a32:	4b0c      	ldr	r3, [pc, #48]	; (8002a64 <HAL_GPIO_EXTI_Callback+0x324>)
 8002a34:	221d      	movs	r2, #29
 8002a36:	705a      	strb	r2, [r3, #1]
				info_out.state  = (newState[8]) ? LOW : HIGH;
 8002a38:	4b08      	ldr	r3, [pc, #32]	; (8002a5c <HAL_GPIO_EXTI_Callback+0x31c>)
 8002a3a:	7a1b      	ldrb	r3, [r3, #8]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d001      	beq.n	8002a44 <HAL_GPIO_EXTI_Callback+0x304>
 8002a40:	2201      	movs	r2, #1
 8002a42:	e000      	b.n	8002a46 <HAL_GPIO_EXTI_Callback+0x306>
 8002a44:	2202      	movs	r2, #2
 8002a46:	4b07      	ldr	r3, [pc, #28]	; (8002a64 <HAL_GPIO_EXTI_Callback+0x324>)
 8002a48:	709a      	strb	r2, [r3, #2]
				HAL_UART_Transmit(&huart8,&info_out,sizeof(info_out),10);
 8002a4a:	230a      	movs	r3, #10
 8002a4c:	2203      	movs	r2, #3
 8002a4e:	4905      	ldr	r1, [pc, #20]	; (8002a64 <HAL_GPIO_EXTI_Callback+0x324>)
 8002a50:	4805      	ldr	r0, [pc, #20]	; (8002a68 <HAL_GPIO_EXTI_Callback+0x328>)
 8002a52:	f7fe fd54 	bl	80014fe <HAL_UART_Transmit>
			break;
 8002a56:	e067      	b.n	8002b28 <HAL_GPIO_EXTI_Callback+0x3e8>
 8002a58:	40020800 	.word	0x40020800
 8002a5c:	2000002c 	.word	0x2000002c
 8002a60:	2000003c 	.word	0x2000003c
 8002a64:	200000d8 	.word	0x200000d8
 8002a68:	20000098 	.word	0x20000098
 8002a6c:	40020c00 	.word	0x40020c00
			newState[9] = HAL_GPIO_ReadPin(GPIOD, con2_10_Pin);
 8002a70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a74:	4831      	ldr	r0, [pc, #196]	; (8002b3c <HAL_GPIO_EXTI_Callback+0x3fc>)
 8002a76:	f7fe f887 	bl	8000b88 <HAL_GPIO_ReadPin>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	4b30      	ldr	r3, [pc, #192]	; (8002b40 <HAL_GPIO_EXTI_Callback+0x400>)
 8002a80:	725a      	strb	r2, [r3, #9]
			if (oldState[9] != newState[9])
 8002a82:	4b30      	ldr	r3, [pc, #192]	; (8002b44 <HAL_GPIO_EXTI_Callback+0x404>)
 8002a84:	7a5a      	ldrb	r2, [r3, #9]
 8002a86:	4b2e      	ldr	r3, [pc, #184]	; (8002b40 <HAL_GPIO_EXTI_Callback+0x400>)
 8002a88:	7a5b      	ldrb	r3, [r3, #9]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d04e      	beq.n	8002b2c <HAL_GPIO_EXTI_Callback+0x3ec>
				oldState[9] = newState[9];
 8002a8e:	4b2c      	ldr	r3, [pc, #176]	; (8002b40 <HAL_GPIO_EXTI_Callback+0x400>)
 8002a90:	7a5a      	ldrb	r2, [r3, #9]
 8002a92:	4b2c      	ldr	r3, [pc, #176]	; (8002b44 <HAL_GPIO_EXTI_Callback+0x404>)
 8002a94:	725a      	strb	r2, [r3, #9]
				info_out.board_add  =  con2_10_Pin_HWAdd;
 8002a96:	4b2c      	ldr	r3, [pc, #176]	; (8002b48 <HAL_GPIO_EXTI_Callback+0x408>)
 8002a98:	2213      	movs	r2, #19
 8002a9a:	705a      	strb	r2, [r3, #1]
				info_out.state  = (newState[9]) ? LOW : HIGH;
 8002a9c:	4b28      	ldr	r3, [pc, #160]	; (8002b40 <HAL_GPIO_EXTI_Callback+0x400>)
 8002a9e:	7a5b      	ldrb	r3, [r3, #9]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d001      	beq.n	8002aa8 <HAL_GPIO_EXTI_Callback+0x368>
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	e000      	b.n	8002aaa <HAL_GPIO_EXTI_Callback+0x36a>
 8002aa8:	2202      	movs	r2, #2
 8002aaa:	4b27      	ldr	r3, [pc, #156]	; (8002b48 <HAL_GPIO_EXTI_Callback+0x408>)
 8002aac:	709a      	strb	r2, [r3, #2]
				HAL_UART_Transmit(&huart8,&info_out,sizeof(info_out),10);
 8002aae:	230a      	movs	r3, #10
 8002ab0:	2203      	movs	r2, #3
 8002ab2:	4925      	ldr	r1, [pc, #148]	; (8002b48 <HAL_GPIO_EXTI_Callback+0x408>)
 8002ab4:	4825      	ldr	r0, [pc, #148]	; (8002b4c <HAL_GPIO_EXTI_Callback+0x40c>)
 8002ab6:	f7fe fd22 	bl	80014fe <HAL_UART_Transmit>
			break;
 8002aba:	e037      	b.n	8002b2c <HAL_GPIO_EXTI_Callback+0x3ec>
		newState[10] = HAL_GPIO_ReadPin(GPIOF, con3_1_Pin);
 8002abc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002ac0:	4823      	ldr	r0, [pc, #140]	; (8002b50 <HAL_GPIO_EXTI_Callback+0x410>)
 8002ac2:	f7fe f861 	bl	8000b88 <HAL_GPIO_ReadPin>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	461a      	mov	r2, r3
 8002aca:	4b1d      	ldr	r3, [pc, #116]	; (8002b40 <HAL_GPIO_EXTI_Callback+0x400>)
 8002acc:	729a      	strb	r2, [r3, #10]
		if (oldState[10] != newState[10])
 8002ace:	4b1d      	ldr	r3, [pc, #116]	; (8002b44 <HAL_GPIO_EXTI_Callback+0x404>)
 8002ad0:	7a9a      	ldrb	r2, [r3, #10]
 8002ad2:	4b1b      	ldr	r3, [pc, #108]	; (8002b40 <HAL_GPIO_EXTI_Callback+0x400>)
 8002ad4:	7a9b      	ldrb	r3, [r3, #10]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d02a      	beq.n	8002b30 <HAL_GPIO_EXTI_Callback+0x3f0>
			oldState[10] = newState[10];
 8002ada:	4b19      	ldr	r3, [pc, #100]	; (8002b40 <HAL_GPIO_EXTI_Callback+0x400>)
 8002adc:	7a9a      	ldrb	r2, [r3, #10]
 8002ade:	4b19      	ldr	r3, [pc, #100]	; (8002b44 <HAL_GPIO_EXTI_Callback+0x404>)
 8002ae0:	729a      	strb	r2, [r3, #10]
			info_out.board_add  =  con3_1_Pin_HWAdd;
 8002ae2:	4b19      	ldr	r3, [pc, #100]	; (8002b48 <HAL_GPIO_EXTI_Callback+0x408>)
 8002ae4:	221f      	movs	r2, #31
 8002ae6:	705a      	strb	r2, [r3, #1]
			info_out.state  = (newState[10]) ? LOW : HIGH;
 8002ae8:	4b15      	ldr	r3, [pc, #84]	; (8002b40 <HAL_GPIO_EXTI_Callback+0x400>)
 8002aea:	7a9b      	ldrb	r3, [r3, #10]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d001      	beq.n	8002af4 <HAL_GPIO_EXTI_Callback+0x3b4>
 8002af0:	2201      	movs	r2, #1
 8002af2:	e000      	b.n	8002af6 <HAL_GPIO_EXTI_Callback+0x3b6>
 8002af4:	2202      	movs	r2, #2
 8002af6:	4b14      	ldr	r3, [pc, #80]	; (8002b48 <HAL_GPIO_EXTI_Callback+0x408>)
 8002af8:	709a      	strb	r2, [r3, #2]
			HAL_UART_Transmit(&huart8,&info_out,sizeof(info_out),10);
 8002afa:	230a      	movs	r3, #10
 8002afc:	2203      	movs	r2, #3
 8002afe:	4912      	ldr	r1, [pc, #72]	; (8002b48 <HAL_GPIO_EXTI_Callback+0x408>)
 8002b00:	4812      	ldr	r0, [pc, #72]	; (8002b4c <HAL_GPIO_EXTI_Callback+0x40c>)
 8002b02:	f7fe fcfc 	bl	80014fe <HAL_UART_Transmit>
		break;
 8002b06:	e013      	b.n	8002b30 <HAL_GPIO_EXTI_Callback+0x3f0>
			break;
 8002b08:	bf00      	nop
 8002b0a:	e012      	b.n	8002b32 <HAL_GPIO_EXTI_Callback+0x3f2>
			break;
 8002b0c:	bf00      	nop
 8002b0e:	e010      	b.n	8002b32 <HAL_GPIO_EXTI_Callback+0x3f2>
			break;
 8002b10:	bf00      	nop
 8002b12:	e00e      	b.n	8002b32 <HAL_GPIO_EXTI_Callback+0x3f2>
			break;
 8002b14:	bf00      	nop
 8002b16:	e00c      	b.n	8002b32 <HAL_GPIO_EXTI_Callback+0x3f2>
			break;
 8002b18:	bf00      	nop
 8002b1a:	e00a      	b.n	8002b32 <HAL_GPIO_EXTI_Callback+0x3f2>
			break;
 8002b1c:	bf00      	nop
 8002b1e:	e008      	b.n	8002b32 <HAL_GPIO_EXTI_Callback+0x3f2>
			break;
 8002b20:	bf00      	nop
 8002b22:	e006      	b.n	8002b32 <HAL_GPIO_EXTI_Callback+0x3f2>
			break;
 8002b24:	bf00      	nop
 8002b26:	e004      	b.n	8002b32 <HAL_GPIO_EXTI_Callback+0x3f2>
			break;
 8002b28:	bf00      	nop
 8002b2a:	e002      	b.n	8002b32 <HAL_GPIO_EXTI_Callback+0x3f2>
			break;
 8002b2c:	bf00      	nop
 8002b2e:	e000      	b.n	8002b32 <HAL_GPIO_EXTI_Callback+0x3f2>
		break;
 8002b30:	bf00      	nop
}
 8002b32:	bf00      	nop
 8002b34:	3708      	adds	r7, #8
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	40020c00 	.word	0x40020c00
 8002b40:	2000002c 	.word	0x2000002c
 8002b44:	2000003c 	.word	0x2000003c
 8002b48:	200000d8 	.word	0x200000d8
 8002b4c:	20000098 	.word	0x20000098
 8002b50:	40021400 	.word	0x40021400

08002b54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002b58:	bf00      	nop
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
	...

08002b64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	607b      	str	r3, [r7, #4]
 8002b6e:	4b10      	ldr	r3, [pc, #64]	; (8002bb0 <HAL_MspInit+0x4c>)
 8002b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b72:	4a0f      	ldr	r2, [pc, #60]	; (8002bb0 <HAL_MspInit+0x4c>)
 8002b74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b78:	6453      	str	r3, [r2, #68]	; 0x44
 8002b7a:	4b0d      	ldr	r3, [pc, #52]	; (8002bb0 <HAL_MspInit+0x4c>)
 8002b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b82:	607b      	str	r3, [r7, #4]
 8002b84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b86:	2300      	movs	r3, #0
 8002b88:	603b      	str	r3, [r7, #0]
 8002b8a:	4b09      	ldr	r3, [pc, #36]	; (8002bb0 <HAL_MspInit+0x4c>)
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8e:	4a08      	ldr	r2, [pc, #32]	; (8002bb0 <HAL_MspInit+0x4c>)
 8002b90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b94:	6413      	str	r3, [r2, #64]	; 0x40
 8002b96:	4b06      	ldr	r3, [pc, #24]	; (8002bb0 <HAL_MspInit+0x4c>)
 8002b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b9e:	603b      	str	r3, [r7, #0]
 8002ba0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ba2:	bf00      	nop
 8002ba4:	370c      	adds	r7, #12
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	40023800 	.word	0x40023800

08002bb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b08c      	sub	sp, #48	; 0x30
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bbc:	f107 031c 	add.w	r3, r7, #28
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	601a      	str	r2, [r3, #0]
 8002bc4:	605a      	str	r2, [r3, #4]
 8002bc6:	609a      	str	r2, [r3, #8]
 8002bc8:	60da      	str	r2, [r3, #12]
 8002bca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a3b      	ldr	r2, [pc, #236]	; (8002cc0 <HAL_UART_MspInit+0x10c>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d135      	bne.n	8002c42 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	61bb      	str	r3, [r7, #24]
 8002bda:	4b3a      	ldr	r3, [pc, #232]	; (8002cc4 <HAL_UART_MspInit+0x110>)
 8002bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bde:	4a39      	ldr	r2, [pc, #228]	; (8002cc4 <HAL_UART_MspInit+0x110>)
 8002be0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002be4:	6413      	str	r3, [r2, #64]	; 0x40
 8002be6:	4b37      	ldr	r3, [pc, #220]	; (8002cc4 <HAL_UART_MspInit+0x110>)
 8002be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002bee:	61bb      	str	r3, [r7, #24]
 8002bf0:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	617b      	str	r3, [r7, #20]
 8002bf6:	4b33      	ldr	r3, [pc, #204]	; (8002cc4 <HAL_UART_MspInit+0x110>)
 8002bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfa:	4a32      	ldr	r2, [pc, #200]	; (8002cc4 <HAL_UART_MspInit+0x110>)
 8002bfc:	f043 0320 	orr.w	r3, r3, #32
 8002c00:	6313      	str	r3, [r2, #48]	; 0x30
 8002c02:	4b30      	ldr	r3, [pc, #192]	; (8002cc4 <HAL_UART_MspInit+0x110>)
 8002c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c06:	f003 0320 	and.w	r3, r3, #32
 8002c0a:	617b      	str	r3, [r7, #20]
 8002c0c:	697b      	ldr	r3, [r7, #20]
    /**UART8 GPIO Configuration    
    PF8     ------> UART8_RX
    PF9     ------> UART8_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002c0e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002c12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c14:	2302      	movs	r3, #2
 8002c16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8002c20:	2308      	movs	r3, #8
 8002c22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002c24:	f107 031c 	add.w	r3, r7, #28
 8002c28:	4619      	mov	r1, r3
 8002c2a:	4827      	ldr	r0, [pc, #156]	; (8002cc8 <HAL_UART_MspInit+0x114>)
 8002c2c:	f7fd fe1a 	bl	8000864 <HAL_GPIO_Init>

    /* UART8 interrupt Init */
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 8002c30:	2200      	movs	r2, #0
 8002c32:	2100      	movs	r1, #0
 8002c34:	2053      	movs	r0, #83	; 0x53
 8002c36:	f7fd fdbc 	bl	80007b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8002c3a:	2053      	movs	r0, #83	; 0x53
 8002c3c:	f7fd fdd5 	bl	80007ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002c40:	e039      	b.n	8002cb6 <HAL_UART_MspInit+0x102>
  else if(huart->Instance==USART3)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a21      	ldr	r2, [pc, #132]	; (8002ccc <HAL_UART_MspInit+0x118>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d134      	bne.n	8002cb6 <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	613b      	str	r3, [r7, #16]
 8002c50:	4b1c      	ldr	r3, [pc, #112]	; (8002cc4 <HAL_UART_MspInit+0x110>)
 8002c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c54:	4a1b      	ldr	r2, [pc, #108]	; (8002cc4 <HAL_UART_MspInit+0x110>)
 8002c56:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c5a:	6413      	str	r3, [r2, #64]	; 0x40
 8002c5c:	4b19      	ldr	r3, [pc, #100]	; (8002cc4 <HAL_UART_MspInit+0x110>)
 8002c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c64:	613b      	str	r3, [r7, #16]
 8002c66:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c68:	2300      	movs	r3, #0
 8002c6a:	60fb      	str	r3, [r7, #12]
 8002c6c:	4b15      	ldr	r3, [pc, #84]	; (8002cc4 <HAL_UART_MspInit+0x110>)
 8002c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c70:	4a14      	ldr	r2, [pc, #80]	; (8002cc4 <HAL_UART_MspInit+0x110>)
 8002c72:	f043 0308 	orr.w	r3, r3, #8
 8002c76:	6313      	str	r3, [r2, #48]	; 0x30
 8002c78:	4b12      	ldr	r3, [pc, #72]	; (8002cc4 <HAL_UART_MspInit+0x110>)
 8002c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7c:	f003 0308 	and.w	r3, r3, #8
 8002c80:	60fb      	str	r3, [r7, #12]
 8002c82:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = uart_tx_Pin|uat_rx_Pin;
 8002c84:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002c88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c8a:	2302      	movs	r3, #2
 8002c8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c92:	2303      	movs	r3, #3
 8002c94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002c96:	2307      	movs	r3, #7
 8002c98:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c9a:	f107 031c 	add.w	r3, r7, #28
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	480b      	ldr	r0, [pc, #44]	; (8002cd0 <HAL_UART_MspInit+0x11c>)
 8002ca2:	f7fd fddf 	bl	8000864 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	2100      	movs	r1, #0
 8002caa:	2027      	movs	r0, #39	; 0x27
 8002cac:	f7fd fd81 	bl	80007b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002cb0:	2027      	movs	r0, #39	; 0x27
 8002cb2:	f7fd fd9a 	bl	80007ea <HAL_NVIC_EnableIRQ>
}
 8002cb6:	bf00      	nop
 8002cb8:	3730      	adds	r7, #48	; 0x30
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	40007c00 	.word	0x40007c00
 8002cc4:	40023800 	.word	0x40023800
 8002cc8:	40021400 	.word	0x40021400
 8002ccc:	40004800 	.word	0x40004800
 8002cd0:	40020c00 	.word	0x40020c00

08002cd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002cd8:	bf00      	nop
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr

08002ce2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ce6:	e7fe      	b.n	8002ce6 <HardFault_Handler+0x4>

08002ce8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002cec:	e7fe      	b.n	8002cec <MemManage_Handler+0x4>

08002cee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cee:	b480      	push	{r7}
 8002cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cf2:	e7fe      	b.n	8002cf2 <BusFault_Handler+0x4>

08002cf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cf8:	e7fe      	b.n	8002cf8 <UsageFault_Handler+0x4>

08002cfa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002cfa:	b480      	push	{r7}
 8002cfc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002cfe:	bf00      	nop
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d0c:	bf00      	nop
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr

08002d16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d16:	b480      	push	{r7}
 8002d18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d1a:	bf00      	nop
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d28:	f7fd fc48 	bl	80005bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d2c:	bf00      	nop
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002d34:	2001      	movs	r0, #1
 8002d36:	f7fd ff73 	bl	8000c20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002d3a:	bf00      	nop
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002d3e:	b580      	push	{r7, lr}
 8002d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002d42:	2002      	movs	r0, #2
 8002d44:	f7fd ff6c 	bl	8000c20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002d48:	bf00      	nop
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002d50:	2004      	movs	r0, #4
 8002d52:	f7fd ff65 	bl	8000c20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002d56:	bf00      	nop
 8002d58:	bd80      	pop	{r7, pc}

08002d5a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8002d5e:	2008      	movs	r0, #8
 8002d60:	f7fd ff5e 	bl	8000c20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002d64:	bf00      	nop
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002d6c:	2010      	movs	r0, #16
 8002d6e:	f7fd ff57 	bl	8000c20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002d72:	bf00      	nop
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002d76:	b580      	push	{r7, lr}
 8002d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002d7a:	2020      	movs	r0, #32
 8002d7c:	f7fd ff50 	bl	8000c20 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002d80:	2040      	movs	r0, #64	; 0x40
 8002d82:	f7fd ff4d 	bl	8000c20 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002d86:	2080      	movs	r0, #128	; 0x80
 8002d88:	f7fd ff4a 	bl	8000c20 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002d8c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002d90:	f7fd ff46 	bl	8000c20 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8002d94:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002d98:	f7fd ff42 	bl	8000c20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002d9c:	bf00      	nop
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002da4:	4802      	ldr	r0, [pc, #8]	; (8002db0 <USART3_IRQHandler+0x10>)
 8002da6:	f7fe fc99 	bl	80016dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002daa:	bf00      	nop
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	20000054 	.word	0x20000054

08002db4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002db8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002dbc:	f7fd ff30 	bl	8000c20 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002dc0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002dc4:	f7fd ff2c 	bl	8000c20 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002dc8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002dcc:	f7fd ff28 	bl	8000c20 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8002dd0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002dd4:	f7fd ff24 	bl	8000c20 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8002dd8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002ddc:	f7fd ff20 	bl	8000c20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002de0:	bf00      	nop
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8002de8:	4802      	ldr	r0, [pc, #8]	; (8002df4 <UART8_IRQHandler+0x10>)
 8002dea:	f7fe fc77 	bl	80016dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8002dee:	bf00      	nop
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	20000098 	.word	0x20000098

08002df8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002dfc:	4b16      	ldr	r3, [pc, #88]	; (8002e58 <SystemInit+0x60>)
 8002dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e02:	4a15      	ldr	r2, [pc, #84]	; (8002e58 <SystemInit+0x60>)
 8002e04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002e0c:	4b13      	ldr	r3, [pc, #76]	; (8002e5c <SystemInit+0x64>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a12      	ldr	r2, [pc, #72]	; (8002e5c <SystemInit+0x64>)
 8002e12:	f043 0301 	orr.w	r3, r3, #1
 8002e16:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002e18:	4b10      	ldr	r3, [pc, #64]	; (8002e5c <SystemInit+0x64>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002e1e:	4b0f      	ldr	r3, [pc, #60]	; (8002e5c <SystemInit+0x64>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a0e      	ldr	r2, [pc, #56]	; (8002e5c <SystemInit+0x64>)
 8002e24:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002e28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e2c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002e2e:	4b0b      	ldr	r3, [pc, #44]	; (8002e5c <SystemInit+0x64>)
 8002e30:	4a0b      	ldr	r2, [pc, #44]	; (8002e60 <SystemInit+0x68>)
 8002e32:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002e34:	4b09      	ldr	r3, [pc, #36]	; (8002e5c <SystemInit+0x64>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a08      	ldr	r2, [pc, #32]	; (8002e5c <SystemInit+0x64>)
 8002e3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e3e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002e40:	4b06      	ldr	r3, [pc, #24]	; (8002e5c <SystemInit+0x64>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002e46:	4b04      	ldr	r3, [pc, #16]	; (8002e58 <SystemInit+0x60>)
 8002e48:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e4c:	609a      	str	r2, [r3, #8]
#endif
}
 8002e4e:	bf00      	nop
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr
 8002e58:	e000ed00 	.word	0xe000ed00
 8002e5c:	40023800 	.word	0x40023800
 8002e60:	24003010 	.word	0x24003010

08002e64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8002e64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e9c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8002e68:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002e6a:	e003      	b.n	8002e74 <LoopCopyDataInit>

08002e6c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002e6c:	4b0c      	ldr	r3, [pc, #48]	; (8002ea0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002e6e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002e70:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002e72:	3104      	adds	r1, #4

08002e74 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002e74:	480b      	ldr	r0, [pc, #44]	; (8002ea4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002e76:	4b0c      	ldr	r3, [pc, #48]	; (8002ea8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002e78:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002e7a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002e7c:	d3f6      	bcc.n	8002e6c <CopyDataInit>
  ldr  r2, =_sbss
 8002e7e:	4a0b      	ldr	r2, [pc, #44]	; (8002eac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002e80:	e002      	b.n	8002e88 <LoopFillZerobss>

08002e82 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8002e82:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002e84:	f842 3b04 	str.w	r3, [r2], #4

08002e88 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002e88:	4b09      	ldr	r3, [pc, #36]	; (8002eb0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002e8a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002e8c:	d3f9      	bcc.n	8002e82 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002e8e:	f7ff ffb3 	bl	8002df8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e92:	f000 f811 	bl	8002eb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e96:	f7ff f8b1 	bl	8001ffc <main>
  bx  lr    
 8002e9a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002e9c:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8002ea0:	08002f50 	.word	0x08002f50
  ldr  r0, =_sdata
 8002ea4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002ea8:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8002eac:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8002eb0:	200000dc 	.word	0x200000dc

08002eb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002eb4:	e7fe      	b.n	8002eb4 <ADC_IRQHandler>
	...

08002eb8 <__libc_init_array>:
 8002eb8:	b570      	push	{r4, r5, r6, lr}
 8002eba:	4e0d      	ldr	r6, [pc, #52]	; (8002ef0 <__libc_init_array+0x38>)
 8002ebc:	4c0d      	ldr	r4, [pc, #52]	; (8002ef4 <__libc_init_array+0x3c>)
 8002ebe:	1ba4      	subs	r4, r4, r6
 8002ec0:	10a4      	asrs	r4, r4, #2
 8002ec2:	2500      	movs	r5, #0
 8002ec4:	42a5      	cmp	r5, r4
 8002ec6:	d109      	bne.n	8002edc <__libc_init_array+0x24>
 8002ec8:	4e0b      	ldr	r6, [pc, #44]	; (8002ef8 <__libc_init_array+0x40>)
 8002eca:	4c0c      	ldr	r4, [pc, #48]	; (8002efc <__libc_init_array+0x44>)
 8002ecc:	f000 f820 	bl	8002f10 <_init>
 8002ed0:	1ba4      	subs	r4, r4, r6
 8002ed2:	10a4      	asrs	r4, r4, #2
 8002ed4:	2500      	movs	r5, #0
 8002ed6:	42a5      	cmp	r5, r4
 8002ed8:	d105      	bne.n	8002ee6 <__libc_init_array+0x2e>
 8002eda:	bd70      	pop	{r4, r5, r6, pc}
 8002edc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ee0:	4798      	blx	r3
 8002ee2:	3501      	adds	r5, #1
 8002ee4:	e7ee      	b.n	8002ec4 <__libc_init_array+0xc>
 8002ee6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002eea:	4798      	blx	r3
 8002eec:	3501      	adds	r5, #1
 8002eee:	e7f2      	b.n	8002ed6 <__libc_init_array+0x1e>
 8002ef0:	08002f48 	.word	0x08002f48
 8002ef4:	08002f48 	.word	0x08002f48
 8002ef8:	08002f48 	.word	0x08002f48
 8002efc:	08002f4c 	.word	0x08002f4c

08002f00 <memset>:
 8002f00:	4402      	add	r2, r0
 8002f02:	4603      	mov	r3, r0
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d100      	bne.n	8002f0a <memset+0xa>
 8002f08:	4770      	bx	lr
 8002f0a:	f803 1b01 	strb.w	r1, [r3], #1
 8002f0e:	e7f9      	b.n	8002f04 <memset+0x4>

08002f10 <_init>:
 8002f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f12:	bf00      	nop
 8002f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f16:	bc08      	pop	{r3}
 8002f18:	469e      	mov	lr, r3
 8002f1a:	4770      	bx	lr

08002f1c <_fini>:
 8002f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f1e:	bf00      	nop
 8002f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f22:	bc08      	pop	{r3}
 8002f24:	469e      	mov	lr, r3
 8002f26:	4770      	bx	lr
