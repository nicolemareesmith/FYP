
pot_dials_seg_slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f08  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080050e0  080050e0  000150e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005100  08005100  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005100  08005100  00015100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005108  08005108  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005108  08005108  00015108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800510c  0800510c  0001510c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005110  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  2000000c  0800511c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000208  0800511c  00020208  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000900a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000179f  00000000  00000000  00029046  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007f8  00000000  00000000  0002a7e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000730  00000000  00000000  0002afe0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020d3f  00000000  00000000  0002b710  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000773e  00000000  00000000  0004c44f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c9ed4  00000000  00000000  00053b8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011da61  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000020d4  00000000  00000000  0011dadc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080050c8 	.word	0x080050c8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080050c8 	.word	0x080050c8

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000356:	f1a4 0401 	sub.w	r4, r4, #1
 800035a:	d1e9      	bne.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <__aeabi_uldivmod>:
 80009f4:	b953      	cbnz	r3, 8000a0c <__aeabi_uldivmod+0x18>
 80009f6:	b94a      	cbnz	r2, 8000a0c <__aeabi_uldivmod+0x18>
 80009f8:	2900      	cmp	r1, #0
 80009fa:	bf08      	it	eq
 80009fc:	2800      	cmpeq	r0, #0
 80009fe:	bf1c      	itt	ne
 8000a00:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a04:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a08:	f000 b972 	b.w	8000cf0 <__aeabi_idiv0>
 8000a0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a14:	f000 f806 	bl	8000a24 <__udivmoddi4>
 8000a18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a20:	b004      	add	sp, #16
 8000a22:	4770      	bx	lr

08000a24 <__udivmoddi4>:
 8000a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a28:	9e08      	ldr	r6, [sp, #32]
 8000a2a:	4604      	mov	r4, r0
 8000a2c:	4688      	mov	r8, r1
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d14b      	bne.n	8000aca <__udivmoddi4+0xa6>
 8000a32:	428a      	cmp	r2, r1
 8000a34:	4615      	mov	r5, r2
 8000a36:	d967      	bls.n	8000b08 <__udivmoddi4+0xe4>
 8000a38:	fab2 f282 	clz	r2, r2
 8000a3c:	b14a      	cbz	r2, 8000a52 <__udivmoddi4+0x2e>
 8000a3e:	f1c2 0720 	rsb	r7, r2, #32
 8000a42:	fa01 f302 	lsl.w	r3, r1, r2
 8000a46:	fa20 f707 	lsr.w	r7, r0, r7
 8000a4a:	4095      	lsls	r5, r2
 8000a4c:	ea47 0803 	orr.w	r8, r7, r3
 8000a50:	4094      	lsls	r4, r2
 8000a52:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a56:	0c23      	lsrs	r3, r4, #16
 8000a58:	fbb8 f7fe 	udiv	r7, r8, lr
 8000a5c:	fa1f fc85 	uxth.w	ip, r5
 8000a60:	fb0e 8817 	mls	r8, lr, r7, r8
 8000a64:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a68:	fb07 f10c 	mul.w	r1, r7, ip
 8000a6c:	4299      	cmp	r1, r3
 8000a6e:	d909      	bls.n	8000a84 <__udivmoddi4+0x60>
 8000a70:	18eb      	adds	r3, r5, r3
 8000a72:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000a76:	f080 811b 	bcs.w	8000cb0 <__udivmoddi4+0x28c>
 8000a7a:	4299      	cmp	r1, r3
 8000a7c:	f240 8118 	bls.w	8000cb0 <__udivmoddi4+0x28c>
 8000a80:	3f02      	subs	r7, #2
 8000a82:	442b      	add	r3, r5
 8000a84:	1a5b      	subs	r3, r3, r1
 8000a86:	b2a4      	uxth	r4, r4
 8000a88:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a8c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a94:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a98:	45a4      	cmp	ip, r4
 8000a9a:	d909      	bls.n	8000ab0 <__udivmoddi4+0x8c>
 8000a9c:	192c      	adds	r4, r5, r4
 8000a9e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000aa2:	f080 8107 	bcs.w	8000cb4 <__udivmoddi4+0x290>
 8000aa6:	45a4      	cmp	ip, r4
 8000aa8:	f240 8104 	bls.w	8000cb4 <__udivmoddi4+0x290>
 8000aac:	3802      	subs	r0, #2
 8000aae:	442c      	add	r4, r5
 8000ab0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ab4:	eba4 040c 	sub.w	r4, r4, ip
 8000ab8:	2700      	movs	r7, #0
 8000aba:	b11e      	cbz	r6, 8000ac4 <__udivmoddi4+0xa0>
 8000abc:	40d4      	lsrs	r4, r2
 8000abe:	2300      	movs	r3, #0
 8000ac0:	e9c6 4300 	strd	r4, r3, [r6]
 8000ac4:	4639      	mov	r1, r7
 8000ac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aca:	428b      	cmp	r3, r1
 8000acc:	d909      	bls.n	8000ae2 <__udivmoddi4+0xbe>
 8000ace:	2e00      	cmp	r6, #0
 8000ad0:	f000 80eb 	beq.w	8000caa <__udivmoddi4+0x286>
 8000ad4:	2700      	movs	r7, #0
 8000ad6:	e9c6 0100 	strd	r0, r1, [r6]
 8000ada:	4638      	mov	r0, r7
 8000adc:	4639      	mov	r1, r7
 8000ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae2:	fab3 f783 	clz	r7, r3
 8000ae6:	2f00      	cmp	r7, #0
 8000ae8:	d147      	bne.n	8000b7a <__udivmoddi4+0x156>
 8000aea:	428b      	cmp	r3, r1
 8000aec:	d302      	bcc.n	8000af4 <__udivmoddi4+0xd0>
 8000aee:	4282      	cmp	r2, r0
 8000af0:	f200 80fa 	bhi.w	8000ce8 <__udivmoddi4+0x2c4>
 8000af4:	1a84      	subs	r4, r0, r2
 8000af6:	eb61 0303 	sbc.w	r3, r1, r3
 8000afa:	2001      	movs	r0, #1
 8000afc:	4698      	mov	r8, r3
 8000afe:	2e00      	cmp	r6, #0
 8000b00:	d0e0      	beq.n	8000ac4 <__udivmoddi4+0xa0>
 8000b02:	e9c6 4800 	strd	r4, r8, [r6]
 8000b06:	e7dd      	b.n	8000ac4 <__udivmoddi4+0xa0>
 8000b08:	b902      	cbnz	r2, 8000b0c <__udivmoddi4+0xe8>
 8000b0a:	deff      	udf	#255	; 0xff
 8000b0c:	fab2 f282 	clz	r2, r2
 8000b10:	2a00      	cmp	r2, #0
 8000b12:	f040 808f 	bne.w	8000c34 <__udivmoddi4+0x210>
 8000b16:	1b49      	subs	r1, r1, r5
 8000b18:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b1c:	fa1f f885 	uxth.w	r8, r5
 8000b20:	2701      	movs	r7, #1
 8000b22:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b26:	0c23      	lsrs	r3, r4, #16
 8000b28:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b2c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b30:	fb08 f10c 	mul.w	r1, r8, ip
 8000b34:	4299      	cmp	r1, r3
 8000b36:	d907      	bls.n	8000b48 <__udivmoddi4+0x124>
 8000b38:	18eb      	adds	r3, r5, r3
 8000b3a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000b3e:	d202      	bcs.n	8000b46 <__udivmoddi4+0x122>
 8000b40:	4299      	cmp	r1, r3
 8000b42:	f200 80cd 	bhi.w	8000ce0 <__udivmoddi4+0x2bc>
 8000b46:	4684      	mov	ip, r0
 8000b48:	1a59      	subs	r1, r3, r1
 8000b4a:	b2a3      	uxth	r3, r4
 8000b4c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b50:	fb0e 1410 	mls	r4, lr, r0, r1
 8000b54:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000b58:	fb08 f800 	mul.w	r8, r8, r0
 8000b5c:	45a0      	cmp	r8, r4
 8000b5e:	d907      	bls.n	8000b70 <__udivmoddi4+0x14c>
 8000b60:	192c      	adds	r4, r5, r4
 8000b62:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b66:	d202      	bcs.n	8000b6e <__udivmoddi4+0x14a>
 8000b68:	45a0      	cmp	r8, r4
 8000b6a:	f200 80b6 	bhi.w	8000cda <__udivmoddi4+0x2b6>
 8000b6e:	4618      	mov	r0, r3
 8000b70:	eba4 0408 	sub.w	r4, r4, r8
 8000b74:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b78:	e79f      	b.n	8000aba <__udivmoddi4+0x96>
 8000b7a:	f1c7 0c20 	rsb	ip, r7, #32
 8000b7e:	40bb      	lsls	r3, r7
 8000b80:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000b84:	ea4e 0e03 	orr.w	lr, lr, r3
 8000b88:	fa01 f407 	lsl.w	r4, r1, r7
 8000b8c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000b90:	fa21 f30c 	lsr.w	r3, r1, ip
 8000b94:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000b98:	4325      	orrs	r5, r4
 8000b9a:	fbb3 f9f8 	udiv	r9, r3, r8
 8000b9e:	0c2c      	lsrs	r4, r5, #16
 8000ba0:	fb08 3319 	mls	r3, r8, r9, r3
 8000ba4:	fa1f fa8e 	uxth.w	sl, lr
 8000ba8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000bac:	fb09 f40a 	mul.w	r4, r9, sl
 8000bb0:	429c      	cmp	r4, r3
 8000bb2:	fa02 f207 	lsl.w	r2, r2, r7
 8000bb6:	fa00 f107 	lsl.w	r1, r0, r7
 8000bba:	d90b      	bls.n	8000bd4 <__udivmoddi4+0x1b0>
 8000bbc:	eb1e 0303 	adds.w	r3, lr, r3
 8000bc0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000bc4:	f080 8087 	bcs.w	8000cd6 <__udivmoddi4+0x2b2>
 8000bc8:	429c      	cmp	r4, r3
 8000bca:	f240 8084 	bls.w	8000cd6 <__udivmoddi4+0x2b2>
 8000bce:	f1a9 0902 	sub.w	r9, r9, #2
 8000bd2:	4473      	add	r3, lr
 8000bd4:	1b1b      	subs	r3, r3, r4
 8000bd6:	b2ad      	uxth	r5, r5
 8000bd8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bdc:	fb08 3310 	mls	r3, r8, r0, r3
 8000be0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000be4:	fb00 fa0a 	mul.w	sl, r0, sl
 8000be8:	45a2      	cmp	sl, r4
 8000bea:	d908      	bls.n	8000bfe <__udivmoddi4+0x1da>
 8000bec:	eb1e 0404 	adds.w	r4, lr, r4
 8000bf0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bf4:	d26b      	bcs.n	8000cce <__udivmoddi4+0x2aa>
 8000bf6:	45a2      	cmp	sl, r4
 8000bf8:	d969      	bls.n	8000cce <__udivmoddi4+0x2aa>
 8000bfa:	3802      	subs	r0, #2
 8000bfc:	4474      	add	r4, lr
 8000bfe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c02:	fba0 8902 	umull	r8, r9, r0, r2
 8000c06:	eba4 040a 	sub.w	r4, r4, sl
 8000c0a:	454c      	cmp	r4, r9
 8000c0c:	46c2      	mov	sl, r8
 8000c0e:	464b      	mov	r3, r9
 8000c10:	d354      	bcc.n	8000cbc <__udivmoddi4+0x298>
 8000c12:	d051      	beq.n	8000cb8 <__udivmoddi4+0x294>
 8000c14:	2e00      	cmp	r6, #0
 8000c16:	d069      	beq.n	8000cec <__udivmoddi4+0x2c8>
 8000c18:	ebb1 050a 	subs.w	r5, r1, sl
 8000c1c:	eb64 0403 	sbc.w	r4, r4, r3
 8000c20:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c24:	40fd      	lsrs	r5, r7
 8000c26:	40fc      	lsrs	r4, r7
 8000c28:	ea4c 0505 	orr.w	r5, ip, r5
 8000c2c:	e9c6 5400 	strd	r5, r4, [r6]
 8000c30:	2700      	movs	r7, #0
 8000c32:	e747      	b.n	8000ac4 <__udivmoddi4+0xa0>
 8000c34:	f1c2 0320 	rsb	r3, r2, #32
 8000c38:	fa20 f703 	lsr.w	r7, r0, r3
 8000c3c:	4095      	lsls	r5, r2
 8000c3e:	fa01 f002 	lsl.w	r0, r1, r2
 8000c42:	fa21 f303 	lsr.w	r3, r1, r3
 8000c46:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c4a:	4338      	orrs	r0, r7
 8000c4c:	0c01      	lsrs	r1, r0, #16
 8000c4e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000c52:	fa1f f885 	uxth.w	r8, r5
 8000c56:	fb0e 3317 	mls	r3, lr, r7, r3
 8000c5a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c5e:	fb07 f308 	mul.w	r3, r7, r8
 8000c62:	428b      	cmp	r3, r1
 8000c64:	fa04 f402 	lsl.w	r4, r4, r2
 8000c68:	d907      	bls.n	8000c7a <__udivmoddi4+0x256>
 8000c6a:	1869      	adds	r1, r5, r1
 8000c6c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000c70:	d22f      	bcs.n	8000cd2 <__udivmoddi4+0x2ae>
 8000c72:	428b      	cmp	r3, r1
 8000c74:	d92d      	bls.n	8000cd2 <__udivmoddi4+0x2ae>
 8000c76:	3f02      	subs	r7, #2
 8000c78:	4429      	add	r1, r5
 8000c7a:	1acb      	subs	r3, r1, r3
 8000c7c:	b281      	uxth	r1, r0
 8000c7e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c82:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c86:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c8a:	fb00 f308 	mul.w	r3, r0, r8
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d907      	bls.n	8000ca2 <__udivmoddi4+0x27e>
 8000c92:	1869      	adds	r1, r5, r1
 8000c94:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000c98:	d217      	bcs.n	8000cca <__udivmoddi4+0x2a6>
 8000c9a:	428b      	cmp	r3, r1
 8000c9c:	d915      	bls.n	8000cca <__udivmoddi4+0x2a6>
 8000c9e:	3802      	subs	r0, #2
 8000ca0:	4429      	add	r1, r5
 8000ca2:	1ac9      	subs	r1, r1, r3
 8000ca4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000ca8:	e73b      	b.n	8000b22 <__udivmoddi4+0xfe>
 8000caa:	4637      	mov	r7, r6
 8000cac:	4630      	mov	r0, r6
 8000cae:	e709      	b.n	8000ac4 <__udivmoddi4+0xa0>
 8000cb0:	4607      	mov	r7, r0
 8000cb2:	e6e7      	b.n	8000a84 <__udivmoddi4+0x60>
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	e6fb      	b.n	8000ab0 <__udivmoddi4+0x8c>
 8000cb8:	4541      	cmp	r1, r8
 8000cba:	d2ab      	bcs.n	8000c14 <__udivmoddi4+0x1f0>
 8000cbc:	ebb8 0a02 	subs.w	sl, r8, r2
 8000cc0:	eb69 020e 	sbc.w	r2, r9, lr
 8000cc4:	3801      	subs	r0, #1
 8000cc6:	4613      	mov	r3, r2
 8000cc8:	e7a4      	b.n	8000c14 <__udivmoddi4+0x1f0>
 8000cca:	4660      	mov	r0, ip
 8000ccc:	e7e9      	b.n	8000ca2 <__udivmoddi4+0x27e>
 8000cce:	4618      	mov	r0, r3
 8000cd0:	e795      	b.n	8000bfe <__udivmoddi4+0x1da>
 8000cd2:	4667      	mov	r7, ip
 8000cd4:	e7d1      	b.n	8000c7a <__udivmoddi4+0x256>
 8000cd6:	4681      	mov	r9, r0
 8000cd8:	e77c      	b.n	8000bd4 <__udivmoddi4+0x1b0>
 8000cda:	3802      	subs	r0, #2
 8000cdc:	442c      	add	r4, r5
 8000cde:	e747      	b.n	8000b70 <__udivmoddi4+0x14c>
 8000ce0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ce4:	442b      	add	r3, r5
 8000ce6:	e72f      	b.n	8000b48 <__udivmoddi4+0x124>
 8000ce8:	4638      	mov	r0, r7
 8000cea:	e708      	b.n	8000afe <__udivmoddi4+0xda>
 8000cec:	4637      	mov	r7, r6
 8000cee:	e6e9      	b.n	8000ac4 <__udivmoddi4+0xa0>

08000cf0 <__aeabi_idiv0>:
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop

08000cf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cf8:	4b0e      	ldr	r3, [pc, #56]	; (8000d34 <HAL_Init+0x40>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a0d      	ldr	r2, [pc, #52]	; (8000d34 <HAL_Init+0x40>)
 8000cfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d04:	4b0b      	ldr	r3, [pc, #44]	; (8000d34 <HAL_Init+0x40>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a0a      	ldr	r2, [pc, #40]	; (8000d34 <HAL_Init+0x40>)
 8000d0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d10:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <HAL_Init+0x40>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a07      	ldr	r2, [pc, #28]	; (8000d34 <HAL_Init+0x40>)
 8000d16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d1c:	2003      	movs	r0, #3
 8000d1e:	f000 fd33 	bl	8001788 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d22:	2000      	movs	r0, #0
 8000d24:	f000 f808 	bl	8000d38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d28:	f004 f808 	bl	8004d3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d2c:	2300      	movs	r3, #0
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40023c00 	.word	0x40023c00

08000d38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d40:	4b12      	ldr	r3, [pc, #72]	; (8000d8c <HAL_InitTick+0x54>)
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	4b12      	ldr	r3, [pc, #72]	; (8000d90 <HAL_InitTick+0x58>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	4619      	mov	r1, r3
 8000d4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d56:	4618      	mov	r0, r3
 8000d58:	f000 fd4b 	bl	80017f2 <HAL_SYSTICK_Config>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	e00e      	b.n	8000d84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2b0f      	cmp	r3, #15
 8000d6a:	d80a      	bhi.n	8000d82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	6879      	ldr	r1, [r7, #4]
 8000d70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d74:	f000 fd13 	bl	800179e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d78:	4a06      	ldr	r2, [pc, #24]	; (8000d94 <HAL_InitTick+0x5c>)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	e000      	b.n	8000d84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3708      	adds	r7, #8
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	20000008 	.word	0x20000008
 8000d90:	20000004 	.word	0x20000004
 8000d94:	20000000 	.word	0x20000000

08000d98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d9c:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <HAL_IncTick+0x20>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	461a      	mov	r2, r3
 8000da2:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <HAL_IncTick+0x24>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4413      	add	r3, r2
 8000da8:	4a04      	ldr	r2, [pc, #16]	; (8000dbc <HAL_IncTick+0x24>)
 8000daa:	6013      	str	r3, [r2, #0]
}
 8000dac:	bf00      	nop
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	20000004 	.word	0x20000004
 8000dbc:	20000108 	.word	0x20000108

08000dc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000dc4:	4b03      	ldr	r3, [pc, #12]	; (8000dd4 <HAL_GetTick+0x14>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	20000108 	.word	0x20000108

08000dd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000de0:	f7ff ffee 	bl	8000dc0 <HAL_GetTick>
 8000de4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000df0:	d005      	beq.n	8000dfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000df2:	4b09      	ldr	r3, [pc, #36]	; (8000e18 <HAL_Delay+0x40>)
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	461a      	mov	r2, r3
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dfe:	bf00      	nop
 8000e00:	f7ff ffde 	bl	8000dc0 <HAL_GetTick>
 8000e04:	4602      	mov	r2, r0
 8000e06:	68bb      	ldr	r3, [r7, #8]
 8000e08:	1ad3      	subs	r3, r2, r3
 8000e0a:	68fa      	ldr	r2, [r7, #12]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d8f7      	bhi.n	8000e00 <HAL_Delay+0x28>
  {
  }
}
 8000e10:	bf00      	nop
 8000e12:	3710      	adds	r7, #16
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	20000004 	.word	0x20000004

08000e1c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e24:	2300      	movs	r3, #0
 8000e26:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d101      	bne.n	8000e32 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e033      	b.n	8000e9a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d109      	bne.n	8000e4e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e3a:	6878      	ldr	r0, [r7, #4]
 8000e3c:	f003 ffa6 	bl	8004d8c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2200      	movs	r2, #0
 8000e44:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2200      	movs	r2, #0
 8000e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e52:	f003 0310 	and.w	r3, r3, #16
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d118      	bne.n	8000e8c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000e62:	f023 0302 	bic.w	r3, r3, #2
 8000e66:	f043 0202 	orr.w	r2, r3, #2
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000e6e:	6878      	ldr	r0, [r7, #4]
 8000e70:	f000 fa3c 	bl	80012ec <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2200      	movs	r2, #0
 8000e78:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7e:	f023 0303 	bic.w	r3, r3, #3
 8000e82:	f043 0201 	orr.w	r2, r3, #1
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	641a      	str	r2, [r3, #64]	; 0x40
 8000e8a:	e001      	b.n	8000e90 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2200      	movs	r2, #0
 8000e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3710      	adds	r7, #16
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
	...

08000ea4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b086      	sub	sp, #24
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60f8      	str	r0, [r7, #12]
 8000eac:	60b9      	str	r1, [r7, #8]
 8000eae:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d101      	bne.n	8000ec2 <HAL_ADC_Start_DMA+0x1e>
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	e0b1      	b.n	8001026 <HAL_ADC_Start_DMA+0x182>
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	689b      	ldr	r3, [r3, #8]
 8000ed0:	f003 0301 	and.w	r3, r3, #1
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d018      	beq.n	8000f0a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	689a      	ldr	r2, [r3, #8]
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f042 0201 	orr.w	r2, r2, #1
 8000ee6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000ee8:	4b51      	ldr	r3, [pc, #324]	; (8001030 <HAL_ADC_Start_DMA+0x18c>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a51      	ldr	r2, [pc, #324]	; (8001034 <HAL_ADC_Start_DMA+0x190>)
 8000eee:	fba2 2303 	umull	r2, r3, r2, r3
 8000ef2:	0c9a      	lsrs	r2, r3, #18
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	4413      	add	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8000efc:	e002      	b.n	8000f04 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	3b01      	subs	r3, #1
 8000f02:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d1f9      	bne.n	8000efe <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	689b      	ldr	r3, [r3, #8]
 8000f10:	f003 0301 	and.w	r3, r3, #1
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	f040 8085 	bne.w	8001024 <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000f22:	f023 0301 	bic.w	r3, r3, #1
 8000f26:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d007      	beq.n	8000f4c <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f40:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f44:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f58:	d106      	bne.n	8000f68 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5e:	f023 0206 	bic.w	r2, r3, #6
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	645a      	str	r2, [r3, #68]	; 0x44
 8000f66:	e002      	b.n	8000f6e <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	2200      	movs	r2, #0
 8000f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000f76:	4b30      	ldr	r3, [pc, #192]	; (8001038 <HAL_ADC_Start_DMA+0x194>)
 8000f78:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f7e:	4a2f      	ldr	r2, [pc, #188]	; (800103c <HAL_ADC_Start_DMA+0x198>)
 8000f80:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f86:	4a2e      	ldr	r2, [pc, #184]	; (8001040 <HAL_ADC_Start_DMA+0x19c>)
 8000f88:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f8e:	4a2d      	ldr	r2, [pc, #180]	; (8001044 <HAL_ADC_Start_DMA+0x1a0>)
 8000f90:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000f9a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	685a      	ldr	r2, [r3, #4]
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000faa:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	689a      	ldr	r2, [r3, #8]
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000fba:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	334c      	adds	r3, #76	; 0x4c
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	68ba      	ldr	r2, [r7, #8]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	f000 fccc 	bl	8001968 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f003 031f 	and.w	r3, r3, #31
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d10f      	bne.n	8000ffc <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d11c      	bne.n	8001024 <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	689a      	ldr	r2, [r3, #8]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000ff8:	609a      	str	r2, [r3, #8]
 8000ffa:	e013      	b.n	8001024 <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a11      	ldr	r2, [pc, #68]	; (8001048 <HAL_ADC_Start_DMA+0x1a4>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d10e      	bne.n	8001024 <HAL_ADC_Start_DMA+0x180>
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	689b      	ldr	r3, [r3, #8]
 800100c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001010:	2b00      	cmp	r3, #0
 8001012:	d107      	bne.n	8001024 <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	689a      	ldr	r2, [r3, #8]
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001022:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001024:	2300      	movs	r3, #0
}
 8001026:	4618      	mov	r0, r3
 8001028:	3718      	adds	r7, #24
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	20000008 	.word	0x20000008
 8001034:	431bde83 	.word	0x431bde83
 8001038:	40012300 	.word	0x40012300
 800103c:	080014e5 	.word	0x080014e5
 8001040:	0800159f 	.word	0x0800159f
 8001044:	080015bb 	.word	0x080015bb
 8001048:	40012000 	.word	0x40012000

0800104c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001054:	bf00      	nop
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001068:	bf00      	nop
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr

08001074 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800107c:	bf00      	nop
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001088:	b480      	push	{r7}
 800108a:	b085      	sub	sp, #20
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001092:	2300      	movs	r3, #0
 8001094:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800109c:	2b01      	cmp	r3, #1
 800109e:	d101      	bne.n	80010a4 <HAL_ADC_ConfigChannel+0x1c>
 80010a0:	2302      	movs	r3, #2
 80010a2:	e113      	b.n	80012cc <HAL_ADC_ConfigChannel+0x244>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2201      	movs	r2, #1
 80010a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	2b09      	cmp	r3, #9
 80010b2:	d925      	bls.n	8001100 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	68d9      	ldr	r1, [r3, #12]
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	b29b      	uxth	r3, r3
 80010c0:	461a      	mov	r2, r3
 80010c2:	4613      	mov	r3, r2
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	4413      	add	r3, r2
 80010c8:	3b1e      	subs	r3, #30
 80010ca:	2207      	movs	r2, #7
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	43da      	mvns	r2, r3
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	400a      	ands	r2, r1
 80010d8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	68d9      	ldr	r1, [r3, #12]
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	689a      	ldr	r2, [r3, #8]
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	b29b      	uxth	r3, r3
 80010ea:	4618      	mov	r0, r3
 80010ec:	4603      	mov	r3, r0
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	4403      	add	r3, r0
 80010f2:	3b1e      	subs	r3, #30
 80010f4:	409a      	lsls	r2, r3
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	430a      	orrs	r2, r1
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	e022      	b.n	8001146 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	6919      	ldr	r1, [r3, #16]
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	b29b      	uxth	r3, r3
 800110c:	461a      	mov	r2, r3
 800110e:	4613      	mov	r3, r2
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	4413      	add	r3, r2
 8001114:	2207      	movs	r2, #7
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	43da      	mvns	r2, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	400a      	ands	r2, r1
 8001122:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	6919      	ldr	r1, [r3, #16]
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	689a      	ldr	r2, [r3, #8]
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	b29b      	uxth	r3, r3
 8001134:	4618      	mov	r0, r3
 8001136:	4603      	mov	r3, r0
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	4403      	add	r3, r0
 800113c:	409a      	lsls	r2, r3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	430a      	orrs	r2, r1
 8001144:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	2b06      	cmp	r3, #6
 800114c:	d824      	bhi.n	8001198 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685a      	ldr	r2, [r3, #4]
 8001158:	4613      	mov	r3, r2
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	4413      	add	r3, r2
 800115e:	3b05      	subs	r3, #5
 8001160:	221f      	movs	r2, #31
 8001162:	fa02 f303 	lsl.w	r3, r2, r3
 8001166:	43da      	mvns	r2, r3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	400a      	ands	r2, r1
 800116e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	b29b      	uxth	r3, r3
 800117c:	4618      	mov	r0, r3
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685a      	ldr	r2, [r3, #4]
 8001182:	4613      	mov	r3, r2
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	4413      	add	r3, r2
 8001188:	3b05      	subs	r3, #5
 800118a:	fa00 f203 	lsl.w	r2, r0, r3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	430a      	orrs	r2, r1
 8001194:	635a      	str	r2, [r3, #52]	; 0x34
 8001196:	e04c      	b.n	8001232 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	2b0c      	cmp	r3, #12
 800119e:	d824      	bhi.n	80011ea <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685a      	ldr	r2, [r3, #4]
 80011aa:	4613      	mov	r3, r2
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	4413      	add	r3, r2
 80011b0:	3b23      	subs	r3, #35	; 0x23
 80011b2:	221f      	movs	r2, #31
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	43da      	mvns	r2, r3
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	400a      	ands	r2, r1
 80011c0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	4618      	mov	r0, r3
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685a      	ldr	r2, [r3, #4]
 80011d4:	4613      	mov	r3, r2
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	4413      	add	r3, r2
 80011da:	3b23      	subs	r3, #35	; 0x23
 80011dc:	fa00 f203 	lsl.w	r2, r0, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	430a      	orrs	r2, r1
 80011e6:	631a      	str	r2, [r3, #48]	; 0x30
 80011e8:	e023      	b.n	8001232 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685a      	ldr	r2, [r3, #4]
 80011f4:	4613      	mov	r3, r2
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	4413      	add	r3, r2
 80011fa:	3b41      	subs	r3, #65	; 0x41
 80011fc:	221f      	movs	r2, #31
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	43da      	mvns	r2, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	400a      	ands	r2, r1
 800120a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	b29b      	uxth	r3, r3
 8001218:	4618      	mov	r0, r3
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685a      	ldr	r2, [r3, #4]
 800121e:	4613      	mov	r3, r2
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	4413      	add	r3, r2
 8001224:	3b41      	subs	r3, #65	; 0x41
 8001226:	fa00 f203 	lsl.w	r2, r0, r3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	430a      	orrs	r2, r1
 8001230:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001232:	4b29      	ldr	r3, [pc, #164]	; (80012d8 <HAL_ADC_ConfigChannel+0x250>)
 8001234:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a28      	ldr	r2, [pc, #160]	; (80012dc <HAL_ADC_ConfigChannel+0x254>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d10f      	bne.n	8001260 <HAL_ADC_ConfigChannel+0x1d8>
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2b12      	cmp	r3, #18
 8001246:	d10b      	bne.n	8001260 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a1d      	ldr	r2, [pc, #116]	; (80012dc <HAL_ADC_ConfigChannel+0x254>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d12b      	bne.n	80012c2 <HAL_ADC_ConfigChannel+0x23a>
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a1c      	ldr	r2, [pc, #112]	; (80012e0 <HAL_ADC_ConfigChannel+0x258>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d003      	beq.n	800127c <HAL_ADC_ConfigChannel+0x1f4>
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2b11      	cmp	r3, #17
 800127a:	d122      	bne.n	80012c2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a11      	ldr	r2, [pc, #68]	; (80012e0 <HAL_ADC_ConfigChannel+0x258>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d111      	bne.n	80012c2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800129e:	4b11      	ldr	r3, [pc, #68]	; (80012e4 <HAL_ADC_ConfigChannel+0x25c>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a11      	ldr	r2, [pc, #68]	; (80012e8 <HAL_ADC_ConfigChannel+0x260>)
 80012a4:	fba2 2303 	umull	r2, r3, r2, r3
 80012a8:	0c9a      	lsrs	r2, r3, #18
 80012aa:	4613      	mov	r3, r2
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	4413      	add	r3, r2
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80012b4:	e002      	b.n	80012bc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	3b01      	subs	r3, #1
 80012ba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d1f9      	bne.n	80012b6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2200      	movs	r2, #0
 80012c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80012ca:	2300      	movs	r3, #0
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3714      	adds	r7, #20
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr
 80012d8:	40012300 	.word	0x40012300
 80012dc:	40012000 	.word	0x40012000
 80012e0:	10000012 	.word	0x10000012
 80012e4:	20000008 	.word	0x20000008
 80012e8:	431bde83 	.word	0x431bde83

080012ec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b085      	sub	sp, #20
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012f4:	4b79      	ldr	r3, [pc, #484]	; (80014dc <ADC_Init+0x1f0>)
 80012f6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	685a      	ldr	r2, [r3, #4]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	431a      	orrs	r2, r3
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	685a      	ldr	r2, [r3, #4]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001320:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	6859      	ldr	r1, [r3, #4]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	691b      	ldr	r3, [r3, #16]
 800132c:	021a      	lsls	r2, r3, #8
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	430a      	orrs	r2, r1
 8001334:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	685a      	ldr	r2, [r3, #4]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001344:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	6859      	ldr	r1, [r3, #4]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	689a      	ldr	r2, [r3, #8]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	430a      	orrs	r2, r1
 8001356:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	689a      	ldr	r2, [r3, #8]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001366:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	6899      	ldr	r1, [r3, #8]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	68da      	ldr	r2, [r3, #12]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	430a      	orrs	r2, r1
 8001378:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800137e:	4a58      	ldr	r2, [pc, #352]	; (80014e0 <ADC_Init+0x1f4>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d022      	beq.n	80013ca <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	689a      	ldr	r2, [r3, #8]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001392:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	6899      	ldr	r1, [r3, #8]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	430a      	orrs	r2, r1
 80013a4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	689a      	ldr	r2, [r3, #8]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80013b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	6899      	ldr	r1, [r3, #8]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	430a      	orrs	r2, r1
 80013c6:	609a      	str	r2, [r3, #8]
 80013c8:	e00f      	b.n	80013ea <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	689a      	ldr	r2, [r3, #8]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80013d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	689a      	ldr	r2, [r3, #8]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80013e8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	689a      	ldr	r2, [r3, #8]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f022 0202 	bic.w	r2, r2, #2
 80013f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	6899      	ldr	r1, [r3, #8]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	7e1b      	ldrb	r3, [r3, #24]
 8001404:	005a      	lsls	r2, r3, #1
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	430a      	orrs	r2, r1
 800140c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d01b      	beq.n	8001450 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	685a      	ldr	r2, [r3, #4]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001426:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	685a      	ldr	r2, [r3, #4]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001436:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	6859      	ldr	r1, [r3, #4]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001442:	3b01      	subs	r3, #1
 8001444:	035a      	lsls	r2, r3, #13
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	430a      	orrs	r2, r1
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	e007      	b.n	8001460 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	685a      	ldr	r2, [r3, #4]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800145e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800146e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	69db      	ldr	r3, [r3, #28]
 800147a:	3b01      	subs	r3, #1
 800147c:	051a      	lsls	r2, r3, #20
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	430a      	orrs	r2, r1
 8001484:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	689a      	ldr	r2, [r3, #8]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001494:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	6899      	ldr	r1, [r3, #8]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80014a2:	025a      	lsls	r2, r3, #9
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	430a      	orrs	r2, r1
 80014aa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	689a      	ldr	r2, [r3, #8]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	6899      	ldr	r1, [r3, #8]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	695b      	ldr	r3, [r3, #20]
 80014c6:	029a      	lsls	r2, r3, #10
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	430a      	orrs	r2, r1
 80014ce:	609a      	str	r2, [r3, #8]
}
 80014d0:	bf00      	nop
 80014d2:	3714      	adds	r7, #20
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr
 80014dc:	40012300 	.word	0x40012300
 80014e0:	0f000001 	.word	0x0f000001

080014e4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014f0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d13c      	bne.n	8001578 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001502:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001514:	2b00      	cmp	r3, #0
 8001516:	d12b      	bne.n	8001570 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800151c:	2b00      	cmp	r3, #0
 800151e:	d127      	bne.n	8001570 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001526:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800152a:	2b00      	cmp	r3, #0
 800152c:	d006      	beq.n	800153c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001538:	2b00      	cmp	r3, #0
 800153a:	d119      	bne.n	8001570 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	685a      	ldr	r2, [r3, #4]
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f022 0220 	bic.w	r2, r2, #32
 800154a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001550:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001560:	2b00      	cmp	r3, #0
 8001562:	d105      	bne.n	8001570 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001568:	f043 0201 	orr.w	r2, r3, #1
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001570:	68f8      	ldr	r0, [r7, #12]
 8001572:	f7ff fd6b 	bl	800104c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001576:	e00e      	b.n	8001596 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157c:	f003 0310 	and.w	r3, r3, #16
 8001580:	2b00      	cmp	r3, #0
 8001582:	d003      	beq.n	800158c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001584:	68f8      	ldr	r0, [r7, #12]
 8001586:	f7ff fd75 	bl	8001074 <HAL_ADC_ErrorCallback>
}
 800158a:	e004      	b.n	8001596 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	4798      	blx	r3
}
 8001596:	bf00      	nop
 8001598:	3710      	adds	r7, #16
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b084      	sub	sp, #16
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015aa:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80015ac:	68f8      	ldr	r0, [r7, #12]
 80015ae:	f7ff fd57 	bl	8001060 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80015b2:	bf00      	nop
 80015b4:	3710      	adds	r7, #16
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b084      	sub	sp, #16
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015c6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	2240      	movs	r2, #64	; 0x40
 80015cc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d2:	f043 0204 	orr.w	r2, r3, #4
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80015da:	68f8      	ldr	r0, [r7, #12]
 80015dc:	f7ff fd4a 	bl	8001074 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80015e0:	bf00      	nop
 80015e2:	3710      	adds	r7, #16
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	f003 0307 	and.w	r3, r3, #7
 80015f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015f8:	4b0c      	ldr	r3, [pc, #48]	; (800162c <__NVIC_SetPriorityGrouping+0x44>)
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015fe:	68ba      	ldr	r2, [r7, #8]
 8001600:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001604:	4013      	ands	r3, r2
 8001606:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001610:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001614:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001618:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800161a:	4a04      	ldr	r2, [pc, #16]	; (800162c <__NVIC_SetPriorityGrouping+0x44>)
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	60d3      	str	r3, [r2, #12]
}
 8001620:	bf00      	nop
 8001622:	3714      	adds	r7, #20
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr
 800162c:	e000ed00 	.word	0xe000ed00

08001630 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001634:	4b04      	ldr	r3, [pc, #16]	; (8001648 <__NVIC_GetPriorityGrouping+0x18>)
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	0a1b      	lsrs	r3, r3, #8
 800163a:	f003 0307 	and.w	r3, r3, #7
}
 800163e:	4618      	mov	r0, r3
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	e000ed00 	.word	0xe000ed00

0800164c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165a:	2b00      	cmp	r3, #0
 800165c:	db0b      	blt.n	8001676 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800165e:	79fb      	ldrb	r3, [r7, #7]
 8001660:	f003 021f 	and.w	r2, r3, #31
 8001664:	4907      	ldr	r1, [pc, #28]	; (8001684 <__NVIC_EnableIRQ+0x38>)
 8001666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166a:	095b      	lsrs	r3, r3, #5
 800166c:	2001      	movs	r0, #1
 800166e:	fa00 f202 	lsl.w	r2, r0, r2
 8001672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001676:	bf00      	nop
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	e000e100 	.word	0xe000e100

08001688 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	4603      	mov	r3, r0
 8001690:	6039      	str	r1, [r7, #0]
 8001692:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001698:	2b00      	cmp	r3, #0
 800169a:	db0a      	blt.n	80016b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	b2da      	uxtb	r2, r3
 80016a0:	490c      	ldr	r1, [pc, #48]	; (80016d4 <__NVIC_SetPriority+0x4c>)
 80016a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a6:	0112      	lsls	r2, r2, #4
 80016a8:	b2d2      	uxtb	r2, r2
 80016aa:	440b      	add	r3, r1
 80016ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016b0:	e00a      	b.n	80016c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	b2da      	uxtb	r2, r3
 80016b6:	4908      	ldr	r1, [pc, #32]	; (80016d8 <__NVIC_SetPriority+0x50>)
 80016b8:	79fb      	ldrb	r3, [r7, #7]
 80016ba:	f003 030f 	and.w	r3, r3, #15
 80016be:	3b04      	subs	r3, #4
 80016c0:	0112      	lsls	r2, r2, #4
 80016c2:	b2d2      	uxtb	r2, r2
 80016c4:	440b      	add	r3, r1
 80016c6:	761a      	strb	r2, [r3, #24]
}
 80016c8:	bf00      	nop
 80016ca:	370c      	adds	r7, #12
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr
 80016d4:	e000e100 	.word	0xe000e100
 80016d8:	e000ed00 	.word	0xe000ed00

080016dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016dc:	b480      	push	{r7}
 80016de:	b089      	sub	sp, #36	; 0x24
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	60b9      	str	r1, [r7, #8]
 80016e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	f003 0307 	and.w	r3, r3, #7
 80016ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	f1c3 0307 	rsb	r3, r3, #7
 80016f6:	2b04      	cmp	r3, #4
 80016f8:	bf28      	it	cs
 80016fa:	2304      	movcs	r3, #4
 80016fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	3304      	adds	r3, #4
 8001702:	2b06      	cmp	r3, #6
 8001704:	d902      	bls.n	800170c <NVIC_EncodePriority+0x30>
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	3b03      	subs	r3, #3
 800170a:	e000      	b.n	800170e <NVIC_EncodePriority+0x32>
 800170c:	2300      	movs	r3, #0
 800170e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001710:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001714:	69bb      	ldr	r3, [r7, #24]
 8001716:	fa02 f303 	lsl.w	r3, r2, r3
 800171a:	43da      	mvns	r2, r3
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	401a      	ands	r2, r3
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001724:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	fa01 f303 	lsl.w	r3, r1, r3
 800172e:	43d9      	mvns	r1, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001734:	4313      	orrs	r3, r2
         );
}
 8001736:	4618      	mov	r0, r3
 8001738:	3724      	adds	r7, #36	; 0x24
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
	...

08001744 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	3b01      	subs	r3, #1
 8001750:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001754:	d301      	bcc.n	800175a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001756:	2301      	movs	r3, #1
 8001758:	e00f      	b.n	800177a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800175a:	4a0a      	ldr	r2, [pc, #40]	; (8001784 <SysTick_Config+0x40>)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	3b01      	subs	r3, #1
 8001760:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001762:	210f      	movs	r1, #15
 8001764:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001768:	f7ff ff8e 	bl	8001688 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800176c:	4b05      	ldr	r3, [pc, #20]	; (8001784 <SysTick_Config+0x40>)
 800176e:	2200      	movs	r2, #0
 8001770:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001772:	4b04      	ldr	r3, [pc, #16]	; (8001784 <SysTick_Config+0x40>)
 8001774:	2207      	movs	r2, #7
 8001776:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001778:	2300      	movs	r3, #0
}
 800177a:	4618      	mov	r0, r3
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	e000e010 	.word	0xe000e010

08001788 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f7ff ff29 	bl	80015e8 <__NVIC_SetPriorityGrouping>
}
 8001796:	bf00      	nop
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800179e:	b580      	push	{r7, lr}
 80017a0:	b086      	sub	sp, #24
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	4603      	mov	r3, r0
 80017a6:	60b9      	str	r1, [r7, #8]
 80017a8:	607a      	str	r2, [r7, #4]
 80017aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017ac:	2300      	movs	r3, #0
 80017ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017b0:	f7ff ff3e 	bl	8001630 <__NVIC_GetPriorityGrouping>
 80017b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	68b9      	ldr	r1, [r7, #8]
 80017ba:	6978      	ldr	r0, [r7, #20]
 80017bc:	f7ff ff8e 	bl	80016dc <NVIC_EncodePriority>
 80017c0:	4602      	mov	r2, r0
 80017c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017c6:	4611      	mov	r1, r2
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff ff5d 	bl	8001688 <__NVIC_SetPriority>
}
 80017ce:	bf00      	nop
 80017d0:	3718      	adds	r7, #24
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b082      	sub	sp, #8
 80017da:	af00      	add	r7, sp, #0
 80017dc:	4603      	mov	r3, r0
 80017de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff ff31 	bl	800164c <__NVIC_EnableIRQ>
}
 80017ea:	bf00      	nop
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b082      	sub	sp, #8
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f7ff ffa2 	bl	8001744 <SysTick_Config>
 8001800:	4603      	mov	r3, r0
}
 8001802:	4618      	mov	r0, r3
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
	...

0800180c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b086      	sub	sp, #24
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001814:	2300      	movs	r3, #0
 8001816:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001818:	f7ff fad2 	bl	8000dc0 <HAL_GetTick>
 800181c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d101      	bne.n	8001828 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e099      	b.n	800195c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2200      	movs	r2, #0
 800182c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2202      	movs	r2, #2
 8001834:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f022 0201 	bic.w	r2, r2, #1
 8001846:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001848:	e00f      	b.n	800186a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800184a:	f7ff fab9 	bl	8000dc0 <HAL_GetTick>
 800184e:	4602      	mov	r2, r0
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	2b05      	cmp	r3, #5
 8001856:	d908      	bls.n	800186a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2220      	movs	r2, #32
 800185c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2203      	movs	r2, #3
 8001862:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e078      	b.n	800195c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0301 	and.w	r3, r3, #1
 8001874:	2b00      	cmp	r3, #0
 8001876:	d1e8      	bne.n	800184a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001880:	697a      	ldr	r2, [r7, #20]
 8001882:	4b38      	ldr	r3, [pc, #224]	; (8001964 <HAL_DMA_Init+0x158>)
 8001884:	4013      	ands	r3, r2
 8001886:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685a      	ldr	r2, [r3, #4]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001896:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	691b      	ldr	r3, [r3, #16]
 800189c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6a1b      	ldr	r3, [r3, #32]
 80018b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018b6:	697a      	ldr	r2, [r7, #20]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c0:	2b04      	cmp	r3, #4
 80018c2:	d107      	bne.n	80018d4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018cc:	4313      	orrs	r3, r2
 80018ce:	697a      	ldr	r2, [r7, #20]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	697a      	ldr	r2, [r7, #20]
 80018da:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	695b      	ldr	r3, [r3, #20]
 80018e2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	f023 0307 	bic.w	r3, r3, #7
 80018ea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f0:	697a      	ldr	r2, [r7, #20]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018fa:	2b04      	cmp	r3, #4
 80018fc:	d117      	bne.n	800192e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001902:	697a      	ldr	r2, [r7, #20]
 8001904:	4313      	orrs	r3, r2
 8001906:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800190c:	2b00      	cmp	r3, #0
 800190e:	d00e      	beq.n	800192e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f000 fa99 	bl	8001e48 <DMA_CheckFifoParam>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d008      	beq.n	800192e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2240      	movs	r2, #64	; 0x40
 8001920:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2201      	movs	r2, #1
 8001926:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800192a:	2301      	movs	r3, #1
 800192c:	e016      	b.n	800195c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	697a      	ldr	r2, [r7, #20]
 8001934:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f000 fa50 	bl	8001ddc <DMA_CalcBaseAndBitshift>
 800193c:	4603      	mov	r3, r0
 800193e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001944:	223f      	movs	r2, #63	; 0x3f
 8001946:	409a      	lsls	r2, r3
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2200      	movs	r2, #0
 8001950:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2201      	movs	r2, #1
 8001956:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800195a:	2300      	movs	r3, #0
}
 800195c:	4618      	mov	r0, r3
 800195e:	3718      	adds	r7, #24
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	e010803f 	.word	0xe010803f

08001968 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b086      	sub	sp, #24
 800196c:	af00      	add	r7, sp, #0
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	60b9      	str	r1, [r7, #8]
 8001972:	607a      	str	r2, [r7, #4]
 8001974:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001976:	2300      	movs	r3, #0
 8001978:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800197e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001986:	2b01      	cmp	r3, #1
 8001988:	d101      	bne.n	800198e <HAL_DMA_Start_IT+0x26>
 800198a:	2302      	movs	r3, #2
 800198c:	e048      	b.n	8001a20 <HAL_DMA_Start_IT+0xb8>
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2201      	movs	r2, #1
 8001992:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800199c:	b2db      	uxtb	r3, r3
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d137      	bne.n	8001a12 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	2202      	movs	r2, #2
 80019a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2200      	movs	r2, #0
 80019ae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	68b9      	ldr	r1, [r7, #8]
 80019b6:	68f8      	ldr	r0, [r7, #12]
 80019b8:	f000 f9e2 	bl	8001d80 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019c0:	223f      	movs	r2, #63	; 0x3f
 80019c2:	409a      	lsls	r2, r3
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f042 0216 	orr.w	r2, r2, #22
 80019d6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	695a      	ldr	r2, [r3, #20]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80019e6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d007      	beq.n	8001a00 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f042 0208 	orr.w	r2, r2, #8
 80019fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f042 0201 	orr.w	r2, r2, #1
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	e005      	b.n	8001a1e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2200      	movs	r2, #0
 8001a16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001a1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3718      	adds	r7, #24
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d004      	beq.n	8001a46 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2280      	movs	r2, #128	; 0x80
 8001a40:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e00c      	b.n	8001a60 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2205      	movs	r2, #5
 8001a4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f022 0201 	bic.w	r2, r2, #1
 8001a5c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001a5e:	2300      	movs	r3, #0
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b086      	sub	sp, #24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001a74:	2300      	movs	r3, #0
 8001a76:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001a78:	4b92      	ldr	r3, [pc, #584]	; (8001cc4 <HAL_DMA_IRQHandler+0x258>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a92      	ldr	r2, [pc, #584]	; (8001cc8 <HAL_DMA_IRQHandler+0x25c>)
 8001a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a82:	0a9b      	lsrs	r3, r3, #10
 8001a84:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a8a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a96:	2208      	movs	r2, #8
 8001a98:	409a      	lsls	r2, r3
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d01a      	beq.n	8001ad8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0304 	and.w	r3, r3, #4
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d013      	beq.n	8001ad8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f022 0204 	bic.w	r2, r2, #4
 8001abe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ac4:	2208      	movs	r2, #8
 8001ac6:	409a      	lsls	r2, r3
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ad0:	f043 0201 	orr.w	r2, r3, #1
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001adc:	2201      	movs	r2, #1
 8001ade:	409a      	lsls	r2, r3
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d012      	beq.n	8001b0e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	695b      	ldr	r3, [r3, #20]
 8001aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d00b      	beq.n	8001b0e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001afa:	2201      	movs	r2, #1
 8001afc:	409a      	lsls	r2, r3
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b06:	f043 0202 	orr.w	r2, r3, #2
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b12:	2204      	movs	r2, #4
 8001b14:	409a      	lsls	r2, r3
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d012      	beq.n	8001b44 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0302 	and.w	r3, r3, #2
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d00b      	beq.n	8001b44 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b30:	2204      	movs	r2, #4
 8001b32:	409a      	lsls	r2, r3
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b3c:	f043 0204 	orr.w	r2, r3, #4
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b48:	2210      	movs	r2, #16
 8001b4a:	409a      	lsls	r2, r3
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	4013      	ands	r3, r2
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d043      	beq.n	8001bdc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0308 	and.w	r3, r3, #8
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d03c      	beq.n	8001bdc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b66:	2210      	movs	r2, #16
 8001b68:	409a      	lsls	r2, r3
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d018      	beq.n	8001bae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d108      	bne.n	8001b9c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d024      	beq.n	8001bdc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	4798      	blx	r3
 8001b9a:	e01f      	b.n	8001bdc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d01b      	beq.n	8001bdc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	4798      	blx	r3
 8001bac:	e016      	b.n	8001bdc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d107      	bne.n	8001bcc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f022 0208 	bic.w	r2, r2, #8
 8001bca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d003      	beq.n	8001bdc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001be0:	2220      	movs	r2, #32
 8001be2:	409a      	lsls	r2, r3
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	4013      	ands	r3, r2
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	f000 808e 	beq.w	8001d0a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0310 	and.w	r3, r3, #16
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	f000 8086 	beq.w	8001d0a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c02:	2220      	movs	r2, #32
 8001c04:	409a      	lsls	r2, r3
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	2b05      	cmp	r3, #5
 8001c14:	d136      	bne.n	8001c84 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f022 0216 	bic.w	r2, r2, #22
 8001c24:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	695a      	ldr	r2, [r3, #20]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c34:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d103      	bne.n	8001c46 <HAL_DMA_IRQHandler+0x1da>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d007      	beq.n	8001c56 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f022 0208 	bic.w	r2, r2, #8
 8001c54:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c5a:	223f      	movs	r2, #63	; 0x3f
 8001c5c:	409a      	lsls	r2, r3
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d07d      	beq.n	8001d76 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	4798      	blx	r3
        }
        return;
 8001c82:	e078      	b.n	8001d76 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d01c      	beq.n	8001ccc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d108      	bne.n	8001cb2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d030      	beq.n	8001d0a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	4798      	blx	r3
 8001cb0:	e02b      	b.n	8001d0a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d027      	beq.n	8001d0a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	4798      	blx	r3
 8001cc2:	e022      	b.n	8001d0a <HAL_DMA_IRQHandler+0x29e>
 8001cc4:	20000008 	.word	0x20000008
 8001cc8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d10f      	bne.n	8001cfa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f022 0210 	bic.w	r2, r2, #16
 8001ce8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2200      	movs	r2, #0
 8001cee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d003      	beq.n	8001d0a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d032      	beq.n	8001d78 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d022      	beq.n	8001d64 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2205      	movs	r2, #5
 8001d22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f022 0201 	bic.w	r2, r2, #1
 8001d34:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	3301      	adds	r3, #1
 8001d3a:	60bb      	str	r3, [r7, #8]
 8001d3c:	697a      	ldr	r2, [r7, #20]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d307      	bcc.n	8001d52 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0301 	and.w	r3, r3, #1
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d1f2      	bne.n	8001d36 <HAL_DMA_IRQHandler+0x2ca>
 8001d50:	e000      	b.n	8001d54 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001d52:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d005      	beq.n	8001d78 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	4798      	blx	r3
 8001d74:	e000      	b.n	8001d78 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001d76:	bf00      	nop
    }
  }
}
 8001d78:	3718      	adds	r7, #24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop

08001d80 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	60b9      	str	r1, [r7, #8]
 8001d8a:	607a      	str	r2, [r7, #4]
 8001d8c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001d9c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	683a      	ldr	r2, [r7, #0]
 8001da4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	2b40      	cmp	r3, #64	; 0x40
 8001dac:	d108      	bne.n	8001dc0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	68ba      	ldr	r2, [r7, #8]
 8001dbc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001dbe:	e007      	b.n	8001dd0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	68ba      	ldr	r2, [r7, #8]
 8001dc6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	60da      	str	r2, [r3, #12]
}
 8001dd0:	bf00      	nop
 8001dd2:	3714      	adds	r7, #20
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b085      	sub	sp, #20
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	3b10      	subs	r3, #16
 8001dec:	4a14      	ldr	r2, [pc, #80]	; (8001e40 <DMA_CalcBaseAndBitshift+0x64>)
 8001dee:	fba2 2303 	umull	r2, r3, r2, r3
 8001df2:	091b      	lsrs	r3, r3, #4
 8001df4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001df6:	4a13      	ldr	r2, [pc, #76]	; (8001e44 <DMA_CalcBaseAndBitshift+0x68>)
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	461a      	mov	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2b03      	cmp	r3, #3
 8001e08:	d909      	bls.n	8001e1e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001e12:	f023 0303 	bic.w	r3, r3, #3
 8001e16:	1d1a      	adds	r2, r3, #4
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	659a      	str	r2, [r3, #88]	; 0x58
 8001e1c:	e007      	b.n	8001e2e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001e26:	f023 0303 	bic.w	r3, r3, #3
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3714      	adds	r7, #20
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	aaaaaaab 	.word	0xaaaaaaab
 8001e44:	080050e0 	.word	0x080050e0

08001e48 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b085      	sub	sp, #20
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e50:	2300      	movs	r3, #0
 8001e52:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e58:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	699b      	ldr	r3, [r3, #24]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d11f      	bne.n	8001ea2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	2b03      	cmp	r3, #3
 8001e66:	d855      	bhi.n	8001f14 <DMA_CheckFifoParam+0xcc>
 8001e68:	a201      	add	r2, pc, #4	; (adr r2, 8001e70 <DMA_CheckFifoParam+0x28>)
 8001e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e6e:	bf00      	nop
 8001e70:	08001e81 	.word	0x08001e81
 8001e74:	08001e93 	.word	0x08001e93
 8001e78:	08001e81 	.word	0x08001e81
 8001e7c:	08001f15 	.word	0x08001f15
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d045      	beq.n	8001f18 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e90:	e042      	b.n	8001f18 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e96:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e9a:	d13f      	bne.n	8001f1c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ea0:	e03c      	b.n	8001f1c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	699b      	ldr	r3, [r3, #24]
 8001ea6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001eaa:	d121      	bne.n	8001ef0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	2b03      	cmp	r3, #3
 8001eb0:	d836      	bhi.n	8001f20 <DMA_CheckFifoParam+0xd8>
 8001eb2:	a201      	add	r2, pc, #4	; (adr r2, 8001eb8 <DMA_CheckFifoParam+0x70>)
 8001eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eb8:	08001ec9 	.word	0x08001ec9
 8001ebc:	08001ecf 	.word	0x08001ecf
 8001ec0:	08001ec9 	.word	0x08001ec9
 8001ec4:	08001ee1 	.word	0x08001ee1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	73fb      	strb	r3, [r7, #15]
      break;
 8001ecc:	e02f      	b.n	8001f2e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d024      	beq.n	8001f24 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ede:	e021      	b.n	8001f24 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ee8:	d11e      	bne.n	8001f28 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001eee:	e01b      	b.n	8001f28 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d902      	bls.n	8001efc <DMA_CheckFifoParam+0xb4>
 8001ef6:	2b03      	cmp	r3, #3
 8001ef8:	d003      	beq.n	8001f02 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001efa:	e018      	b.n	8001f2e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	73fb      	strb	r3, [r7, #15]
      break;
 8001f00:	e015      	b.n	8001f2e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d00e      	beq.n	8001f2c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	73fb      	strb	r3, [r7, #15]
      break;
 8001f12:	e00b      	b.n	8001f2c <DMA_CheckFifoParam+0xe4>
      break;
 8001f14:	bf00      	nop
 8001f16:	e00a      	b.n	8001f2e <DMA_CheckFifoParam+0xe6>
      break;
 8001f18:	bf00      	nop
 8001f1a:	e008      	b.n	8001f2e <DMA_CheckFifoParam+0xe6>
      break;
 8001f1c:	bf00      	nop
 8001f1e:	e006      	b.n	8001f2e <DMA_CheckFifoParam+0xe6>
      break;
 8001f20:	bf00      	nop
 8001f22:	e004      	b.n	8001f2e <DMA_CheckFifoParam+0xe6>
      break;
 8001f24:	bf00      	nop
 8001f26:	e002      	b.n	8001f2e <DMA_CheckFifoParam+0xe6>
      break;   
 8001f28:	bf00      	nop
 8001f2a:	e000      	b.n	8001f2e <DMA_CheckFifoParam+0xe6>
      break;
 8001f2c:	bf00      	nop
    }
  } 
  
  return status; 
 8001f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3714      	adds	r7, #20
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b089      	sub	sp, #36	; 0x24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f46:	2300      	movs	r3, #0
 8001f48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f52:	2300      	movs	r3, #0
 8001f54:	61fb      	str	r3, [r7, #28]
 8001f56:	e165      	b.n	8002224 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f58:	2201      	movs	r2, #1
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	697a      	ldr	r2, [r7, #20]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f6c:	693a      	ldr	r2, [r7, #16]
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	f040 8154 	bne.w	800221e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d003      	beq.n	8001f86 <HAL_GPIO_Init+0x4a>
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	2b12      	cmp	r3, #18
 8001f84:	d123      	bne.n	8001fce <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	08da      	lsrs	r2, r3, #3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	3208      	adds	r2, #8
 8001f8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	f003 0307 	and.w	r3, r3, #7
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	220f      	movs	r2, #15
 8001f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa2:	43db      	mvns	r3, r3
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	691a      	ldr	r2, [r3, #16]
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	f003 0307 	and.w	r3, r3, #7
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	08da      	lsrs	r2, r3, #3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	3208      	adds	r2, #8
 8001fc8:	69b9      	ldr	r1, [r7, #24]
 8001fca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	2203      	movs	r2, #3
 8001fda:	fa02 f303 	lsl.w	r3, r2, r3
 8001fde:	43db      	mvns	r3, r3
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f003 0203 	and.w	r2, r3, #3
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff6:	69ba      	ldr	r2, [r7, #24]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	2b01      	cmp	r3, #1
 8002008:	d00b      	beq.n	8002022 <HAL_GPIO_Init+0xe6>
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	2b02      	cmp	r3, #2
 8002010:	d007      	beq.n	8002022 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002016:	2b11      	cmp	r3, #17
 8002018:	d003      	beq.n	8002022 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	2b12      	cmp	r3, #18
 8002020:	d130      	bne.n	8002084 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	2203      	movs	r2, #3
 800202e:	fa02 f303 	lsl.w	r3, r2, r3
 8002032:	43db      	mvns	r3, r3
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	4013      	ands	r3, r2
 8002038:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	68da      	ldr	r2, [r3, #12]
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	69ba      	ldr	r2, [r7, #24]
 8002048:	4313      	orrs	r3, r2
 800204a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	69ba      	ldr	r2, [r7, #24]
 8002050:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002058:	2201      	movs	r2, #1
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	43db      	mvns	r3, r3
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	4013      	ands	r3, r2
 8002066:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	091b      	lsrs	r3, r3, #4
 800206e:	f003 0201 	and.w	r2, r3, #1
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	4313      	orrs	r3, r2
 800207c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	2203      	movs	r2, #3
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	43db      	mvns	r3, r3
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	4013      	ands	r3, r2
 800209a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	689a      	ldr	r2, [r3, #8]
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	005b      	lsls	r3, r3, #1
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	f000 80ae 	beq.w	800221e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020c2:	2300      	movs	r3, #0
 80020c4:	60fb      	str	r3, [r7, #12]
 80020c6:	4b5c      	ldr	r3, [pc, #368]	; (8002238 <HAL_GPIO_Init+0x2fc>)
 80020c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ca:	4a5b      	ldr	r2, [pc, #364]	; (8002238 <HAL_GPIO_Init+0x2fc>)
 80020cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020d0:	6453      	str	r3, [r2, #68]	; 0x44
 80020d2:	4b59      	ldr	r3, [pc, #356]	; (8002238 <HAL_GPIO_Init+0x2fc>)
 80020d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020da:	60fb      	str	r3, [r7, #12]
 80020dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020de:	4a57      	ldr	r2, [pc, #348]	; (800223c <HAL_GPIO_Init+0x300>)
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	089b      	lsrs	r3, r3, #2
 80020e4:	3302      	adds	r3, #2
 80020e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	f003 0303 	and.w	r3, r3, #3
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	220f      	movs	r2, #15
 80020f6:	fa02 f303 	lsl.w	r3, r2, r3
 80020fa:	43db      	mvns	r3, r3
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	4013      	ands	r3, r2
 8002100:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a4e      	ldr	r2, [pc, #312]	; (8002240 <HAL_GPIO_Init+0x304>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d025      	beq.n	8002156 <HAL_GPIO_Init+0x21a>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a4d      	ldr	r2, [pc, #308]	; (8002244 <HAL_GPIO_Init+0x308>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d01f      	beq.n	8002152 <HAL_GPIO_Init+0x216>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a4c      	ldr	r2, [pc, #304]	; (8002248 <HAL_GPIO_Init+0x30c>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d019      	beq.n	800214e <HAL_GPIO_Init+0x212>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a4b      	ldr	r2, [pc, #300]	; (800224c <HAL_GPIO_Init+0x310>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d013      	beq.n	800214a <HAL_GPIO_Init+0x20e>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a4a      	ldr	r2, [pc, #296]	; (8002250 <HAL_GPIO_Init+0x314>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d00d      	beq.n	8002146 <HAL_GPIO_Init+0x20a>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a49      	ldr	r2, [pc, #292]	; (8002254 <HAL_GPIO_Init+0x318>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d007      	beq.n	8002142 <HAL_GPIO_Init+0x206>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a48      	ldr	r2, [pc, #288]	; (8002258 <HAL_GPIO_Init+0x31c>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d101      	bne.n	800213e <HAL_GPIO_Init+0x202>
 800213a:	2306      	movs	r3, #6
 800213c:	e00c      	b.n	8002158 <HAL_GPIO_Init+0x21c>
 800213e:	2307      	movs	r3, #7
 8002140:	e00a      	b.n	8002158 <HAL_GPIO_Init+0x21c>
 8002142:	2305      	movs	r3, #5
 8002144:	e008      	b.n	8002158 <HAL_GPIO_Init+0x21c>
 8002146:	2304      	movs	r3, #4
 8002148:	e006      	b.n	8002158 <HAL_GPIO_Init+0x21c>
 800214a:	2303      	movs	r3, #3
 800214c:	e004      	b.n	8002158 <HAL_GPIO_Init+0x21c>
 800214e:	2302      	movs	r3, #2
 8002150:	e002      	b.n	8002158 <HAL_GPIO_Init+0x21c>
 8002152:	2301      	movs	r3, #1
 8002154:	e000      	b.n	8002158 <HAL_GPIO_Init+0x21c>
 8002156:	2300      	movs	r3, #0
 8002158:	69fa      	ldr	r2, [r7, #28]
 800215a:	f002 0203 	and.w	r2, r2, #3
 800215e:	0092      	lsls	r2, r2, #2
 8002160:	4093      	lsls	r3, r2
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	4313      	orrs	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002168:	4934      	ldr	r1, [pc, #208]	; (800223c <HAL_GPIO_Init+0x300>)
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	089b      	lsrs	r3, r3, #2
 800216e:	3302      	adds	r3, #2
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002176:	4b39      	ldr	r3, [pc, #228]	; (800225c <HAL_GPIO_Init+0x320>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	43db      	mvns	r3, r3
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	4013      	ands	r3, r2
 8002184:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d003      	beq.n	800219a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002192:	69ba      	ldr	r2, [r7, #24]
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	4313      	orrs	r3, r2
 8002198:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800219a:	4a30      	ldr	r2, [pc, #192]	; (800225c <HAL_GPIO_Init+0x320>)
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80021a0:	4b2e      	ldr	r3, [pc, #184]	; (800225c <HAL_GPIO_Init+0x320>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	43db      	mvns	r3, r3
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	4013      	ands	r3, r2
 80021ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d003      	beq.n	80021c4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021c4:	4a25      	ldr	r2, [pc, #148]	; (800225c <HAL_GPIO_Init+0x320>)
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021ca:	4b24      	ldr	r3, [pc, #144]	; (800225c <HAL_GPIO_Init+0x320>)
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	43db      	mvns	r3, r3
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	4013      	ands	r3, r2
 80021d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d003      	beq.n	80021ee <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021ee:	4a1b      	ldr	r2, [pc, #108]	; (800225c <HAL_GPIO_Init+0x320>)
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021f4:	4b19      	ldr	r3, [pc, #100]	; (800225c <HAL_GPIO_Init+0x320>)
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	43db      	mvns	r3, r3
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	4013      	ands	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d003      	beq.n	8002218 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	4313      	orrs	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002218:	4a10      	ldr	r2, [pc, #64]	; (800225c <HAL_GPIO_Init+0x320>)
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	3301      	adds	r3, #1
 8002222:	61fb      	str	r3, [r7, #28]
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	2b0f      	cmp	r3, #15
 8002228:	f67f ae96 	bls.w	8001f58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800222c:	bf00      	nop
 800222e:	3724      	adds	r7, #36	; 0x24
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr
 8002238:	40023800 	.word	0x40023800
 800223c:	40013800 	.word	0x40013800
 8002240:	40020000 	.word	0x40020000
 8002244:	40020400 	.word	0x40020400
 8002248:	40020800 	.word	0x40020800
 800224c:	40020c00 	.word	0x40020c00
 8002250:	40021000 	.word	0x40021000
 8002254:	40021400 	.word	0x40021400
 8002258:	40021800 	.word	0x40021800
 800225c:	40013c00 	.word	0x40013c00

08002260 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002260:	b480      	push	{r7}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	460b      	mov	r3, r1
 800226a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	691a      	ldr	r2, [r3, #16]
 8002270:	887b      	ldrh	r3, [r7, #2]
 8002272:	4013      	ands	r3, r2
 8002274:	2b00      	cmp	r3, #0
 8002276:	d002      	beq.n	800227e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002278:	2301      	movs	r3, #1
 800227a:	73fb      	strb	r3, [r7, #15]
 800227c:	e001      	b.n	8002282 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800227e:	2300      	movs	r3, #0
 8002280:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002282:	7bfb      	ldrb	r3, [r7, #15]
}
 8002284:	4618      	mov	r0, r3
 8002286:	3714      	adds	r7, #20
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	460b      	mov	r3, r1
 800229a:	807b      	strh	r3, [r7, #2]
 800229c:	4613      	mov	r3, r2
 800229e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022a0:	787b      	ldrb	r3, [r7, #1]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d003      	beq.n	80022ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022a6:	887a      	ldrh	r2, [r7, #2]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022ac:	e003      	b.n	80022b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022ae:	887b      	ldrh	r3, [r7, #2]
 80022b0:	041a      	lsls	r2, r3, #16
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	619a      	str	r2, [r3, #24]
}
 80022b6:	bf00      	nop
 80022b8:	370c      	adds	r7, #12
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr

080022c2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022c2:	b480      	push	{r7}
 80022c4:	b083      	sub	sp, #12
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	6078      	str	r0, [r7, #4]
 80022ca:	460b      	mov	r3, r1
 80022cc:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	695a      	ldr	r2, [r3, #20]
 80022d2:	887b      	ldrh	r3, [r7, #2]
 80022d4:	401a      	ands	r2, r3
 80022d6:	887b      	ldrh	r3, [r7, #2]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d104      	bne.n	80022e6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80022dc:	887b      	ldrh	r3, [r7, #2]
 80022de:	041a      	lsls	r2, r3, #16
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80022e4:	e002      	b.n	80022ec <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80022e6:	887a      	ldrh	r2, [r7, #2]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	619a      	str	r2, [r3, #24]
}
 80022ec:	bf00      	nop
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	4603      	mov	r3, r0
 8002300:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002302:	4b08      	ldr	r3, [pc, #32]	; (8002324 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002304:	695a      	ldr	r2, [r3, #20]
 8002306:	88fb      	ldrh	r3, [r7, #6]
 8002308:	4013      	ands	r3, r2
 800230a:	2b00      	cmp	r3, #0
 800230c:	d006      	beq.n	800231c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800230e:	4a05      	ldr	r2, [pc, #20]	; (8002324 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002310:	88fb      	ldrh	r3, [r7, #6]
 8002312:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002314:	88fb      	ldrh	r3, [r7, #6]
 8002316:	4618      	mov	r0, r3
 8002318:	f002 fcdc 	bl	8004cd4 <HAL_GPIO_EXTI_Callback>
  }
}
 800231c:	bf00      	nop
 800231e:	3708      	adds	r7, #8
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	40013c00 	.word	0x40013c00

08002328 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d101      	bne.n	800233c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e0ca      	b.n	80024d2 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800233c:	4b67      	ldr	r3, [pc, #412]	; (80024dc <HAL_RCC_ClockConfig+0x1b4>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 030f 	and.w	r3, r3, #15
 8002344:	683a      	ldr	r2, [r7, #0]
 8002346:	429a      	cmp	r2, r3
 8002348:	d90c      	bls.n	8002364 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800234a:	4b64      	ldr	r3, [pc, #400]	; (80024dc <HAL_RCC_ClockConfig+0x1b4>)
 800234c:	683a      	ldr	r2, [r7, #0]
 800234e:	b2d2      	uxtb	r2, r2
 8002350:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002352:	4b62      	ldr	r3, [pc, #392]	; (80024dc <HAL_RCC_ClockConfig+0x1b4>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 030f 	and.w	r3, r3, #15
 800235a:	683a      	ldr	r2, [r7, #0]
 800235c:	429a      	cmp	r2, r3
 800235e:	d001      	beq.n	8002364 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e0b6      	b.n	80024d2 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0302 	and.w	r3, r3, #2
 800236c:	2b00      	cmp	r3, #0
 800236e:	d020      	beq.n	80023b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0304 	and.w	r3, r3, #4
 8002378:	2b00      	cmp	r3, #0
 800237a:	d005      	beq.n	8002388 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800237c:	4b58      	ldr	r3, [pc, #352]	; (80024e0 <HAL_RCC_ClockConfig+0x1b8>)
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	4a57      	ldr	r2, [pc, #348]	; (80024e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002382:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002386:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0308 	and.w	r3, r3, #8
 8002390:	2b00      	cmp	r3, #0
 8002392:	d005      	beq.n	80023a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002394:	4b52      	ldr	r3, [pc, #328]	; (80024e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	4a51      	ldr	r2, [pc, #324]	; (80024e0 <HAL_RCC_ClockConfig+0x1b8>)
 800239a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800239e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023a0:	4b4f      	ldr	r3, [pc, #316]	; (80024e0 <HAL_RCC_ClockConfig+0x1b8>)
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	494c      	ldr	r1, [pc, #304]	; (80024e0 <HAL_RCC_ClockConfig+0x1b8>)
 80023ae:	4313      	orrs	r3, r2
 80023b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0301 	and.w	r3, r3, #1
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d044      	beq.n	8002448 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d107      	bne.n	80023d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023c6:	4b46      	ldr	r3, [pc, #280]	; (80024e0 <HAL_RCC_ClockConfig+0x1b8>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d119      	bne.n	8002406 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e07d      	b.n	80024d2 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d003      	beq.n	80023e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023e2:	2b03      	cmp	r3, #3
 80023e4:	d107      	bne.n	80023f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023e6:	4b3e      	ldr	r3, [pc, #248]	; (80024e0 <HAL_RCC_ClockConfig+0x1b8>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d109      	bne.n	8002406 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e06d      	b.n	80024d2 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023f6:	4b3a      	ldr	r3, [pc, #232]	; (80024e0 <HAL_RCC_ClockConfig+0x1b8>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d101      	bne.n	8002406 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e065      	b.n	80024d2 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002406:	4b36      	ldr	r3, [pc, #216]	; (80024e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	f023 0203 	bic.w	r2, r3, #3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	4933      	ldr	r1, [pc, #204]	; (80024e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002414:	4313      	orrs	r3, r2
 8002416:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002418:	f7fe fcd2 	bl	8000dc0 <HAL_GetTick>
 800241c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800241e:	e00a      	b.n	8002436 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002420:	f7fe fcce 	bl	8000dc0 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	f241 3288 	movw	r2, #5000	; 0x1388
 800242e:	4293      	cmp	r3, r2
 8002430:	d901      	bls.n	8002436 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e04d      	b.n	80024d2 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002436:	4b2a      	ldr	r3, [pc, #168]	; (80024e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f003 020c 	and.w	r2, r3, #12
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	429a      	cmp	r2, r3
 8002446:	d1eb      	bne.n	8002420 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002448:	4b24      	ldr	r3, [pc, #144]	; (80024dc <HAL_RCC_ClockConfig+0x1b4>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 030f 	and.w	r3, r3, #15
 8002450:	683a      	ldr	r2, [r7, #0]
 8002452:	429a      	cmp	r2, r3
 8002454:	d20c      	bcs.n	8002470 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002456:	4b21      	ldr	r3, [pc, #132]	; (80024dc <HAL_RCC_ClockConfig+0x1b4>)
 8002458:	683a      	ldr	r2, [r7, #0]
 800245a:	b2d2      	uxtb	r2, r2
 800245c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800245e:	4b1f      	ldr	r3, [pc, #124]	; (80024dc <HAL_RCC_ClockConfig+0x1b4>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 030f 	and.w	r3, r3, #15
 8002466:	683a      	ldr	r2, [r7, #0]
 8002468:	429a      	cmp	r2, r3
 800246a:	d001      	beq.n	8002470 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e030      	b.n	80024d2 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0304 	and.w	r3, r3, #4
 8002478:	2b00      	cmp	r3, #0
 800247a:	d008      	beq.n	800248e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800247c:	4b18      	ldr	r3, [pc, #96]	; (80024e0 <HAL_RCC_ClockConfig+0x1b8>)
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	4915      	ldr	r1, [pc, #84]	; (80024e0 <HAL_RCC_ClockConfig+0x1b8>)
 800248a:	4313      	orrs	r3, r2
 800248c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0308 	and.w	r3, r3, #8
 8002496:	2b00      	cmp	r3, #0
 8002498:	d009      	beq.n	80024ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800249a:	4b11      	ldr	r3, [pc, #68]	; (80024e0 <HAL_RCC_ClockConfig+0x1b8>)
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	691b      	ldr	r3, [r3, #16]
 80024a6:	00db      	lsls	r3, r3, #3
 80024a8:	490d      	ldr	r1, [pc, #52]	; (80024e0 <HAL_RCC_ClockConfig+0x1b8>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024ae:	f000 f81d 	bl	80024ec <HAL_RCC_GetSysClockFreq>
 80024b2:	4601      	mov	r1, r0
 80024b4:	4b0a      	ldr	r3, [pc, #40]	; (80024e0 <HAL_RCC_ClockConfig+0x1b8>)
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	091b      	lsrs	r3, r3, #4
 80024ba:	f003 030f 	and.w	r3, r3, #15
 80024be:	4a09      	ldr	r2, [pc, #36]	; (80024e4 <HAL_RCC_ClockConfig+0x1bc>)
 80024c0:	5cd3      	ldrb	r3, [r2, r3]
 80024c2:	fa21 f303 	lsr.w	r3, r1, r3
 80024c6:	4a08      	ldr	r2, [pc, #32]	; (80024e8 <HAL_RCC_ClockConfig+0x1c0>)
 80024c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80024ca:	2000      	movs	r0, #0
 80024cc:	f7fe fc34 	bl	8000d38 <HAL_InitTick>

  return HAL_OK;
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3710      	adds	r7, #16
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	40023c00 	.word	0x40023c00
 80024e0:	40023800 	.word	0x40023800
 80024e4:	080050e8 	.word	0x080050e8
 80024e8:	20000008 	.word	0x20000008

080024ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024ee:	b085      	sub	sp, #20
 80024f0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80024f2:	2300      	movs	r3, #0
 80024f4:	607b      	str	r3, [r7, #4]
 80024f6:	2300      	movs	r3, #0
 80024f8:	60fb      	str	r3, [r7, #12]
 80024fa:	2300      	movs	r3, #0
 80024fc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80024fe:	2300      	movs	r3, #0
 8002500:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002502:	4b50      	ldr	r3, [pc, #320]	; (8002644 <HAL_RCC_GetSysClockFreq+0x158>)
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	f003 030c 	and.w	r3, r3, #12
 800250a:	2b04      	cmp	r3, #4
 800250c:	d007      	beq.n	800251e <HAL_RCC_GetSysClockFreq+0x32>
 800250e:	2b08      	cmp	r3, #8
 8002510:	d008      	beq.n	8002524 <HAL_RCC_GetSysClockFreq+0x38>
 8002512:	2b00      	cmp	r3, #0
 8002514:	f040 808d 	bne.w	8002632 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002518:	4b4b      	ldr	r3, [pc, #300]	; (8002648 <HAL_RCC_GetSysClockFreq+0x15c>)
 800251a:	60bb      	str	r3, [r7, #8]
       break;
 800251c:	e08c      	b.n	8002638 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800251e:	4b4b      	ldr	r3, [pc, #300]	; (800264c <HAL_RCC_GetSysClockFreq+0x160>)
 8002520:	60bb      	str	r3, [r7, #8]
      break;
 8002522:	e089      	b.n	8002638 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002524:	4b47      	ldr	r3, [pc, #284]	; (8002644 <HAL_RCC_GetSysClockFreq+0x158>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800252c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800252e:	4b45      	ldr	r3, [pc, #276]	; (8002644 <HAL_RCC_GetSysClockFreq+0x158>)
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d023      	beq.n	8002582 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800253a:	4b42      	ldr	r3, [pc, #264]	; (8002644 <HAL_RCC_GetSysClockFreq+0x158>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	099b      	lsrs	r3, r3, #6
 8002540:	f04f 0400 	mov.w	r4, #0
 8002544:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002548:	f04f 0200 	mov.w	r2, #0
 800254c:	ea03 0501 	and.w	r5, r3, r1
 8002550:	ea04 0602 	and.w	r6, r4, r2
 8002554:	4a3d      	ldr	r2, [pc, #244]	; (800264c <HAL_RCC_GetSysClockFreq+0x160>)
 8002556:	fb02 f106 	mul.w	r1, r2, r6
 800255a:	2200      	movs	r2, #0
 800255c:	fb02 f205 	mul.w	r2, r2, r5
 8002560:	440a      	add	r2, r1
 8002562:	493a      	ldr	r1, [pc, #232]	; (800264c <HAL_RCC_GetSysClockFreq+0x160>)
 8002564:	fba5 0101 	umull	r0, r1, r5, r1
 8002568:	1853      	adds	r3, r2, r1
 800256a:	4619      	mov	r1, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f04f 0400 	mov.w	r4, #0
 8002572:	461a      	mov	r2, r3
 8002574:	4623      	mov	r3, r4
 8002576:	f7fe fa3d 	bl	80009f4 <__aeabi_uldivmod>
 800257a:	4603      	mov	r3, r0
 800257c:	460c      	mov	r4, r1
 800257e:	60fb      	str	r3, [r7, #12]
 8002580:	e049      	b.n	8002616 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002582:	4b30      	ldr	r3, [pc, #192]	; (8002644 <HAL_RCC_GetSysClockFreq+0x158>)
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	099b      	lsrs	r3, r3, #6
 8002588:	f04f 0400 	mov.w	r4, #0
 800258c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002590:	f04f 0200 	mov.w	r2, #0
 8002594:	ea03 0501 	and.w	r5, r3, r1
 8002598:	ea04 0602 	and.w	r6, r4, r2
 800259c:	4629      	mov	r1, r5
 800259e:	4632      	mov	r2, r6
 80025a0:	f04f 0300 	mov.w	r3, #0
 80025a4:	f04f 0400 	mov.w	r4, #0
 80025a8:	0154      	lsls	r4, r2, #5
 80025aa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80025ae:	014b      	lsls	r3, r1, #5
 80025b0:	4619      	mov	r1, r3
 80025b2:	4622      	mov	r2, r4
 80025b4:	1b49      	subs	r1, r1, r5
 80025b6:	eb62 0206 	sbc.w	r2, r2, r6
 80025ba:	f04f 0300 	mov.w	r3, #0
 80025be:	f04f 0400 	mov.w	r4, #0
 80025c2:	0194      	lsls	r4, r2, #6
 80025c4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80025c8:	018b      	lsls	r3, r1, #6
 80025ca:	1a5b      	subs	r3, r3, r1
 80025cc:	eb64 0402 	sbc.w	r4, r4, r2
 80025d0:	f04f 0100 	mov.w	r1, #0
 80025d4:	f04f 0200 	mov.w	r2, #0
 80025d8:	00e2      	lsls	r2, r4, #3
 80025da:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80025de:	00d9      	lsls	r1, r3, #3
 80025e0:	460b      	mov	r3, r1
 80025e2:	4614      	mov	r4, r2
 80025e4:	195b      	adds	r3, r3, r5
 80025e6:	eb44 0406 	adc.w	r4, r4, r6
 80025ea:	f04f 0100 	mov.w	r1, #0
 80025ee:	f04f 0200 	mov.w	r2, #0
 80025f2:	02a2      	lsls	r2, r4, #10
 80025f4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80025f8:	0299      	lsls	r1, r3, #10
 80025fa:	460b      	mov	r3, r1
 80025fc:	4614      	mov	r4, r2
 80025fe:	4618      	mov	r0, r3
 8002600:	4621      	mov	r1, r4
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f04f 0400 	mov.w	r4, #0
 8002608:	461a      	mov	r2, r3
 800260a:	4623      	mov	r3, r4
 800260c:	f7fe f9f2 	bl	80009f4 <__aeabi_uldivmod>
 8002610:	4603      	mov	r3, r0
 8002612:	460c      	mov	r4, r1
 8002614:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002616:	4b0b      	ldr	r3, [pc, #44]	; (8002644 <HAL_RCC_GetSysClockFreq+0x158>)
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	0c1b      	lsrs	r3, r3, #16
 800261c:	f003 0303 	and.w	r3, r3, #3
 8002620:	3301      	adds	r3, #1
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002626:	68fa      	ldr	r2, [r7, #12]
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	fbb2 f3f3 	udiv	r3, r2, r3
 800262e:	60bb      	str	r3, [r7, #8]
      break;
 8002630:	e002      	b.n	8002638 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002632:	4b05      	ldr	r3, [pc, #20]	; (8002648 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002634:	60bb      	str	r3, [r7, #8]
      break;
 8002636:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002638:	68bb      	ldr	r3, [r7, #8]
}
 800263a:	4618      	mov	r0, r3
 800263c:	3714      	adds	r7, #20
 800263e:	46bd      	mov	sp, r7
 8002640:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002642:	bf00      	nop
 8002644:	40023800 	.word	0x40023800
 8002648:	00f42400 	.word	0x00f42400
 800264c:	017d7840 	.word	0x017d7840

08002650 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002654:	4b03      	ldr	r3, [pc, #12]	; (8002664 <HAL_RCC_GetHCLKFreq+0x14>)
 8002656:	681b      	ldr	r3, [r3, #0]
}
 8002658:	4618      	mov	r0, r3
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	20000008 	.word	0x20000008

08002668 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800266c:	f7ff fff0 	bl	8002650 <HAL_RCC_GetHCLKFreq>
 8002670:	4601      	mov	r1, r0
 8002672:	4b05      	ldr	r3, [pc, #20]	; (8002688 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	0a9b      	lsrs	r3, r3, #10
 8002678:	f003 0307 	and.w	r3, r3, #7
 800267c:	4a03      	ldr	r2, [pc, #12]	; (800268c <HAL_RCC_GetPCLK1Freq+0x24>)
 800267e:	5cd3      	ldrb	r3, [r2, r3]
 8002680:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002684:	4618      	mov	r0, r3
 8002686:	bd80      	pop	{r7, pc}
 8002688:	40023800 	.word	0x40023800
 800268c:	080050f8 	.word	0x080050f8

08002690 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002694:	f7ff ffdc 	bl	8002650 <HAL_RCC_GetHCLKFreq>
 8002698:	4601      	mov	r1, r0
 800269a:	4b05      	ldr	r3, [pc, #20]	; (80026b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	0b5b      	lsrs	r3, r3, #13
 80026a0:	f003 0307 	and.w	r3, r3, #7
 80026a4:	4a03      	ldr	r2, [pc, #12]	; (80026b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026a6:	5cd3      	ldrb	r3, [r2, r3]
 80026a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	40023800 	.word	0x40023800
 80026b4:	080050f8 	.word	0x080050f8

080026b8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b086      	sub	sp, #24
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026c0:	2300      	movs	r3, #0
 80026c2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0301 	and.w	r3, r3, #1
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d075      	beq.n	80027bc <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80026d0:	4ba2      	ldr	r3, [pc, #648]	; (800295c <HAL_RCC_OscConfig+0x2a4>)
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f003 030c 	and.w	r3, r3, #12
 80026d8:	2b04      	cmp	r3, #4
 80026da:	d00c      	beq.n	80026f6 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026dc:	4b9f      	ldr	r3, [pc, #636]	; (800295c <HAL_RCC_OscConfig+0x2a4>)
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80026e4:	2b08      	cmp	r3, #8
 80026e6:	d112      	bne.n	800270e <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026e8:	4b9c      	ldr	r3, [pc, #624]	; (800295c <HAL_RCC_OscConfig+0x2a4>)
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026f4:	d10b      	bne.n	800270e <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026f6:	4b99      	ldr	r3, [pc, #612]	; (800295c <HAL_RCC_OscConfig+0x2a4>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d05b      	beq.n	80027ba <HAL_RCC_OscConfig+0x102>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d157      	bne.n	80027ba <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e20b      	b.n	8002b26 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002716:	d106      	bne.n	8002726 <HAL_RCC_OscConfig+0x6e>
 8002718:	4b90      	ldr	r3, [pc, #576]	; (800295c <HAL_RCC_OscConfig+0x2a4>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a8f      	ldr	r2, [pc, #572]	; (800295c <HAL_RCC_OscConfig+0x2a4>)
 800271e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002722:	6013      	str	r3, [r2, #0]
 8002724:	e01d      	b.n	8002762 <HAL_RCC_OscConfig+0xaa>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800272e:	d10c      	bne.n	800274a <HAL_RCC_OscConfig+0x92>
 8002730:	4b8a      	ldr	r3, [pc, #552]	; (800295c <HAL_RCC_OscConfig+0x2a4>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a89      	ldr	r2, [pc, #548]	; (800295c <HAL_RCC_OscConfig+0x2a4>)
 8002736:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800273a:	6013      	str	r3, [r2, #0]
 800273c:	4b87      	ldr	r3, [pc, #540]	; (800295c <HAL_RCC_OscConfig+0x2a4>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a86      	ldr	r2, [pc, #536]	; (800295c <HAL_RCC_OscConfig+0x2a4>)
 8002742:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002746:	6013      	str	r3, [r2, #0]
 8002748:	e00b      	b.n	8002762 <HAL_RCC_OscConfig+0xaa>
 800274a:	4b84      	ldr	r3, [pc, #528]	; (800295c <HAL_RCC_OscConfig+0x2a4>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a83      	ldr	r2, [pc, #524]	; (800295c <HAL_RCC_OscConfig+0x2a4>)
 8002750:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002754:	6013      	str	r3, [r2, #0]
 8002756:	4b81      	ldr	r3, [pc, #516]	; (800295c <HAL_RCC_OscConfig+0x2a4>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a80      	ldr	r2, [pc, #512]	; (800295c <HAL_RCC_OscConfig+0x2a4>)
 800275c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002760:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d013      	beq.n	8002792 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800276a:	f7fe fb29 	bl	8000dc0 <HAL_GetTick>
 800276e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002770:	e008      	b.n	8002784 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002772:	f7fe fb25 	bl	8000dc0 <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	2b64      	cmp	r3, #100	; 0x64
 800277e:	d901      	bls.n	8002784 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e1d0      	b.n	8002b26 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002784:	4b75      	ldr	r3, [pc, #468]	; (800295c <HAL_RCC_OscConfig+0x2a4>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d0f0      	beq.n	8002772 <HAL_RCC_OscConfig+0xba>
 8002790:	e014      	b.n	80027bc <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002792:	f7fe fb15 	bl	8000dc0 <HAL_GetTick>
 8002796:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002798:	e008      	b.n	80027ac <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800279a:	f7fe fb11 	bl	8000dc0 <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	2b64      	cmp	r3, #100	; 0x64
 80027a6:	d901      	bls.n	80027ac <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	e1bc      	b.n	8002b26 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ac:	4b6b      	ldr	r3, [pc, #428]	; (800295c <HAL_RCC_OscConfig+0x2a4>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d1f0      	bne.n	800279a <HAL_RCC_OscConfig+0xe2>
 80027b8:	e000      	b.n	80027bc <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027ba:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0302 	and.w	r3, r3, #2
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d063      	beq.n	8002890 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80027c8:	4b64      	ldr	r3, [pc, #400]	; (800295c <HAL_RCC_OscConfig+0x2a4>)
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	f003 030c 	and.w	r3, r3, #12
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d00b      	beq.n	80027ec <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027d4:	4b61      	ldr	r3, [pc, #388]	; (800295c <HAL_RCC_OscConfig+0x2a4>)
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80027dc:	2b08      	cmp	r3, #8
 80027de:	d11c      	bne.n	800281a <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027e0:	4b5e      	ldr	r3, [pc, #376]	; (800295c <HAL_RCC_OscConfig+0x2a4>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d116      	bne.n	800281a <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027ec:	4b5b      	ldr	r3, [pc, #364]	; (800295c <HAL_RCC_OscConfig+0x2a4>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0302 	and.w	r3, r3, #2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d005      	beq.n	8002804 <HAL_RCC_OscConfig+0x14c>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d001      	beq.n	8002804 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e190      	b.n	8002b26 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002804:	4b55      	ldr	r3, [pc, #340]	; (800295c <HAL_RCC_OscConfig+0x2a4>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	691b      	ldr	r3, [r3, #16]
 8002810:	00db      	lsls	r3, r3, #3
 8002812:	4952      	ldr	r1, [pc, #328]	; (800295c <HAL_RCC_OscConfig+0x2a4>)
 8002814:	4313      	orrs	r3, r2
 8002816:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002818:	e03a      	b.n	8002890 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d020      	beq.n	8002864 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002822:	4b4f      	ldr	r3, [pc, #316]	; (8002960 <HAL_RCC_OscConfig+0x2a8>)
 8002824:	2201      	movs	r2, #1
 8002826:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002828:	f7fe faca 	bl	8000dc0 <HAL_GetTick>
 800282c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800282e:	e008      	b.n	8002842 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002830:	f7fe fac6 	bl	8000dc0 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b02      	cmp	r3, #2
 800283c:	d901      	bls.n	8002842 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e171      	b.n	8002b26 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002842:	4b46      	ldr	r3, [pc, #280]	; (800295c <HAL_RCC_OscConfig+0x2a4>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0302 	and.w	r3, r3, #2
 800284a:	2b00      	cmp	r3, #0
 800284c:	d0f0      	beq.n	8002830 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800284e:	4b43      	ldr	r3, [pc, #268]	; (800295c <HAL_RCC_OscConfig+0x2a4>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	691b      	ldr	r3, [r3, #16]
 800285a:	00db      	lsls	r3, r3, #3
 800285c:	493f      	ldr	r1, [pc, #252]	; (800295c <HAL_RCC_OscConfig+0x2a4>)
 800285e:	4313      	orrs	r3, r2
 8002860:	600b      	str	r3, [r1, #0]
 8002862:	e015      	b.n	8002890 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002864:	4b3e      	ldr	r3, [pc, #248]	; (8002960 <HAL_RCC_OscConfig+0x2a8>)
 8002866:	2200      	movs	r2, #0
 8002868:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800286a:	f7fe faa9 	bl	8000dc0 <HAL_GetTick>
 800286e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002870:	e008      	b.n	8002884 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002872:	f7fe faa5 	bl	8000dc0 <HAL_GetTick>
 8002876:	4602      	mov	r2, r0
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	2b02      	cmp	r3, #2
 800287e:	d901      	bls.n	8002884 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	e150      	b.n	8002b26 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002884:	4b35      	ldr	r3, [pc, #212]	; (800295c <HAL_RCC_OscConfig+0x2a4>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0302 	and.w	r3, r3, #2
 800288c:	2b00      	cmp	r3, #0
 800288e:	d1f0      	bne.n	8002872 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0308 	and.w	r3, r3, #8
 8002898:	2b00      	cmp	r3, #0
 800289a:	d030      	beq.n	80028fe <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	695b      	ldr	r3, [r3, #20]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d016      	beq.n	80028d2 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028a4:	4b2f      	ldr	r3, [pc, #188]	; (8002964 <HAL_RCC_OscConfig+0x2ac>)
 80028a6:	2201      	movs	r2, #1
 80028a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028aa:	f7fe fa89 	bl	8000dc0 <HAL_GetTick>
 80028ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028b0:	e008      	b.n	80028c4 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028b2:	f7fe fa85 	bl	8000dc0 <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d901      	bls.n	80028c4 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e130      	b.n	8002b26 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028c4:	4b25      	ldr	r3, [pc, #148]	; (800295c <HAL_RCC_OscConfig+0x2a4>)
 80028c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028c8:	f003 0302 	and.w	r3, r3, #2
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d0f0      	beq.n	80028b2 <HAL_RCC_OscConfig+0x1fa>
 80028d0:	e015      	b.n	80028fe <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028d2:	4b24      	ldr	r3, [pc, #144]	; (8002964 <HAL_RCC_OscConfig+0x2ac>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028d8:	f7fe fa72 	bl	8000dc0 <HAL_GetTick>
 80028dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028de:	e008      	b.n	80028f2 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028e0:	f7fe fa6e 	bl	8000dc0 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e119      	b.n	8002b26 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028f2:	4b1a      	ldr	r3, [pc, #104]	; (800295c <HAL_RCC_OscConfig+0x2a4>)
 80028f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d1f0      	bne.n	80028e0 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0304 	and.w	r3, r3, #4
 8002906:	2b00      	cmp	r3, #0
 8002908:	f000 809f 	beq.w	8002a4a <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 800290c:	2300      	movs	r3, #0
 800290e:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002910:	4b12      	ldr	r3, [pc, #72]	; (800295c <HAL_RCC_OscConfig+0x2a4>)
 8002912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002914:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d10f      	bne.n	800293c <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800291c:	2300      	movs	r3, #0
 800291e:	60fb      	str	r3, [r7, #12]
 8002920:	4b0e      	ldr	r3, [pc, #56]	; (800295c <HAL_RCC_OscConfig+0x2a4>)
 8002922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002924:	4a0d      	ldr	r2, [pc, #52]	; (800295c <HAL_RCC_OscConfig+0x2a4>)
 8002926:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800292a:	6413      	str	r3, [r2, #64]	; 0x40
 800292c:	4b0b      	ldr	r3, [pc, #44]	; (800295c <HAL_RCC_OscConfig+0x2a4>)
 800292e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002930:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002934:	60fb      	str	r3, [r7, #12]
 8002936:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002938:	2301      	movs	r3, #1
 800293a:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800293c:	4b0a      	ldr	r3, [pc, #40]	; (8002968 <HAL_RCC_OscConfig+0x2b0>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002944:	2b00      	cmp	r3, #0
 8002946:	d120      	bne.n	800298a <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002948:	4b07      	ldr	r3, [pc, #28]	; (8002968 <HAL_RCC_OscConfig+0x2b0>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a06      	ldr	r2, [pc, #24]	; (8002968 <HAL_RCC_OscConfig+0x2b0>)
 800294e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002952:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002954:	f7fe fa34 	bl	8000dc0 <HAL_GetTick>
 8002958:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800295a:	e010      	b.n	800297e <HAL_RCC_OscConfig+0x2c6>
 800295c:	40023800 	.word	0x40023800
 8002960:	42470000 	.word	0x42470000
 8002964:	42470e80 	.word	0x42470e80
 8002968:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800296c:	f7fe fa28 	bl	8000dc0 <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	2b02      	cmp	r3, #2
 8002978:	d901      	bls.n	800297e <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e0d3      	b.n	8002b26 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800297e:	4b6c      	ldr	r3, [pc, #432]	; (8002b30 <HAL_RCC_OscConfig+0x478>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002986:	2b00      	cmp	r3, #0
 8002988:	d0f0      	beq.n	800296c <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	2b01      	cmp	r3, #1
 8002990:	d106      	bne.n	80029a0 <HAL_RCC_OscConfig+0x2e8>
 8002992:	4b68      	ldr	r3, [pc, #416]	; (8002b34 <HAL_RCC_OscConfig+0x47c>)
 8002994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002996:	4a67      	ldr	r2, [pc, #412]	; (8002b34 <HAL_RCC_OscConfig+0x47c>)
 8002998:	f043 0301 	orr.w	r3, r3, #1
 800299c:	6713      	str	r3, [r2, #112]	; 0x70
 800299e:	e01c      	b.n	80029da <HAL_RCC_OscConfig+0x322>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	2b05      	cmp	r3, #5
 80029a6:	d10c      	bne.n	80029c2 <HAL_RCC_OscConfig+0x30a>
 80029a8:	4b62      	ldr	r3, [pc, #392]	; (8002b34 <HAL_RCC_OscConfig+0x47c>)
 80029aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ac:	4a61      	ldr	r2, [pc, #388]	; (8002b34 <HAL_RCC_OscConfig+0x47c>)
 80029ae:	f043 0304 	orr.w	r3, r3, #4
 80029b2:	6713      	str	r3, [r2, #112]	; 0x70
 80029b4:	4b5f      	ldr	r3, [pc, #380]	; (8002b34 <HAL_RCC_OscConfig+0x47c>)
 80029b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b8:	4a5e      	ldr	r2, [pc, #376]	; (8002b34 <HAL_RCC_OscConfig+0x47c>)
 80029ba:	f043 0301 	orr.w	r3, r3, #1
 80029be:	6713      	str	r3, [r2, #112]	; 0x70
 80029c0:	e00b      	b.n	80029da <HAL_RCC_OscConfig+0x322>
 80029c2:	4b5c      	ldr	r3, [pc, #368]	; (8002b34 <HAL_RCC_OscConfig+0x47c>)
 80029c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c6:	4a5b      	ldr	r2, [pc, #364]	; (8002b34 <HAL_RCC_OscConfig+0x47c>)
 80029c8:	f023 0301 	bic.w	r3, r3, #1
 80029cc:	6713      	str	r3, [r2, #112]	; 0x70
 80029ce:	4b59      	ldr	r3, [pc, #356]	; (8002b34 <HAL_RCC_OscConfig+0x47c>)
 80029d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d2:	4a58      	ldr	r2, [pc, #352]	; (8002b34 <HAL_RCC_OscConfig+0x47c>)
 80029d4:	f023 0304 	bic.w	r3, r3, #4
 80029d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d015      	beq.n	8002a0e <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029e2:	f7fe f9ed 	bl	8000dc0 <HAL_GetTick>
 80029e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029e8:	e00a      	b.n	8002a00 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029ea:	f7fe f9e9 	bl	8000dc0 <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d901      	bls.n	8002a00 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e092      	b.n	8002b26 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a00:	4b4c      	ldr	r3, [pc, #304]	; (8002b34 <HAL_RCC_OscConfig+0x47c>)
 8002a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a04:	f003 0302 	and.w	r3, r3, #2
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d0ee      	beq.n	80029ea <HAL_RCC_OscConfig+0x332>
 8002a0c:	e014      	b.n	8002a38 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a0e:	f7fe f9d7 	bl	8000dc0 <HAL_GetTick>
 8002a12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a14:	e00a      	b.n	8002a2c <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a16:	f7fe f9d3 	bl	8000dc0 <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d901      	bls.n	8002a2c <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e07c      	b.n	8002b26 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a2c:	4b41      	ldr	r3, [pc, #260]	; (8002b34 <HAL_RCC_OscConfig+0x47c>)
 8002a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a30:	f003 0302 	and.w	r3, r3, #2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d1ee      	bne.n	8002a16 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a38:	7dfb      	ldrb	r3, [r7, #23]
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d105      	bne.n	8002a4a <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a3e:	4b3d      	ldr	r3, [pc, #244]	; (8002b34 <HAL_RCC_OscConfig+0x47c>)
 8002a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a42:	4a3c      	ldr	r2, [pc, #240]	; (8002b34 <HAL_RCC_OscConfig+0x47c>)
 8002a44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a48:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d068      	beq.n	8002b24 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a52:	4b38      	ldr	r3, [pc, #224]	; (8002b34 <HAL_RCC_OscConfig+0x47c>)
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f003 030c 	and.w	r3, r3, #12
 8002a5a:	2b08      	cmp	r3, #8
 8002a5c:	d060      	beq.n	8002b20 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d145      	bne.n	8002af2 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a66:	4b34      	ldr	r3, [pc, #208]	; (8002b38 <HAL_RCC_OscConfig+0x480>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a6c:	f7fe f9a8 	bl	8000dc0 <HAL_GetTick>
 8002a70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a72:	e008      	b.n	8002a86 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a74:	f7fe f9a4 	bl	8000dc0 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e04f      	b.n	8002b26 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a86:	4b2b      	ldr	r3, [pc, #172]	; (8002b34 <HAL_RCC_OscConfig+0x47c>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d1f0      	bne.n	8002a74 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	69da      	ldr	r2, [r3, #28]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a1b      	ldr	r3, [r3, #32]
 8002a9a:	431a      	orrs	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa0:	019b      	lsls	r3, r3, #6
 8002aa2:	431a      	orrs	r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa8:	085b      	lsrs	r3, r3, #1
 8002aaa:	3b01      	subs	r3, #1
 8002aac:	041b      	lsls	r3, r3, #16
 8002aae:	431a      	orrs	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab4:	061b      	lsls	r3, r3, #24
 8002ab6:	431a      	orrs	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abc:	071b      	lsls	r3, r3, #28
 8002abe:	491d      	ldr	r1, [pc, #116]	; (8002b34 <HAL_RCC_OscConfig+0x47c>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ac4:	4b1c      	ldr	r3, [pc, #112]	; (8002b38 <HAL_RCC_OscConfig+0x480>)
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aca:	f7fe f979 	bl	8000dc0 <HAL_GetTick>
 8002ace:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ad0:	e008      	b.n	8002ae4 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ad2:	f7fe f975 	bl	8000dc0 <HAL_GetTick>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d901      	bls.n	8002ae4 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	e020      	b.n	8002b26 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ae4:	4b13      	ldr	r3, [pc, #76]	; (8002b34 <HAL_RCC_OscConfig+0x47c>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d0f0      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x41a>
 8002af0:	e018      	b.n	8002b24 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002af2:	4b11      	ldr	r3, [pc, #68]	; (8002b38 <HAL_RCC_OscConfig+0x480>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af8:	f7fe f962 	bl	8000dc0 <HAL_GetTick>
 8002afc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002afe:	e008      	b.n	8002b12 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b00:	f7fe f95e 	bl	8000dc0 <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e009      	b.n	8002b26 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b12:	4b08      	ldr	r3, [pc, #32]	; (8002b34 <HAL_RCC_OscConfig+0x47c>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d1f0      	bne.n	8002b00 <HAL_RCC_OscConfig+0x448>
 8002b1e:	e001      	b.n	8002b24 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e000      	b.n	8002b26 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3718      	adds	r7, #24
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	40007000 	.word	0x40007000
 8002b34:	40023800 	.word	0x40023800
 8002b38:	42470060 	.word	0x42470060

08002b3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d101      	bne.n	8002b4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e03f      	b.n	8002bce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d106      	bne.n	8002b68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f002 f98a 	bl	8004e7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2224      	movs	r2, #36	; 0x24
 8002b6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	68da      	ldr	r2, [r3, #12]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f000 fb93 	bl	80032ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	691a      	ldr	r2, [r3, #16]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	695a      	ldr	r2, [r3, #20]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ba4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68da      	ldr	r2, [r3, #12]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002bb4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2220      	movs	r2, #32
 8002bc0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2220      	movs	r2, #32
 8002bc8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3708      	adds	r7, #8
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	b088      	sub	sp, #32
 8002bda:	af02      	add	r7, sp, #8
 8002bdc:	60f8      	str	r0, [r7, #12]
 8002bde:	60b9      	str	r1, [r7, #8]
 8002be0:	603b      	str	r3, [r7, #0]
 8002be2:	4613      	mov	r3, r2
 8002be4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002be6:	2300      	movs	r3, #0
 8002be8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	2b20      	cmp	r3, #32
 8002bf4:	f040 8083 	bne.w	8002cfe <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d002      	beq.n	8002c04 <HAL_UART_Transmit+0x2e>
 8002bfe:	88fb      	ldrh	r3, [r7, #6]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d101      	bne.n	8002c08 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e07b      	b.n	8002d00 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d101      	bne.n	8002c16 <HAL_UART_Transmit+0x40>
 8002c12:	2302      	movs	r3, #2
 8002c14:	e074      	b.n	8002d00 <HAL_UART_Transmit+0x12a>
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2201      	movs	r2, #1
 8002c1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2200      	movs	r2, #0
 8002c22:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2221      	movs	r2, #33	; 0x21
 8002c28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002c2c:	f7fe f8c8 	bl	8000dc0 <HAL_GetTick>
 8002c30:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	88fa      	ldrh	r2, [r7, #6]
 8002c36:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	88fa      	ldrh	r2, [r7, #6]
 8002c3c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002c3e:	e042      	b.n	8002cc6 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	3b01      	subs	r3, #1
 8002c48:	b29a      	uxth	r2, r3
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c56:	d122      	bne.n	8002c9e <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	9300      	str	r3, [sp, #0]
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	2180      	movs	r1, #128	; 0x80
 8002c62:	68f8      	ldr	r0, [r7, #12]
 8002c64:	f000 f9b6 	bl	8002fd4 <UART_WaitOnFlagUntilTimeout>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e046      	b.n	8002d00 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	881b      	ldrh	r3, [r3, #0]
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c84:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d103      	bne.n	8002c96 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	3302      	adds	r3, #2
 8002c92:	60bb      	str	r3, [r7, #8]
 8002c94:	e017      	b.n	8002cc6 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	3301      	adds	r3, #1
 8002c9a:	60bb      	str	r3, [r7, #8]
 8002c9c:	e013      	b.n	8002cc6 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	9300      	str	r3, [sp, #0]
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	2180      	movs	r1, #128	; 0x80
 8002ca8:	68f8      	ldr	r0, [r7, #12]
 8002caa:	f000 f993 	bl	8002fd4 <UART_WaitOnFlagUntilTimeout>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d001      	beq.n	8002cb8 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e023      	b.n	8002d00 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	1c5a      	adds	r2, r3, #1
 8002cbc:	60ba      	str	r2, [r7, #8]
 8002cbe:	781a      	ldrb	r2, [r3, #0]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d1b7      	bne.n	8002c40 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	9300      	str	r3, [sp, #0]
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	2140      	movs	r1, #64	; 0x40
 8002cda:	68f8      	ldr	r0, [r7, #12]
 8002cdc:	f000 f97a 	bl	8002fd4 <UART_WaitOnFlagUntilTimeout>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e00a      	b.n	8002d00 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2220      	movs	r2, #32
 8002cee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	e000      	b.n	8002d00 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002cfe:	2302      	movs	r3, #2
  }
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3718      	adds	r7, #24
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b085      	sub	sp, #20
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	60b9      	str	r1, [r7, #8]
 8002d12:	4613      	mov	r3, r2
 8002d14:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	2b20      	cmp	r3, #32
 8002d20:	d140      	bne.n	8002da4 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d002      	beq.n	8002d2e <HAL_UART_Receive_IT+0x26>
 8002d28:	88fb      	ldrh	r3, [r7, #6]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d101      	bne.n	8002d32 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e039      	b.n	8002da6 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d101      	bne.n	8002d40 <HAL_UART_Receive_IT+0x38>
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	e032      	b.n	8002da6 <HAL_UART_Receive_IT+0x9e>
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	68ba      	ldr	r2, [r7, #8]
 8002d4c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	88fa      	ldrh	r2, [r7, #6]
 8002d52:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	88fa      	ldrh	r2, [r7, #6]
 8002d58:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2222      	movs	r2, #34	; 0x22
 8002d64:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	68da      	ldr	r2, [r3, #12]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d7e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	695a      	ldr	r2, [r3, #20]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f042 0201 	orr.w	r2, r2, #1
 8002d8e:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	68da      	ldr	r2, [r3, #12]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f042 0220 	orr.w	r2, r2, #32
 8002d9e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002da0:	2300      	movs	r3, #0
 8002da2:	e000      	b.n	8002da6 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002da4:	2302      	movs	r3, #2
  }
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3714      	adds	r7, #20
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
	...

08002db4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b088      	sub	sp, #32
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	695b      	ldr	r3, [r3, #20]
 8002dd2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	f003 030f 	and.w	r3, r3, #15
 8002de2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d10d      	bne.n	8002e06 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	f003 0320 	and.w	r3, r3, #32
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d008      	beq.n	8002e06 <HAL_UART_IRQHandler+0x52>
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	f003 0320 	and.w	r3, r3, #32
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d003      	beq.n	8002e06 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f000 f9d2 	bl	80031a8 <UART_Receive_IT>
      return;
 8002e04:	e0cc      	b.n	8002fa0 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	f000 80ab 	beq.w	8002f64 <HAL_UART_IRQHandler+0x1b0>
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	f003 0301 	and.w	r3, r3, #1
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d105      	bne.n	8002e24 <HAL_UART_IRQHandler+0x70>
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	f000 80a0 	beq.w	8002f64 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d00a      	beq.n	8002e44 <HAL_UART_IRQHandler+0x90>
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d005      	beq.n	8002e44 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e3c:	f043 0201 	orr.w	r2, r3, #1
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	f003 0304 	and.w	r3, r3, #4
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00a      	beq.n	8002e64 <HAL_UART_IRQHandler+0xb0>
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	f003 0301 	and.w	r3, r3, #1
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d005      	beq.n	8002e64 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e5c:	f043 0202 	orr.w	r2, r3, #2
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	f003 0302 	and.w	r3, r3, #2
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d00a      	beq.n	8002e84 <HAL_UART_IRQHandler+0xd0>
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	f003 0301 	and.w	r3, r3, #1
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d005      	beq.n	8002e84 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e7c:	f043 0204 	orr.w	r2, r3, #4
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	f003 0308 	and.w	r3, r3, #8
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d00a      	beq.n	8002ea4 <HAL_UART_IRQHandler+0xf0>
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	f003 0301 	and.w	r3, r3, #1
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d005      	beq.n	8002ea4 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e9c:	f043 0208 	orr.w	r2, r3, #8
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d078      	beq.n	8002f9e <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	f003 0320 	and.w	r3, r3, #32
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d007      	beq.n	8002ec6 <HAL_UART_IRQHandler+0x112>
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	f003 0320 	and.w	r3, r3, #32
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d002      	beq.n	8002ec6 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f000 f971 	bl	80031a8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	695b      	ldr	r3, [r3, #20]
 8002ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed0:	2b40      	cmp	r3, #64	; 0x40
 8002ed2:	bf0c      	ite	eq
 8002ed4:	2301      	moveq	r3, #1
 8002ed6:	2300      	movne	r3, #0
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ee0:	f003 0308 	and.w	r3, r3, #8
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d102      	bne.n	8002eee <HAL_UART_IRQHandler+0x13a>
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d031      	beq.n	8002f52 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f000 f8ba 	bl	8003068 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	695b      	ldr	r3, [r3, #20]
 8002efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002efe:	2b40      	cmp	r3, #64	; 0x40
 8002f00:	d123      	bne.n	8002f4a <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	695a      	ldr	r2, [r3, #20]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f10:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d013      	beq.n	8002f42 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f1e:	4a22      	ldr	r2, [pc, #136]	; (8002fa8 <HAL_UART_IRQHandler+0x1f4>)
 8002f20:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7fe fd7e 	bl	8001a28 <HAL_DMA_Abort_IT>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d016      	beq.n	8002f60 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002f3c:	4610      	mov	r0, r2
 8002f3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f40:	e00e      	b.n	8002f60 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f000 f83c 	bl	8002fc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f48:	e00a      	b.n	8002f60 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f000 f838 	bl	8002fc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f50:	e006      	b.n	8002f60 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 f834 	bl	8002fc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002f5e:	e01e      	b.n	8002f9e <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f60:	bf00      	nop
    return;
 8002f62:	e01c      	b.n	8002f9e <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d008      	beq.n	8002f80 <HAL_UART_IRQHandler+0x1cc>
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d003      	beq.n	8002f80 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f000 f8a7 	bl	80030cc <UART_Transmit_IT>
    return;
 8002f7e:	e00f      	b.n	8002fa0 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d00a      	beq.n	8002fa0 <HAL_UART_IRQHandler+0x1ec>
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d005      	beq.n	8002fa0 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f000 f8ef 	bl	8003178 <UART_EndTransmit_IT>
    return;
 8002f9a:	bf00      	nop
 8002f9c:	e000      	b.n	8002fa0 <HAL_UART_IRQHandler+0x1ec>
    return;
 8002f9e:	bf00      	nop
  }
}
 8002fa0:	3720      	adds	r7, #32
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	080030a5 	.word	0x080030a5

08002fac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002fb4:	bf00      	nop
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	603b      	str	r3, [r7, #0]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fe4:	e02c      	b.n	8003040 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fec:	d028      	beq.n	8003040 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d007      	beq.n	8003004 <UART_WaitOnFlagUntilTimeout+0x30>
 8002ff4:	f7fd fee4 	bl	8000dc0 <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	69ba      	ldr	r2, [r7, #24]
 8003000:	429a      	cmp	r2, r3
 8003002:	d21d      	bcs.n	8003040 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68da      	ldr	r2, [r3, #12]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003012:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	695a      	ldr	r2, [r3, #20]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f022 0201 	bic.w	r2, r2, #1
 8003022:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2220      	movs	r2, #32
 8003028:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2220      	movs	r2, #32
 8003030:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e00f      	b.n	8003060 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	4013      	ands	r3, r2
 800304a:	68ba      	ldr	r2, [r7, #8]
 800304c:	429a      	cmp	r2, r3
 800304e:	bf0c      	ite	eq
 8003050:	2301      	moveq	r3, #1
 8003052:	2300      	movne	r3, #0
 8003054:	b2db      	uxtb	r3, r3
 8003056:	461a      	mov	r2, r3
 8003058:	79fb      	ldrb	r3, [r7, #7]
 800305a:	429a      	cmp	r2, r3
 800305c:	d0c3      	beq.n	8002fe6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800305e:	2300      	movs	r3, #0
}
 8003060:	4618      	mov	r0, r3
 8003062:	3710      	adds	r7, #16
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}

08003068 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	68da      	ldr	r2, [r3, #12]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800307e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	695a      	ldr	r2, [r3, #20]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f022 0201 	bic.w	r2, r2, #1
 800308e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2220      	movs	r2, #32
 8003094:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003098:	bf00      	nop
 800309a:	370c      	adds	r7, #12
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2200      	movs	r2, #0
 80030b6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80030be:	68f8      	ldr	r0, [r7, #12]
 80030c0:	f7ff ff7e 	bl	8002fc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80030c4:	bf00      	nop
 80030c6:	3710      	adds	r7, #16
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b085      	sub	sp, #20
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	2b21      	cmp	r3, #33	; 0x21
 80030de:	d144      	bne.n	800316a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030e8:	d11a      	bne.n	8003120 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a1b      	ldr	r3, [r3, #32]
 80030ee:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	881b      	ldrh	r3, [r3, #0]
 80030f4:	461a      	mov	r2, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030fe:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	691b      	ldr	r3, [r3, #16]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d105      	bne.n	8003114 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a1b      	ldr	r3, [r3, #32]
 800310c:	1c9a      	adds	r2, r3, #2
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	621a      	str	r2, [r3, #32]
 8003112:	e00e      	b.n	8003132 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6a1b      	ldr	r3, [r3, #32]
 8003118:	1c5a      	adds	r2, r3, #1
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	621a      	str	r2, [r3, #32]
 800311e:	e008      	b.n	8003132 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a1b      	ldr	r3, [r3, #32]
 8003124:	1c59      	adds	r1, r3, #1
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	6211      	str	r1, [r2, #32]
 800312a:	781a      	ldrb	r2, [r3, #0]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003136:	b29b      	uxth	r3, r3
 8003138:	3b01      	subs	r3, #1
 800313a:	b29b      	uxth	r3, r3
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	4619      	mov	r1, r3
 8003140:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003142:	2b00      	cmp	r3, #0
 8003144:	d10f      	bne.n	8003166 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	68da      	ldr	r2, [r3, #12]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003154:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	68da      	ldr	r2, [r3, #12]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003164:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003166:	2300      	movs	r3, #0
 8003168:	e000      	b.n	800316c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800316a:	2302      	movs	r3, #2
  }
}
 800316c:	4618      	mov	r0, r3
 800316e:	3714      	adds	r7, #20
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	68da      	ldr	r2, [r3, #12]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800318e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2220      	movs	r2, #32
 8003194:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f7ff ff07 	bl	8002fac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800319e:	2300      	movs	r3, #0
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3708      	adds	r7, #8
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	2b22      	cmp	r3, #34	; 0x22
 80031ba:	d171      	bne.n	80032a0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031c4:	d123      	bne.n	800320e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ca:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	691b      	ldr	r3, [r3, #16]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d10e      	bne.n	80031f2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	b29b      	uxth	r3, r3
 80031dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031e0:	b29a      	uxth	r2, r3
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ea:	1c9a      	adds	r2, r3, #2
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	629a      	str	r2, [r3, #40]	; 0x28
 80031f0:	e029      	b.n	8003246 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	b29a      	uxth	r2, r3
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003206:	1c5a      	adds	r2, r3, #1
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	629a      	str	r2, [r3, #40]	; 0x28
 800320c:	e01b      	b.n	8003246 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	691b      	ldr	r3, [r3, #16]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d10a      	bne.n	800322c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	6858      	ldr	r0, [r3, #4]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003220:	1c59      	adds	r1, r3, #1
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	6291      	str	r1, [r2, #40]	; 0x28
 8003226:	b2c2      	uxtb	r2, r0
 8003228:	701a      	strb	r2, [r3, #0]
 800322a:	e00c      	b.n	8003246 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	b2da      	uxtb	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003238:	1c58      	adds	r0, r3, #1
 800323a:	6879      	ldr	r1, [r7, #4]
 800323c:	6288      	str	r0, [r1, #40]	; 0x28
 800323e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003242:	b2d2      	uxtb	r2, r2
 8003244:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800324a:	b29b      	uxth	r3, r3
 800324c:	3b01      	subs	r3, #1
 800324e:	b29b      	uxth	r3, r3
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	4619      	mov	r1, r3
 8003254:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003256:	2b00      	cmp	r3, #0
 8003258:	d120      	bne.n	800329c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	68da      	ldr	r2, [r3, #12]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f022 0220 	bic.w	r2, r2, #32
 8003268:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68da      	ldr	r2, [r3, #12]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003278:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	695a      	ldr	r2, [r3, #20]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f022 0201 	bic.w	r2, r2, #1
 8003288:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2220      	movs	r2, #32
 800328e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f000 fa14 	bl	80036c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003298:	2300      	movs	r3, #0
 800329a:	e002      	b.n	80032a2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800329c:	2300      	movs	r3, #0
 800329e:	e000      	b.n	80032a2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80032a0:	2302      	movs	r3, #2
  }
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3710      	adds	r7, #16
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
	...

080032ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032ac:	b5b0      	push	{r4, r5, r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	68da      	ldr	r2, [r3, #12]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	430a      	orrs	r2, r1
 80032c8:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	689a      	ldr	r2, [r3, #8]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	431a      	orrs	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	695b      	ldr	r3, [r3, #20]
 80032d8:	431a      	orrs	r2, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	69db      	ldr	r3, [r3, #28]
 80032de:	4313      	orrs	r3, r2
 80032e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80032ec:	f023 030c 	bic.w	r3, r3, #12
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	6812      	ldr	r2, [r2, #0]
 80032f4:	68f9      	ldr	r1, [r7, #12]
 80032f6:	430b      	orrs	r3, r1
 80032f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	695b      	ldr	r3, [r3, #20]
 8003300:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	699a      	ldr	r2, [r3, #24]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	430a      	orrs	r2, r1
 800330e:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	69db      	ldr	r3, [r3, #28]
 8003314:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003318:	f040 80e4 	bne.w	80034e4 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4aab      	ldr	r2, [pc, #684]	; (80035d0 <UART_SetConfig+0x324>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d004      	beq.n	8003330 <UART_SetConfig+0x84>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4aaa      	ldr	r2, [pc, #680]	; (80035d4 <UART_SetConfig+0x328>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d16c      	bne.n	800340a <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003330:	f7ff f9ae 	bl	8002690 <HAL_RCC_GetPCLK2Freq>
 8003334:	4602      	mov	r2, r0
 8003336:	4613      	mov	r3, r2
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	4413      	add	r3, r2
 800333c:	009a      	lsls	r2, r3, #2
 800333e:	441a      	add	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	005b      	lsls	r3, r3, #1
 8003346:	fbb2 f3f3 	udiv	r3, r2, r3
 800334a:	4aa3      	ldr	r2, [pc, #652]	; (80035d8 <UART_SetConfig+0x32c>)
 800334c:	fba2 2303 	umull	r2, r3, r2, r3
 8003350:	095b      	lsrs	r3, r3, #5
 8003352:	011c      	lsls	r4, r3, #4
 8003354:	f7ff f99c 	bl	8002690 <HAL_RCC_GetPCLK2Freq>
 8003358:	4602      	mov	r2, r0
 800335a:	4613      	mov	r3, r2
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	4413      	add	r3, r2
 8003360:	009a      	lsls	r2, r3, #2
 8003362:	441a      	add	r2, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	005b      	lsls	r3, r3, #1
 800336a:	fbb2 f5f3 	udiv	r5, r2, r3
 800336e:	f7ff f98f 	bl	8002690 <HAL_RCC_GetPCLK2Freq>
 8003372:	4602      	mov	r2, r0
 8003374:	4613      	mov	r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	4413      	add	r3, r2
 800337a:	009a      	lsls	r2, r3, #2
 800337c:	441a      	add	r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	005b      	lsls	r3, r3, #1
 8003384:	fbb2 f3f3 	udiv	r3, r2, r3
 8003388:	4a93      	ldr	r2, [pc, #588]	; (80035d8 <UART_SetConfig+0x32c>)
 800338a:	fba2 2303 	umull	r2, r3, r2, r3
 800338e:	095b      	lsrs	r3, r3, #5
 8003390:	2264      	movs	r2, #100	; 0x64
 8003392:	fb02 f303 	mul.w	r3, r2, r3
 8003396:	1aeb      	subs	r3, r5, r3
 8003398:	00db      	lsls	r3, r3, #3
 800339a:	3332      	adds	r3, #50	; 0x32
 800339c:	4a8e      	ldr	r2, [pc, #568]	; (80035d8 <UART_SetConfig+0x32c>)
 800339e:	fba2 2303 	umull	r2, r3, r2, r3
 80033a2:	095b      	lsrs	r3, r3, #5
 80033a4:	005b      	lsls	r3, r3, #1
 80033a6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80033aa:	441c      	add	r4, r3
 80033ac:	f7ff f970 	bl	8002690 <HAL_RCC_GetPCLK2Freq>
 80033b0:	4602      	mov	r2, r0
 80033b2:	4613      	mov	r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	4413      	add	r3, r2
 80033b8:	009a      	lsls	r2, r3, #2
 80033ba:	441a      	add	r2, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	005b      	lsls	r3, r3, #1
 80033c2:	fbb2 f5f3 	udiv	r5, r2, r3
 80033c6:	f7ff f963 	bl	8002690 <HAL_RCC_GetPCLK2Freq>
 80033ca:	4602      	mov	r2, r0
 80033cc:	4613      	mov	r3, r2
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	4413      	add	r3, r2
 80033d2:	009a      	lsls	r2, r3, #2
 80033d4:	441a      	add	r2, r3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	005b      	lsls	r3, r3, #1
 80033dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80033e0:	4a7d      	ldr	r2, [pc, #500]	; (80035d8 <UART_SetConfig+0x32c>)
 80033e2:	fba2 2303 	umull	r2, r3, r2, r3
 80033e6:	095b      	lsrs	r3, r3, #5
 80033e8:	2264      	movs	r2, #100	; 0x64
 80033ea:	fb02 f303 	mul.w	r3, r2, r3
 80033ee:	1aeb      	subs	r3, r5, r3
 80033f0:	00db      	lsls	r3, r3, #3
 80033f2:	3332      	adds	r3, #50	; 0x32
 80033f4:	4a78      	ldr	r2, [pc, #480]	; (80035d8 <UART_SetConfig+0x32c>)
 80033f6:	fba2 2303 	umull	r2, r3, r2, r3
 80033fa:	095b      	lsrs	r3, r3, #5
 80033fc:	f003 0207 	and.w	r2, r3, #7
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4422      	add	r2, r4
 8003406:	609a      	str	r2, [r3, #8]
 8003408:	e154      	b.n	80036b4 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800340a:	f7ff f92d 	bl	8002668 <HAL_RCC_GetPCLK1Freq>
 800340e:	4602      	mov	r2, r0
 8003410:	4613      	mov	r3, r2
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	4413      	add	r3, r2
 8003416:	009a      	lsls	r2, r3, #2
 8003418:	441a      	add	r2, r3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	005b      	lsls	r3, r3, #1
 8003420:	fbb2 f3f3 	udiv	r3, r2, r3
 8003424:	4a6c      	ldr	r2, [pc, #432]	; (80035d8 <UART_SetConfig+0x32c>)
 8003426:	fba2 2303 	umull	r2, r3, r2, r3
 800342a:	095b      	lsrs	r3, r3, #5
 800342c:	011c      	lsls	r4, r3, #4
 800342e:	f7ff f91b 	bl	8002668 <HAL_RCC_GetPCLK1Freq>
 8003432:	4602      	mov	r2, r0
 8003434:	4613      	mov	r3, r2
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	4413      	add	r3, r2
 800343a:	009a      	lsls	r2, r3, #2
 800343c:	441a      	add	r2, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	005b      	lsls	r3, r3, #1
 8003444:	fbb2 f5f3 	udiv	r5, r2, r3
 8003448:	f7ff f90e 	bl	8002668 <HAL_RCC_GetPCLK1Freq>
 800344c:	4602      	mov	r2, r0
 800344e:	4613      	mov	r3, r2
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	4413      	add	r3, r2
 8003454:	009a      	lsls	r2, r3, #2
 8003456:	441a      	add	r2, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	005b      	lsls	r3, r3, #1
 800345e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003462:	4a5d      	ldr	r2, [pc, #372]	; (80035d8 <UART_SetConfig+0x32c>)
 8003464:	fba2 2303 	umull	r2, r3, r2, r3
 8003468:	095b      	lsrs	r3, r3, #5
 800346a:	2264      	movs	r2, #100	; 0x64
 800346c:	fb02 f303 	mul.w	r3, r2, r3
 8003470:	1aeb      	subs	r3, r5, r3
 8003472:	00db      	lsls	r3, r3, #3
 8003474:	3332      	adds	r3, #50	; 0x32
 8003476:	4a58      	ldr	r2, [pc, #352]	; (80035d8 <UART_SetConfig+0x32c>)
 8003478:	fba2 2303 	umull	r2, r3, r2, r3
 800347c:	095b      	lsrs	r3, r3, #5
 800347e:	005b      	lsls	r3, r3, #1
 8003480:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003484:	441c      	add	r4, r3
 8003486:	f7ff f8ef 	bl	8002668 <HAL_RCC_GetPCLK1Freq>
 800348a:	4602      	mov	r2, r0
 800348c:	4613      	mov	r3, r2
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	4413      	add	r3, r2
 8003492:	009a      	lsls	r2, r3, #2
 8003494:	441a      	add	r2, r3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	005b      	lsls	r3, r3, #1
 800349c:	fbb2 f5f3 	udiv	r5, r2, r3
 80034a0:	f7ff f8e2 	bl	8002668 <HAL_RCC_GetPCLK1Freq>
 80034a4:	4602      	mov	r2, r0
 80034a6:	4613      	mov	r3, r2
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	4413      	add	r3, r2
 80034ac:	009a      	lsls	r2, r3, #2
 80034ae:	441a      	add	r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	005b      	lsls	r3, r3, #1
 80034b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ba:	4a47      	ldr	r2, [pc, #284]	; (80035d8 <UART_SetConfig+0x32c>)
 80034bc:	fba2 2303 	umull	r2, r3, r2, r3
 80034c0:	095b      	lsrs	r3, r3, #5
 80034c2:	2264      	movs	r2, #100	; 0x64
 80034c4:	fb02 f303 	mul.w	r3, r2, r3
 80034c8:	1aeb      	subs	r3, r5, r3
 80034ca:	00db      	lsls	r3, r3, #3
 80034cc:	3332      	adds	r3, #50	; 0x32
 80034ce:	4a42      	ldr	r2, [pc, #264]	; (80035d8 <UART_SetConfig+0x32c>)
 80034d0:	fba2 2303 	umull	r2, r3, r2, r3
 80034d4:	095b      	lsrs	r3, r3, #5
 80034d6:	f003 0207 	and.w	r2, r3, #7
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4422      	add	r2, r4
 80034e0:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 80034e2:	e0e7      	b.n	80036b4 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a39      	ldr	r2, [pc, #228]	; (80035d0 <UART_SetConfig+0x324>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d004      	beq.n	80034f8 <UART_SetConfig+0x24c>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a38      	ldr	r2, [pc, #224]	; (80035d4 <UART_SetConfig+0x328>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d171      	bne.n	80035dc <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80034f8:	f7ff f8ca 	bl	8002690 <HAL_RCC_GetPCLK2Freq>
 80034fc:	4602      	mov	r2, r0
 80034fe:	4613      	mov	r3, r2
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	4413      	add	r3, r2
 8003504:	009a      	lsls	r2, r3, #2
 8003506:	441a      	add	r2, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003512:	4a31      	ldr	r2, [pc, #196]	; (80035d8 <UART_SetConfig+0x32c>)
 8003514:	fba2 2303 	umull	r2, r3, r2, r3
 8003518:	095b      	lsrs	r3, r3, #5
 800351a:	011c      	lsls	r4, r3, #4
 800351c:	f7ff f8b8 	bl	8002690 <HAL_RCC_GetPCLK2Freq>
 8003520:	4602      	mov	r2, r0
 8003522:	4613      	mov	r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	4413      	add	r3, r2
 8003528:	009a      	lsls	r2, r3, #2
 800352a:	441a      	add	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	fbb2 f5f3 	udiv	r5, r2, r3
 8003536:	f7ff f8ab 	bl	8002690 <HAL_RCC_GetPCLK2Freq>
 800353a:	4602      	mov	r2, r0
 800353c:	4613      	mov	r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	4413      	add	r3, r2
 8003542:	009a      	lsls	r2, r3, #2
 8003544:	441a      	add	r2, r3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003550:	4a21      	ldr	r2, [pc, #132]	; (80035d8 <UART_SetConfig+0x32c>)
 8003552:	fba2 2303 	umull	r2, r3, r2, r3
 8003556:	095b      	lsrs	r3, r3, #5
 8003558:	2264      	movs	r2, #100	; 0x64
 800355a:	fb02 f303 	mul.w	r3, r2, r3
 800355e:	1aeb      	subs	r3, r5, r3
 8003560:	011b      	lsls	r3, r3, #4
 8003562:	3332      	adds	r3, #50	; 0x32
 8003564:	4a1c      	ldr	r2, [pc, #112]	; (80035d8 <UART_SetConfig+0x32c>)
 8003566:	fba2 2303 	umull	r2, r3, r2, r3
 800356a:	095b      	lsrs	r3, r3, #5
 800356c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003570:	441c      	add	r4, r3
 8003572:	f7ff f88d 	bl	8002690 <HAL_RCC_GetPCLK2Freq>
 8003576:	4602      	mov	r2, r0
 8003578:	4613      	mov	r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	4413      	add	r3, r2
 800357e:	009a      	lsls	r2, r3, #2
 8003580:	441a      	add	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	fbb2 f5f3 	udiv	r5, r2, r3
 800358c:	f7ff f880 	bl	8002690 <HAL_RCC_GetPCLK2Freq>
 8003590:	4602      	mov	r2, r0
 8003592:	4613      	mov	r3, r2
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	4413      	add	r3, r2
 8003598:	009a      	lsls	r2, r3, #2
 800359a:	441a      	add	r2, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80035a6:	4a0c      	ldr	r2, [pc, #48]	; (80035d8 <UART_SetConfig+0x32c>)
 80035a8:	fba2 2303 	umull	r2, r3, r2, r3
 80035ac:	095b      	lsrs	r3, r3, #5
 80035ae:	2264      	movs	r2, #100	; 0x64
 80035b0:	fb02 f303 	mul.w	r3, r2, r3
 80035b4:	1aeb      	subs	r3, r5, r3
 80035b6:	011b      	lsls	r3, r3, #4
 80035b8:	3332      	adds	r3, #50	; 0x32
 80035ba:	4a07      	ldr	r2, [pc, #28]	; (80035d8 <UART_SetConfig+0x32c>)
 80035bc:	fba2 2303 	umull	r2, r3, r2, r3
 80035c0:	095b      	lsrs	r3, r3, #5
 80035c2:	f003 020f 	and.w	r2, r3, #15
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4422      	add	r2, r4
 80035cc:	609a      	str	r2, [r3, #8]
 80035ce:	e071      	b.n	80036b4 <UART_SetConfig+0x408>
 80035d0:	40011000 	.word	0x40011000
 80035d4:	40011400 	.word	0x40011400
 80035d8:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80035dc:	f7ff f844 	bl	8002668 <HAL_RCC_GetPCLK1Freq>
 80035e0:	4602      	mov	r2, r0
 80035e2:	4613      	mov	r3, r2
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	4413      	add	r3, r2
 80035e8:	009a      	lsls	r2, r3, #2
 80035ea:	441a      	add	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80035f6:	4a31      	ldr	r2, [pc, #196]	; (80036bc <UART_SetConfig+0x410>)
 80035f8:	fba2 2303 	umull	r2, r3, r2, r3
 80035fc:	095b      	lsrs	r3, r3, #5
 80035fe:	011c      	lsls	r4, r3, #4
 8003600:	f7ff f832 	bl	8002668 <HAL_RCC_GetPCLK1Freq>
 8003604:	4602      	mov	r2, r0
 8003606:	4613      	mov	r3, r2
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	4413      	add	r3, r2
 800360c:	009a      	lsls	r2, r3, #2
 800360e:	441a      	add	r2, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	fbb2 f5f3 	udiv	r5, r2, r3
 800361a:	f7ff f825 	bl	8002668 <HAL_RCC_GetPCLK1Freq>
 800361e:	4602      	mov	r2, r0
 8003620:	4613      	mov	r3, r2
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	4413      	add	r3, r2
 8003626:	009a      	lsls	r2, r3, #2
 8003628:	441a      	add	r2, r3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	fbb2 f3f3 	udiv	r3, r2, r3
 8003634:	4a21      	ldr	r2, [pc, #132]	; (80036bc <UART_SetConfig+0x410>)
 8003636:	fba2 2303 	umull	r2, r3, r2, r3
 800363a:	095b      	lsrs	r3, r3, #5
 800363c:	2264      	movs	r2, #100	; 0x64
 800363e:	fb02 f303 	mul.w	r3, r2, r3
 8003642:	1aeb      	subs	r3, r5, r3
 8003644:	011b      	lsls	r3, r3, #4
 8003646:	3332      	adds	r3, #50	; 0x32
 8003648:	4a1c      	ldr	r2, [pc, #112]	; (80036bc <UART_SetConfig+0x410>)
 800364a:	fba2 2303 	umull	r2, r3, r2, r3
 800364e:	095b      	lsrs	r3, r3, #5
 8003650:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003654:	441c      	add	r4, r3
 8003656:	f7ff f807 	bl	8002668 <HAL_RCC_GetPCLK1Freq>
 800365a:	4602      	mov	r2, r0
 800365c:	4613      	mov	r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	4413      	add	r3, r2
 8003662:	009a      	lsls	r2, r3, #2
 8003664:	441a      	add	r2, r3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	fbb2 f5f3 	udiv	r5, r2, r3
 8003670:	f7fe fffa 	bl	8002668 <HAL_RCC_GetPCLK1Freq>
 8003674:	4602      	mov	r2, r0
 8003676:	4613      	mov	r3, r2
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	4413      	add	r3, r2
 800367c:	009a      	lsls	r2, r3, #2
 800367e:	441a      	add	r2, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	fbb2 f3f3 	udiv	r3, r2, r3
 800368a:	4a0c      	ldr	r2, [pc, #48]	; (80036bc <UART_SetConfig+0x410>)
 800368c:	fba2 2303 	umull	r2, r3, r2, r3
 8003690:	095b      	lsrs	r3, r3, #5
 8003692:	2264      	movs	r2, #100	; 0x64
 8003694:	fb02 f303 	mul.w	r3, r2, r3
 8003698:	1aeb      	subs	r3, r5, r3
 800369a:	011b      	lsls	r3, r3, #4
 800369c:	3332      	adds	r3, #50	; 0x32
 800369e:	4a07      	ldr	r2, [pc, #28]	; (80036bc <UART_SetConfig+0x410>)
 80036a0:	fba2 2303 	umull	r2, r3, r2, r3
 80036a4:	095b      	lsrs	r3, r3, #5
 80036a6:	f003 020f 	and.w	r2, r3, #15
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4422      	add	r2, r4
 80036b0:	609a      	str	r2, [r3, #8]
}
 80036b2:	e7ff      	b.n	80036b4 <UART_SetConfig+0x408>
 80036b4:	bf00      	nop
 80036b6:	3710      	adds	r7, #16
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bdb0      	pop	{r4, r5, r7, pc}
 80036bc:	51eb851f 	.word	0x51eb851f

080036c0 <HAL_UART_RxCpltCallback>:
uint32_t total_time[30] = {0};
uint8_t timerIndex = 0;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80036c0:	b590      	push	{r4, r7, lr}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
	if(huart->Instance==UART8) {
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a38      	ldr	r2, [pc, #224]	; (80037b0 <HAL_UART_RxCpltCallback+0xf0>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d165      	bne.n	800379e <HAL_UART_RxCpltCallback+0xde>
		if (TEST_MODE)
 80036d2:	4b38      	ldr	r3, [pc, #224]	; (80037b4 <HAL_UART_RxCpltCallback+0xf4>)
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d022      	beq.n	8003720 <HAL_UART_RxCpltCallback+0x60>
		{
			HAL_GPIO_WritePin(GPIOE, testPinOut_Pin, GPIO_PIN_SET);
 80036da:	2201      	movs	r2, #1
 80036dc:	2102      	movs	r1, #2
 80036de:	4836      	ldr	r0, [pc, #216]	; (80037b8 <HAL_UART_RxCpltCallback+0xf8>)
 80036e0:	f7fe fdd6 	bl	8002290 <HAL_GPIO_WritePin>
			end_time = HAL_GetTick();
 80036e4:	f7fd fb6c 	bl	8000dc0 <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	4b34      	ldr	r3, [pc, #208]	; (80037bc <HAL_UART_RxCpltCallback+0xfc>)
 80036ec:	601a      	str	r2, [r3, #0]
			total_time[timerIndex] = end_time - start_time;
 80036ee:	4b33      	ldr	r3, [pc, #204]	; (80037bc <HAL_UART_RxCpltCallback+0xfc>)
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	4b33      	ldr	r3, [pc, #204]	; (80037c0 <HAL_UART_RxCpltCallback+0x100>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4933      	ldr	r1, [pc, #204]	; (80037c4 <HAL_UART_RxCpltCallback+0x104>)
 80036f8:	7809      	ldrb	r1, [r1, #0]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	4a32      	ldr	r2, [pc, #200]	; (80037c8 <HAL_UART_RxCpltCallback+0x108>)
 80036fe:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			timerIndex++;
 8003702:	4b30      	ldr	r3, [pc, #192]	; (80037c4 <HAL_UART_RxCpltCallback+0x104>)
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	3301      	adds	r3, #1
 8003708:	b2da      	uxtb	r2, r3
 800370a:	4b2e      	ldr	r3, [pc, #184]	; (80037c4 <HAL_UART_RxCpltCallback+0x104>)
 800370c:	701a      	strb	r2, [r3, #0]
			end_time = 0;
 800370e:	4b2b      	ldr	r3, [pc, #172]	; (80037bc <HAL_UART_RxCpltCallback+0xfc>)
 8003710:	2200      	movs	r2, #0
 8003712:	601a      	str	r2, [r3, #0]
			start_time = 0;
 8003714:	4b2a      	ldr	r3, [pc, #168]	; (80037c0 <HAL_UART_RxCpltCallback+0x100>)
 8003716:	2200      	movs	r2, #0
 8003718:	601a      	str	r2, [r3, #0]
			TEST_MODE = 0;
 800371a:	4b26      	ldr	r3, [pc, #152]	; (80037b4 <HAL_UART_RxCpltCallback+0xf4>)
 800371c:	2200      	movs	r2, #0
 800371e:	701a      	strb	r2, [r3, #0]
		}

		if (recieved_data.info_in.board_add == Display1HWAdd)
 8003720:	4b2a      	ldr	r3, [pc, #168]	; (80037cc <HAL_UART_RxCpltCallback+0x10c>)
 8003722:	785b      	ldrb	r3, [r3, #1]
 8003724:	2b32      	cmp	r3, #50	; 0x32
 8003726:	d103      	bne.n	8003730 <HAL_UART_RxCpltCallback+0x70>
			desiredDispValue1 = recieved_data.info_in.state;
 8003728:	4b28      	ldr	r3, [pc, #160]	; (80037cc <HAL_UART_RxCpltCallback+0x10c>)
 800372a:	789a      	ldrb	r2, [r3, #2]
 800372c:	4b28      	ldr	r3, [pc, #160]	; (80037d0 <HAL_UART_RxCpltCallback+0x110>)
 800372e:	701a      	strb	r2, [r3, #0]

		if (recieved_data.info_in.board_add == Display2HWAdd)
 8003730:	4b26      	ldr	r3, [pc, #152]	; (80037cc <HAL_UART_RxCpltCallback+0x10c>)
 8003732:	785b      	ldrb	r3, [r3, #1]
 8003734:	2b35      	cmp	r3, #53	; 0x35
 8003736:	d103      	bne.n	8003740 <HAL_UART_RxCpltCallback+0x80>
			desiredDispValue2 = recieved_data.info_in.state;
 8003738:	4b24      	ldr	r3, [pc, #144]	; (80037cc <HAL_UART_RxCpltCallback+0x10c>)
 800373a:	789a      	ldrb	r2, [r3, #2]
 800373c:	4b25      	ldr	r3, [pc, #148]	; (80037d4 <HAL_UART_RxCpltCallback+0x114>)
 800373e:	701a      	strb	r2, [r3, #0]

		if (recieved_data.info_in.board_add == Dial1HWAdd)
 8003740:	4b22      	ldr	r3, [pc, #136]	; (80037cc <HAL_UART_RxCpltCallback+0x10c>)
 8003742:	785b      	ldrb	r3, [r3, #1]
 8003744:	2b36      	cmp	r3, #54	; 0x36
 8003746:	d112      	bne.n	800376e <HAL_UART_RxCpltCallback+0xae>
			desiredDialState1 = 5.3 * recieved_data.info_in.state;
 8003748:	4b20      	ldr	r3, [pc, #128]	; (80037cc <HAL_UART_RxCpltCallback+0x10c>)
 800374a:	789b      	ldrb	r3, [r3, #2]
 800374c:	4618      	mov	r0, r3
 800374e:	f7fc feb5 	bl	80004bc <__aeabi_i2d>
 8003752:	a315      	add	r3, pc, #84	; (adr r3, 80037a8 <HAL_UART_RxCpltCallback+0xe8>)
 8003754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003758:	f7fc ff1a 	bl	8000590 <__aeabi_dmul>
 800375c:	4603      	mov	r3, r0
 800375e:	460c      	mov	r4, r1
 8003760:	4618      	mov	r0, r3
 8003762:	4621      	mov	r1, r4
 8003764:	f7fd f926 	bl	80009b4 <__aeabi_d2uiz>
 8003768:	4602      	mov	r2, r0
 800376a:	4b1b      	ldr	r3, [pc, #108]	; (80037d8 <HAL_UART_RxCpltCallback+0x118>)
 800376c:	601a      	str	r2, [r3, #0]

		if (recieved_data.info_in.board_add == Dial2HWAdd)
 800376e:	4b17      	ldr	r3, [pc, #92]	; (80037cc <HAL_UART_RxCpltCallback+0x10c>)
 8003770:	785b      	ldrb	r3, [r3, #1]
 8003772:	2b37      	cmp	r3, #55	; 0x37
 8003774:	d114      	bne.n	80037a0 <HAL_UART_RxCpltCallback+0xe0>
			desiredDialState2 = 5.3 * recieved_data.info_in.state;
 8003776:	4b15      	ldr	r3, [pc, #84]	; (80037cc <HAL_UART_RxCpltCallback+0x10c>)
 8003778:	789b      	ldrb	r3, [r3, #2]
 800377a:	4618      	mov	r0, r3
 800377c:	f7fc fe9e 	bl	80004bc <__aeabi_i2d>
 8003780:	a309      	add	r3, pc, #36	; (adr r3, 80037a8 <HAL_UART_RxCpltCallback+0xe8>)
 8003782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003786:	f7fc ff03 	bl	8000590 <__aeabi_dmul>
 800378a:	4603      	mov	r3, r0
 800378c:	460c      	mov	r4, r1
 800378e:	4618      	mov	r0, r3
 8003790:	4621      	mov	r1, r4
 8003792:	f7fd f90f 	bl	80009b4 <__aeabi_d2uiz>
 8003796:	4602      	mov	r2, r0
 8003798:	4b10      	ldr	r3, [pc, #64]	; (80037dc <HAL_UART_RxCpltCallback+0x11c>)
 800379a:	601a      	str	r2, [r3, #0]
	}

	else {
		__NOP();
	}
}
 800379c:	e000      	b.n	80037a0 <HAL_UART_RxCpltCallback+0xe0>
		__NOP();
 800379e:	bf00      	nop
}
 80037a0:	bf00      	nop
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd90      	pop	{r4, r7, pc}
 80037a8:	33333333 	.word	0x33333333
 80037ac:	40153333 	.word	0x40153333
 80037b0:	40007c00 	.word	0x40007c00
 80037b4:	20000028 	.word	0x20000028
 80037b8:	40021000 	.word	0x40021000
 80037bc:	20000088 	.word	0x20000088
 80037c0:	20000084 	.word	0x20000084
 80037c4:	20000104 	.word	0x20000104
 80037c8:	2000008c 	.word	0x2000008c
 80037cc:	20000118 	.word	0x20000118
 80037d0:	2000006b 	.word	0x2000006b
 80037d4:	20000075 	.word	0x20000075
 80037d8:	20000030 	.word	0x20000030
 80037dc:	20000038 	.word	0x20000038

080037e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b086      	sub	sp, #24
 80037e4:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80037e6:	f7fd fa85 	bl	8000cf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80037ea:	f001 f80b 	bl	8004804 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80037ee:	f001 f911 	bl	8004a14 <MX_GPIO_Init>
  MX_DMA_Init();
 80037f2:	f001 f8ef 	bl	80049d4 <MX_DMA_Init>
  MX_ADC1_Init();
 80037f6:	f001 f863 	bl	80048c0 <MX_ADC1_Init>
  MX_UART8_Init();
 80037fa:	f001 f8c1 	bl	8004980 <MX_UART8_Init>
  /* USER CODE BEGIN 2 */

  // DMA buffer
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcBuffer, 2);
 80037fe:	2202      	movs	r2, #2
 8003800:	4954      	ldr	r1, [pc, #336]	; (8003954 <main+0x174>)
 8003802:	4855      	ldr	r0, [pc, #340]	; (8003958 <main+0x178>)
 8003804:	f7fd fb4e 	bl	8000ea4 <HAL_ADC_Start_DMA>

  //con3: 3 - 3v3; 4 - dir; 5 - step

  // Set stepper motor power high
  HAL_GPIO_WritePin(GPIOF, con3_3_Pin, GPIO_PIN_SET);
 8003808:	2201      	movs	r2, #1
 800380a:	2140      	movs	r1, #64	; 0x40
 800380c:	4853      	ldr	r0, [pc, #332]	; (800395c <main+0x17c>)
 800380e:	f7fe fd3f 	bl	8002290 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, con1_3_Pin, GPIO_PIN_SET);
 8003812:	2201      	movs	r2, #1
 8003814:	2180      	movs	r1, #128	; 0x80
 8003816:	4852      	ldr	r0, [pc, #328]	; (8003960 <main+0x180>)
 8003818:	f7fe fd3a 	bl	8002290 <HAL_GPIO_WritePin>

  // Calibrate the stepper motors
  for (int i = 0; i < MAX_NUM_STEPS; i++)
 800381c:	2300      	movs	r3, #0
 800381e:	617b      	str	r3, [r7, #20]
 8003820:	e026      	b.n	8003870 <main+0x90>
  {
		HAL_GPIO_WritePin(GPIOF, con3_4_Pin, ANTICLOCKWISE);
 8003822:	2200      	movs	r2, #0
 8003824:	2120      	movs	r1, #32
 8003826:	484d      	ldr	r0, [pc, #308]	; (800395c <main+0x17c>)
 8003828:	f7fe fd32 	bl	8002290 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, con1_4_Pin, ANTICLOCKWISE);
 800382c:	2200      	movs	r2, #0
 800382e:	2140      	movs	r1, #64	; 0x40
 8003830:	484b      	ldr	r0, [pc, #300]	; (8003960 <main+0x180>)
 8003832:	f7fe fd2d 	bl	8002290 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOF, con3_5_Pin, GPIO_PIN_RESET);
 8003836:	2200      	movs	r2, #0
 8003838:	2110      	movs	r1, #16
 800383a:	4848      	ldr	r0, [pc, #288]	; (800395c <main+0x17c>)
 800383c:	f7fe fd28 	bl	8002290 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, con1_5_Pin, GPIO_PIN_RESET);
 8003840:	2200      	movs	r2, #0
 8003842:	2120      	movs	r1, #32
 8003844:	4846      	ldr	r0, [pc, #280]	; (8003960 <main+0x180>)
 8003846:	f7fe fd23 	bl	8002290 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 800384a:	2001      	movs	r0, #1
 800384c:	f7fd fac4 	bl	8000dd8 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOF, con3_5_Pin, GPIO_PIN_SET);
 8003850:	2201      	movs	r2, #1
 8003852:	2110      	movs	r1, #16
 8003854:	4841      	ldr	r0, [pc, #260]	; (800395c <main+0x17c>)
 8003856:	f7fe fd1b 	bl	8002290 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, con1_5_Pin, GPIO_PIN_SET);
 800385a:	2201      	movs	r2, #1
 800385c:	2120      	movs	r1, #32
 800385e:	4840      	ldr	r0, [pc, #256]	; (8003960 <main+0x180>)
 8003860:	f7fe fd16 	bl	8002290 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8003864:	2001      	movs	r0, #1
 8003866:	f7fd fab7 	bl	8000dd8 <HAL_Delay>
  for (int i = 0; i < MAX_NUM_STEPS; i++)
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	3301      	adds	r3, #1
 800386e:	617b      	str	r3, [r7, #20]
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8003876:	dbd4      	blt.n	8003822 <main+0x42>
  }

  for (int i = 0; i < 123; i++)
 8003878:	2300      	movs	r3, #0
 800387a:	613b      	str	r3, [r7, #16]
 800387c:	e026      	b.n	80038cc <main+0xec>
  {
		HAL_GPIO_WritePin(GPIOF, con3_4_Pin, CLOCKWISE);
 800387e:	2201      	movs	r2, #1
 8003880:	2120      	movs	r1, #32
 8003882:	4836      	ldr	r0, [pc, #216]	; (800395c <main+0x17c>)
 8003884:	f7fe fd04 	bl	8002290 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, con1_4_Pin, CLOCKWISE);
 8003888:	2201      	movs	r2, #1
 800388a:	2140      	movs	r1, #64	; 0x40
 800388c:	4834      	ldr	r0, [pc, #208]	; (8003960 <main+0x180>)
 800388e:	f7fe fcff 	bl	8002290 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOF, con3_5_Pin, GPIO_PIN_RESET);
 8003892:	2200      	movs	r2, #0
 8003894:	2110      	movs	r1, #16
 8003896:	4831      	ldr	r0, [pc, #196]	; (800395c <main+0x17c>)
 8003898:	f7fe fcfa 	bl	8002290 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, con1_5_Pin, GPIO_PIN_RESET);
 800389c:	2200      	movs	r2, #0
 800389e:	2120      	movs	r1, #32
 80038a0:	482f      	ldr	r0, [pc, #188]	; (8003960 <main+0x180>)
 80038a2:	f7fe fcf5 	bl	8002290 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80038a6:	2001      	movs	r0, #1
 80038a8:	f7fd fa96 	bl	8000dd8 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOF, con3_5_Pin, GPIO_PIN_SET);
 80038ac:	2201      	movs	r2, #1
 80038ae:	2110      	movs	r1, #16
 80038b0:	482a      	ldr	r0, [pc, #168]	; (800395c <main+0x17c>)
 80038b2:	f7fe fced 	bl	8002290 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, con1_5_Pin, GPIO_PIN_SET);
 80038b6:	2201      	movs	r2, #1
 80038b8:	2120      	movs	r1, #32
 80038ba:	4829      	ldr	r0, [pc, #164]	; (8003960 <main+0x180>)
 80038bc:	f7fe fce8 	bl	8002290 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80038c0:	2001      	movs	r0, #1
 80038c2:	f7fd fa89 	bl	8000dd8 <HAL_Delay>
  for (int i = 0; i < 123; i++)
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	3301      	adds	r3, #1
 80038ca:	613b      	str	r3, [r7, #16]
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	2b7a      	cmp	r3, #122	; 0x7a
 80038d0:	ddd5      	ble.n	800387e <main+0x9e>
  }

  currentDialState1 = 0;
 80038d2:	4b24      	ldr	r3, [pc, #144]	; (8003964 <main+0x184>)
 80038d4:	2200      	movs	r2, #0
 80038d6:	601a      	str	r2, [r3, #0]
  currentDialState2 = 0;
 80038d8:	4b23      	ldr	r3, [pc, #140]	; (8003968 <main+0x188>)
 80038da:	2200      	movs	r2, #0
 80038dc:	601a      	str	r2, [r3, #0]


  // Pot  1buffer
  for (; pot1BufferIndex < ADC_BUFF_SIZE; pot1BufferIndex++)
 80038de:	e02a      	b.n	8003936 <main+0x156>
  {
	  currentPotState = ((float) adcBuffer[0] / 4095) * 100;
 80038e0:	4b1c      	ldr	r3, [pc, #112]	; (8003954 <main+0x174>)
 80038e2:	881b      	ldrh	r3, [r3, #0]
 80038e4:	ee07 3a90 	vmov	s15, r3
 80038e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80038ec:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800396c <main+0x18c>
 80038f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80038f4:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8003970 <main+0x190>
 80038f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80038fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003900:	edc7 7a01 	vstr	s15, [r7, #4]
 8003904:	793b      	ldrb	r3, [r7, #4]
 8003906:	b2da      	uxtb	r2, r3
 8003908:	4b1a      	ldr	r3, [pc, #104]	; (8003974 <main+0x194>)
 800390a:	701a      	strb	r2, [r3, #0]
	  pot1Buffer[pot1BufferIndex] = currentPotState;
 800390c:	4b1a      	ldr	r3, [pc, #104]	; (8003978 <main+0x198>)
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	461a      	mov	r2, r3
 8003912:	4b18      	ldr	r3, [pc, #96]	; (8003974 <main+0x194>)
 8003914:	7819      	ldrb	r1, [r3, #0]
 8003916:	4b19      	ldr	r3, [pc, #100]	; (800397c <main+0x19c>)
 8003918:	5499      	strb	r1, [r3, r2]
	  pot1Sum += currentPotState;
 800391a:	4b16      	ldr	r3, [pc, #88]	; (8003974 <main+0x194>)
 800391c:	781b      	ldrb	r3, [r3, #0]
 800391e:	461a      	mov	r2, r3
 8003920:	4b17      	ldr	r3, [pc, #92]	; (8003980 <main+0x1a0>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4413      	add	r3, r2
 8003926:	4a16      	ldr	r2, [pc, #88]	; (8003980 <main+0x1a0>)
 8003928:	6013      	str	r3, [r2, #0]
  for (; pot1BufferIndex < ADC_BUFF_SIZE; pot1BufferIndex++)
 800392a:	4b13      	ldr	r3, [pc, #76]	; (8003978 <main+0x198>)
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	3301      	adds	r3, #1
 8003930:	b2da      	uxtb	r2, r3
 8003932:	4b11      	ldr	r3, [pc, #68]	; (8003978 <main+0x198>)
 8003934:	701a      	strb	r2, [r3, #0]
 8003936:	4b10      	ldr	r3, [pc, #64]	; (8003978 <main+0x198>)
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	2b09      	cmp	r3, #9
 800393c:	d9d0      	bls.n	80038e0 <main+0x100>
  }
  pot1State = pot1Sum / ADC_BUFF_SIZE;
 800393e:	4b10      	ldr	r3, [pc, #64]	; (8003980 <main+0x1a0>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a10      	ldr	r2, [pc, #64]	; (8003984 <main+0x1a4>)
 8003944:	fba2 2303 	umull	r2, r3, r2, r3
 8003948:	08db      	lsrs	r3, r3, #3
 800394a:	b2da      	uxtb	r2, r3
 800394c:	4b0e      	ldr	r3, [pc, #56]	; (8003988 <main+0x1a8>)
 800394e:	701a      	strb	r2, [r3, #0]

  // Pot 2 buffer
  for (; pot2BufferIndex < ADC_BUFF_SIZE; pot2BufferIndex++)
 8003950:	e047      	b.n	80039e2 <main+0x202>
 8003952:	bf00      	nop
 8003954:	20000110 	.word	0x20000110
 8003958:	2000011c 	.word	0x2000011c
 800395c:	40021400 	.word	0x40021400
 8003960:	40020000 	.word	0x40020000
 8003964:	20000034 	.word	0x20000034
 8003968:	2000003c 	.word	0x2000003c
 800396c:	457ff000 	.word	0x457ff000
 8003970:	42c80000 	.word	0x42c80000
 8003974:	20000040 	.word	0x20000040
 8003978:	20000048 	.word	0x20000048
 800397c:	2000004c 	.word	0x2000004c
 8003980:	20000044 	.word	0x20000044
 8003984:	cccccccd 	.word	0xcccccccd
 8003988:	20000056 	.word	0x20000056
  {
	  currentPotState = ((float) adcBuffer[1] / 4095) * 100;
 800398c:	4bb4      	ldr	r3, [pc, #720]	; (8003c60 <main+0x480>)
 800398e:	885b      	ldrh	r3, [r3, #2]
 8003990:	ee07 3a90 	vmov	s15, r3
 8003994:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003998:	eddf 6ab2 	vldr	s13, [pc, #712]	; 8003c64 <main+0x484>
 800399c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80039a0:	ed9f 7ab1 	vldr	s14, [pc, #708]	; 8003c68 <main+0x488>
 80039a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80039a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039ac:	edc7 7a01 	vstr	s15, [r7, #4]
 80039b0:	793b      	ldrb	r3, [r7, #4]
 80039b2:	b2da      	uxtb	r2, r3
 80039b4:	4bad      	ldr	r3, [pc, #692]	; (8003c6c <main+0x48c>)
 80039b6:	701a      	strb	r2, [r3, #0]
  	  pot2Buffer[pot2BufferIndex] = currentPotState;
 80039b8:	4bad      	ldr	r3, [pc, #692]	; (8003c70 <main+0x490>)
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	461a      	mov	r2, r3
 80039be:	4bab      	ldr	r3, [pc, #684]	; (8003c6c <main+0x48c>)
 80039c0:	7819      	ldrb	r1, [r3, #0]
 80039c2:	4bac      	ldr	r3, [pc, #688]	; (8003c74 <main+0x494>)
 80039c4:	5499      	strb	r1, [r3, r2]
  	  pot2Sum += currentPotState;
 80039c6:	4ba9      	ldr	r3, [pc, #676]	; (8003c6c <main+0x48c>)
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	461a      	mov	r2, r3
 80039cc:	4baa      	ldr	r3, [pc, #680]	; (8003c78 <main+0x498>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4413      	add	r3, r2
 80039d2:	4aa9      	ldr	r2, [pc, #676]	; (8003c78 <main+0x498>)
 80039d4:	6013      	str	r3, [r2, #0]
  for (; pot2BufferIndex < ADC_BUFF_SIZE; pot2BufferIndex++)
 80039d6:	4ba6      	ldr	r3, [pc, #664]	; (8003c70 <main+0x490>)
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	3301      	adds	r3, #1
 80039dc:	b2da      	uxtb	r2, r3
 80039de:	4ba4      	ldr	r3, [pc, #656]	; (8003c70 <main+0x490>)
 80039e0:	701a      	strb	r2, [r3, #0]
 80039e2:	4ba3      	ldr	r3, [pc, #652]	; (8003c70 <main+0x490>)
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	2b09      	cmp	r3, #9
 80039e8:	d9d0      	bls.n	800398c <main+0x1ac>
  }
  pot2State = pot2Sum / ADC_BUFF_SIZE;
 80039ea:	4ba3      	ldr	r3, [pc, #652]	; (8003c78 <main+0x498>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4aa3      	ldr	r2, [pc, #652]	; (8003c7c <main+0x49c>)
 80039f0:	fba2 2303 	umull	r2, r3, r2, r3
 80039f4:	08db      	lsrs	r3, r3, #3
 80039f6:	b2da      	uxtb	r2, r3
 80039f8:	4ba1      	ldr	r3, [pc, #644]	; (8003c80 <main+0x4a0>)
 80039fa:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  	  // TX UART interrupt to update the displays and dials
	  	  HAL_UART_Receive_IT(&huart8, recieved_data.info_in_buffer, 3);
 80039fc:	2203      	movs	r2, #3
 80039fe:	49a1      	ldr	r1, [pc, #644]	; (8003c84 <main+0x4a4>)
 8003a00:	48a1      	ldr	r0, [pc, #644]	; (8003c88 <main+0x4a8>)
 8003a02:	f7ff f981 	bl	8002d08 <HAL_UART_Receive_IT>

	  	  // Assign the board information to the packet
	  	  board_data.board_info_raw.board_type_1 = HAL_GPIO_ReadPin(GPIOD, board_type_1_Pin) ? 0b1 : 0b0;
 8003a06:	2102      	movs	r1, #2
 8003a08:	48a0      	ldr	r0, [pc, #640]	; (8003c8c <main+0x4ac>)
 8003a0a:	f7fe fc29 	bl	8002260 <HAL_GPIO_ReadPin>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	bf14      	ite	ne
 8003a14:	2301      	movne	r3, #1
 8003a16:	2300      	moveq	r3, #0
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	01db      	lsls	r3, r3, #7
 8003a1c:	b25b      	sxtb	r3, r3
 8003a1e:	11db      	asrs	r3, r3, #7
 8003a20:	b259      	sxtb	r1, r3
 8003a22:	4a9b      	ldr	r2, [pc, #620]	; (8003c90 <main+0x4b0>)
 8003a24:	7813      	ldrb	r3, [r2, #0]
 8003a26:	f361 0300 	bfi	r3, r1, #0, #1
 8003a2a:	7013      	strb	r3, [r2, #0]
	  	  board_data.board_info_raw.board_type_2 = HAL_GPIO_ReadPin(GPIOD, board_type_2_Pin) ? 0b1 : 0b0;
 8003a2c:	2101      	movs	r1, #1
 8003a2e:	4897      	ldr	r0, [pc, #604]	; (8003c8c <main+0x4ac>)
 8003a30:	f7fe fc16 	bl	8002260 <HAL_GPIO_ReadPin>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	bf14      	ite	ne
 8003a3a:	2301      	movne	r3, #1
 8003a3c:	2300      	moveq	r3, #0
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	01db      	lsls	r3, r3, #7
 8003a42:	b25b      	sxtb	r3, r3
 8003a44:	11db      	asrs	r3, r3, #7
 8003a46:	b259      	sxtb	r1, r3
 8003a48:	4a91      	ldr	r2, [pc, #580]	; (8003c90 <main+0x4b0>)
 8003a4a:	7813      	ldrb	r3, [r2, #0]
 8003a4c:	f361 0341 	bfi	r3, r1, #1, #1
 8003a50:	7013      	strb	r3, [r2, #0]
	  	  board_data.board_info_raw.board_type_3 = HAL_GPIO_ReadPin(GPIOC, board_type_3_Pin) ? 0b1 : 0b0;
 8003a52:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003a56:	488f      	ldr	r0, [pc, #572]	; (8003c94 <main+0x4b4>)
 8003a58:	f7fe fc02 	bl	8002260 <HAL_GPIO_ReadPin>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	bf14      	ite	ne
 8003a62:	2301      	movne	r3, #1
 8003a64:	2300      	moveq	r3, #0
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	01db      	lsls	r3, r3, #7
 8003a6a:	b25b      	sxtb	r3, r3
 8003a6c:	11db      	asrs	r3, r3, #7
 8003a6e:	b259      	sxtb	r1, r3
 8003a70:	4a87      	ldr	r2, [pc, #540]	; (8003c90 <main+0x4b0>)
 8003a72:	7813      	ldrb	r3, [r2, #0]
 8003a74:	f361 0382 	bfi	r3, r1, #2, #1
 8003a78:	7013      	strb	r3, [r2, #0]
	  	  board_data.board_info_raw.board_type_4 = HAL_GPIO_ReadPin(GPIOC, board_type_4_Pin) ? 0b1 : 0b0;
 8003a7a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003a7e:	4885      	ldr	r0, [pc, #532]	; (8003c94 <main+0x4b4>)
 8003a80:	f7fe fbee 	bl	8002260 <HAL_GPIO_ReadPin>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	bf14      	ite	ne
 8003a8a:	2301      	movne	r3, #1
 8003a8c:	2300      	moveq	r3, #0
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	01db      	lsls	r3, r3, #7
 8003a92:	b25b      	sxtb	r3, r3
 8003a94:	11db      	asrs	r3, r3, #7
 8003a96:	b259      	sxtb	r1, r3
 8003a98:	4a7d      	ldr	r2, [pc, #500]	; (8003c90 <main+0x4b0>)
 8003a9a:	7813      	ldrb	r3, [r2, #0]
 8003a9c:	f361 03c3 	bfi	r3, r1, #3, #1
 8003aa0:	7013      	strb	r3, [r2, #0]

	  	  board_data.board_info_raw.board_num_1 = HAL_GPIO_ReadPin(GPIOD, board_num_1_Pin) ? 0b1 : 0b0;
 8003aa2:	2120      	movs	r1, #32
 8003aa4:	4879      	ldr	r0, [pc, #484]	; (8003c8c <main+0x4ac>)
 8003aa6:	f7fe fbdb 	bl	8002260 <HAL_GPIO_ReadPin>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	bf14      	ite	ne
 8003ab0:	2301      	movne	r3, #1
 8003ab2:	2300      	moveq	r3, #0
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	01db      	lsls	r3, r3, #7
 8003ab8:	b25b      	sxtb	r3, r3
 8003aba:	11db      	asrs	r3, r3, #7
 8003abc:	b259      	sxtb	r1, r3
 8003abe:	4a74      	ldr	r2, [pc, #464]	; (8003c90 <main+0x4b0>)
 8003ac0:	7813      	ldrb	r3, [r2, #0]
 8003ac2:	f361 1304 	bfi	r3, r1, #4, #1
 8003ac6:	7013      	strb	r3, [r2, #0]
	  	  board_data.board_info_raw.board_num_2 = HAL_GPIO_ReadPin(GPIOD, board_num_2_Pin) ? 0b1 : 0b0;
 8003ac8:	2110      	movs	r1, #16
 8003aca:	4870      	ldr	r0, [pc, #448]	; (8003c8c <main+0x4ac>)
 8003acc:	f7fe fbc8 	bl	8002260 <HAL_GPIO_ReadPin>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	bf14      	ite	ne
 8003ad6:	2301      	movne	r3, #1
 8003ad8:	2300      	moveq	r3, #0
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	01db      	lsls	r3, r3, #7
 8003ade:	b25b      	sxtb	r3, r3
 8003ae0:	11db      	asrs	r3, r3, #7
 8003ae2:	b259      	sxtb	r1, r3
 8003ae4:	4a6a      	ldr	r2, [pc, #424]	; (8003c90 <main+0x4b0>)
 8003ae6:	7813      	ldrb	r3, [r2, #0]
 8003ae8:	f361 1345 	bfi	r3, r1, #5, #1
 8003aec:	7013      	strb	r3, [r2, #0]
	  	  board_data.board_info_raw.board_num_3 = HAL_GPIO_ReadPin(GPIOD, board_num_3_Pin) ? 0b1 : 0b0;
 8003aee:	2108      	movs	r1, #8
 8003af0:	4866      	ldr	r0, [pc, #408]	; (8003c8c <main+0x4ac>)
 8003af2:	f7fe fbb5 	bl	8002260 <HAL_GPIO_ReadPin>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	bf14      	ite	ne
 8003afc:	2301      	movne	r3, #1
 8003afe:	2300      	moveq	r3, #0
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	01db      	lsls	r3, r3, #7
 8003b04:	b25b      	sxtb	r3, r3
 8003b06:	11db      	asrs	r3, r3, #7
 8003b08:	b259      	sxtb	r1, r3
 8003b0a:	4a61      	ldr	r2, [pc, #388]	; (8003c90 <main+0x4b0>)
 8003b0c:	7813      	ldrb	r3, [r2, #0]
 8003b0e:	f361 1386 	bfi	r3, r1, #6, #1
 8003b12:	7013      	strb	r3, [r2, #0]
	  	  board_data.board_info_raw.board_num_4 = HAL_GPIO_ReadPin(GPIOD, board_num_4_Pin) ? 0b1 : 0b0;
 8003b14:	2104      	movs	r1, #4
 8003b16:	485d      	ldr	r0, [pc, #372]	; (8003c8c <main+0x4ac>)
 8003b18:	f7fe fba2 	bl	8002260 <HAL_GPIO_ReadPin>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	bf14      	ite	ne
 8003b22:	2301      	movne	r3, #1
 8003b24:	2300      	moveq	r3, #0
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	01db      	lsls	r3, r3, #7
 8003b2a:	b25b      	sxtb	r3, r3
 8003b2c:	11db      	asrs	r3, r3, #7
 8003b2e:	b259      	sxtb	r1, r3
 8003b30:	4a57      	ldr	r2, [pc, #348]	; (8003c90 <main+0x4b0>)
 8003b32:	7813      	ldrb	r3, [r2, #0]
 8003b34:	f361 13c7 	bfi	r3, r1, #7, #1
 8003b38:	7013      	strb	r3, [r2, #0]

	  	  info_out.board_info = board_data.board_info_char;
 8003b3a:	4b55      	ldr	r3, [pc, #340]	; (8003c90 <main+0x4b0>)
 8003b3c:	781a      	ldrb	r2, [r3, #0]
 8003b3e:	4b56      	ldr	r3, [pc, #344]	; (8003c98 <main+0x4b8>)
 8003b40:	701a      	strb	r2, [r3, #0]

	  	  //Status LED
	  	  ticker++;
 8003b42:	4b56      	ldr	r3, [pc, #344]	; (8003c9c <main+0x4bc>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	3301      	adds	r3, #1
 8003b48:	4a54      	ldr	r2, [pc, #336]	; (8003c9c <main+0x4bc>)
 8003b4a:	6013      	str	r3, [r2, #0]
	  	  if (ticker % LED_SCALER == 0) HAL_GPIO_TogglePin(status_led_GPIO_Port, status_led_Pin);
 8003b4c:	4b53      	ldr	r3, [pc, #332]	; (8003c9c <main+0x4bc>)
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	4b53      	ldr	r3, [pc, #332]	; (8003ca0 <main+0x4c0>)
 8003b52:	fba3 1302 	umull	r1, r3, r3, r2
 8003b56:	0b5b      	lsrs	r3, r3, #13
 8003b58:	f242 7110 	movw	r1, #10000	; 0x2710
 8003b5c:	fb01 f303 	mul.w	r3, r1, r3
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d103      	bne.n	8003b6e <main+0x38e>
 8003b66:	2108      	movs	r1, #8
 8003b68:	484e      	ldr	r0, [pc, #312]	; (8003ca4 <main+0x4c4>)
 8003b6a:	f7fe fbaa 	bl	80022c2 <HAL_GPIO_TogglePin>
	  	  if (ticker == MAX_TICKER_VALUE) ticker = 0;
 8003b6e:	4b4b      	ldr	r3, [pc, #300]	; (8003c9c <main+0x4bc>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b76:	d102      	bne.n	8003b7e <main+0x39e>
 8003b78:	4b48      	ldr	r3, [pc, #288]	; (8003c9c <main+0x4bc>)
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	601a      	str	r2, [r3, #0]

	  	  //Dip switches linked to LEDs
	  	  //Board type
	  	  HAL_GPIO_ReadPin(GPIOD, board_type_1_Pin) ? HAL_GPIO_WritePin(GPIOE, d6_Pin, GPIO_PIN_SET) :
 8003b7e:	2102      	movs	r1, #2
 8003b80:	4842      	ldr	r0, [pc, #264]	; (8003c8c <main+0x4ac>)
 8003b82:	f7fe fb6d 	bl	8002260 <HAL_GPIO_ReadPin>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d005      	beq.n	8003b98 <main+0x3b8>
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	2104      	movs	r1, #4
 8003b90:	4845      	ldr	r0, [pc, #276]	; (8003ca8 <main+0x4c8>)
 8003b92:	f7fe fb7d 	bl	8002290 <HAL_GPIO_WritePin>
 8003b96:	e004      	b.n	8003ba2 <main+0x3c2>
	  			  	  HAL_GPIO_WritePin(GPIOE, d6_Pin, GPIO_PIN_RESET);
 8003b98:	2200      	movs	r2, #0
 8003b9a:	2104      	movs	r1, #4
 8003b9c:	4842      	ldr	r0, [pc, #264]	; (8003ca8 <main+0x4c8>)
 8003b9e:	f7fe fb77 	bl	8002290 <HAL_GPIO_WritePin>

	  	  HAL_GPIO_ReadPin(GPIOD, board_type_2_Pin) ? HAL_GPIO_WritePin(GPIOE, d7_Pin, GPIO_PIN_SET) :
 8003ba2:	2101      	movs	r1, #1
 8003ba4:	4839      	ldr	r0, [pc, #228]	; (8003c8c <main+0x4ac>)
 8003ba6:	f7fe fb5b 	bl	8002260 <HAL_GPIO_ReadPin>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d005      	beq.n	8003bbc <main+0x3dc>
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	2108      	movs	r1, #8
 8003bb4:	483c      	ldr	r0, [pc, #240]	; (8003ca8 <main+0x4c8>)
 8003bb6:	f7fe fb6b 	bl	8002290 <HAL_GPIO_WritePin>
 8003bba:	e004      	b.n	8003bc6 <main+0x3e6>
	  		  	  HAL_GPIO_WritePin(GPIOE, d7_Pin, GPIO_PIN_RESET);
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	2108      	movs	r1, #8
 8003bc0:	4839      	ldr	r0, [pc, #228]	; (8003ca8 <main+0x4c8>)
 8003bc2:	f7fe fb65 	bl	8002290 <HAL_GPIO_WritePin>

	  	  HAL_GPIO_ReadPin(GPIOC, board_type_3_Pin) ? HAL_GPIO_WritePin(GPIOA, d8_Pin, GPIO_PIN_SET) :
 8003bc6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003bca:	4832      	ldr	r0, [pc, #200]	; (8003c94 <main+0x4b4>)
 8003bcc:	f7fe fb48 	bl	8002260 <HAL_GPIO_ReadPin>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d006      	beq.n	8003be4 <main+0x404>
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003bdc:	4833      	ldr	r0, [pc, #204]	; (8003cac <main+0x4cc>)
 8003bde:	f7fe fb57 	bl	8002290 <HAL_GPIO_WritePin>
 8003be2:	e005      	b.n	8003bf0 <main+0x410>
	  		  	  HAL_GPIO_WritePin(GPIOA, d8_Pin, GPIO_PIN_RESET);
 8003be4:	2200      	movs	r2, #0
 8003be6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003bea:	4830      	ldr	r0, [pc, #192]	; (8003cac <main+0x4cc>)
 8003bec:	f7fe fb50 	bl	8002290 <HAL_GPIO_WritePin>

	  	  HAL_GPIO_ReadPin(GPIOC, board_type_4_Pin) ? HAL_GPIO_WritePin(GPIOC, d9_Pin, GPIO_PIN_SET) :
 8003bf0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003bf4:	4827      	ldr	r0, [pc, #156]	; (8003c94 <main+0x4b4>)
 8003bf6:	f7fe fb33 	bl	8002260 <HAL_GPIO_ReadPin>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d006      	beq.n	8003c0e <main+0x42e>
 8003c00:	2201      	movs	r2, #1
 8003c02:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c06:	4823      	ldr	r0, [pc, #140]	; (8003c94 <main+0x4b4>)
 8003c08:	f7fe fb42 	bl	8002290 <HAL_GPIO_WritePin>
 8003c0c:	e005      	b.n	8003c1a <main+0x43a>
	  		  	  HAL_GPIO_WritePin(GPIOC, d9_Pin, GPIO_PIN_RESET);
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c14:	481f      	ldr	r0, [pc, #124]	; (8003c94 <main+0x4b4>)
 8003c16:	f7fe fb3b 	bl	8002290 <HAL_GPIO_WritePin>

	  	  //Board number
	  	  HAL_GPIO_ReadPin(GPIOD, board_num_1_Pin) ? HAL_GPIO_WritePin(GPIOF, d5_Pin, GPIO_PIN_SET) :
 8003c1a:	2120      	movs	r1, #32
 8003c1c:	481b      	ldr	r0, [pc, #108]	; (8003c8c <main+0x4ac>)
 8003c1e:	f7fe fb1f 	bl	8002260 <HAL_GPIO_ReadPin>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d006      	beq.n	8003c36 <main+0x456>
 8003c28:	2201      	movs	r2, #1
 8003c2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003c2e:	4820      	ldr	r0, [pc, #128]	; (8003cb0 <main+0x4d0>)
 8003c30:	f7fe fb2e 	bl	8002290 <HAL_GPIO_WritePin>
 8003c34:	e005      	b.n	8003c42 <main+0x462>
	  		  	  HAL_GPIO_WritePin(GPIOF, d5_Pin, GPIO_PIN_RESET);
 8003c36:	2200      	movs	r2, #0
 8003c38:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003c3c:	481c      	ldr	r0, [pc, #112]	; (8003cb0 <main+0x4d0>)
 8003c3e:	f7fe fb27 	bl	8002290 <HAL_GPIO_WritePin>

	  	  HAL_GPIO_ReadPin(GPIOD, board_num_2_Pin) ? HAL_GPIO_WritePin(GPIOF, d4_Pin, GPIO_PIN_SET) :
 8003c42:	2110      	movs	r1, #16
 8003c44:	4811      	ldr	r0, [pc, #68]	; (8003c8c <main+0x4ac>)
 8003c46:	f7fe fb0b 	bl	8002260 <HAL_GPIO_ReadPin>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d031      	beq.n	8003cb4 <main+0x4d4>
 8003c50:	2201      	movs	r2, #1
 8003c52:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003c56:	4816      	ldr	r0, [pc, #88]	; (8003cb0 <main+0x4d0>)
 8003c58:	f7fe fb1a 	bl	8002290 <HAL_GPIO_WritePin>
 8003c5c:	e030      	b.n	8003cc0 <main+0x4e0>
 8003c5e:	bf00      	nop
 8003c60:	20000110 	.word	0x20000110
 8003c64:	457ff000 	.word	0x457ff000
 8003c68:	42c80000 	.word	0x42c80000
 8003c6c:	20000040 	.word	0x20000040
 8003c70:	2000005c 	.word	0x2000005c
 8003c74:	20000060 	.word	0x20000060
 8003c78:	20000058 	.word	0x20000058
 8003c7c:	cccccccd 	.word	0xcccccccd
 8003c80:	2000006a 	.word	0x2000006a
 8003c84:	20000118 	.word	0x20000118
 8003c88:	200001c4 	.word	0x200001c4
 8003c8c:	40020c00 	.word	0x40020c00
 8003c90:	20000114 	.word	0x20000114
 8003c94:	40020800 	.word	0x40020800
 8003c98:	20000204 	.word	0x20000204
 8003c9c:	2000002c 	.word	0x2000002c
 8003ca0:	d1b71759 	.word	0xd1b71759
 8003ca4:	40020400 	.word	0x40020400
 8003ca8:	40021000 	.word	0x40021000
 8003cac:	40020000 	.word	0x40020000
 8003cb0:	40021400 	.word	0x40021400
	  		  	  HAL_GPIO_WritePin(GPIOF, d4_Pin, GPIO_PIN_RESET);
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003cba:	4890      	ldr	r0, [pc, #576]	; (8003efc <main+0x71c>)
 8003cbc:	f7fe fae8 	bl	8002290 <HAL_GPIO_WritePin>

	  	  HAL_GPIO_ReadPin(GPIOD, board_num_3_Pin) ? HAL_GPIO_WritePin(GPIOF, d3_Pin, GPIO_PIN_SET) :
 8003cc0:	2108      	movs	r1, #8
 8003cc2:	488f      	ldr	r0, [pc, #572]	; (8003f00 <main+0x720>)
 8003cc4:	f7fe facc 	bl	8002260 <HAL_GPIO_ReadPin>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d006      	beq.n	8003cdc <main+0x4fc>
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003cd4:	4889      	ldr	r0, [pc, #548]	; (8003efc <main+0x71c>)
 8003cd6:	f7fe fadb 	bl	8002290 <HAL_GPIO_WritePin>
 8003cda:	e005      	b.n	8003ce8 <main+0x508>
	  		  	  HAL_GPIO_WritePin(GPIOF, d3_Pin, GPIO_PIN_RESET);
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003ce2:	4886      	ldr	r0, [pc, #536]	; (8003efc <main+0x71c>)
 8003ce4:	f7fe fad4 	bl	8002290 <HAL_GPIO_WritePin>

	  	  HAL_GPIO_ReadPin(GPIOD, board_num_4_Pin) ? HAL_GPIO_WritePin(GPIOF, d2_Pin, GPIO_PIN_SET) :
 8003ce8:	2104      	movs	r1, #4
 8003cea:	4885      	ldr	r0, [pc, #532]	; (8003f00 <main+0x720>)
 8003cec:	f7fe fab8 	bl	8002260 <HAL_GPIO_ReadPin>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d006      	beq.n	8003d04 <main+0x524>
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003cfc:	487f      	ldr	r0, [pc, #508]	; (8003efc <main+0x71c>)
 8003cfe:	f7fe fac7 	bl	8002290 <HAL_GPIO_WritePin>
 8003d02:	e005      	b.n	8003d10 <main+0x530>
	  	  		  HAL_GPIO_WritePin(GPIOF, d2_Pin, GPIO_PIN_RESET);
 8003d04:	2200      	movs	r2, #0
 8003d06:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003d0a:	487c      	ldr	r0, [pc, #496]	; (8003efc <main+0x71c>)
 8003d0c:	f7fe fac0 	bl	8002290 <HAL_GPIO_WritePin>

	  	// ADC reading of both POTs - reads one per loop
		currentPotState = ((float) adcBuffer[adcIndex] / 4095) * 100;
 8003d10:	4b7c      	ldr	r3, [pc, #496]	; (8003f04 <main+0x724>)
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	461a      	mov	r2, r3
 8003d16:	4b7c      	ldr	r3, [pc, #496]	; (8003f08 <main+0x728>)
 8003d18:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003d1c:	ee07 3a90 	vmov	s15, r3
 8003d20:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003d24:	eddf 6a79 	vldr	s13, [pc, #484]	; 8003f0c <main+0x72c>
 8003d28:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003d2c:	ed9f 7a78 	vldr	s14, [pc, #480]	; 8003f10 <main+0x730>
 8003d30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d38:	edc7 7a01 	vstr	s15, [r7, #4]
 8003d3c:	793b      	ldrb	r3, [r7, #4]
 8003d3e:	b2da      	uxtb	r2, r3
 8003d40:	4b74      	ldr	r3, [pc, #464]	; (8003f14 <main+0x734>)
 8003d42:	701a      	strb	r2, [r3, #0]

		if (adcIndex == 0 && ((currentPotState >= prevPotState[adcIndex] + 5) || (currentPotState <= prevPotState[adcIndex] - 5)))
 8003d44:	4b6f      	ldr	r3, [pc, #444]	; (8003f04 <main+0x724>)
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d156      	bne.n	8003dfa <main+0x61a>
 8003d4c:	4b71      	ldr	r3, [pc, #452]	; (8003f14 <main+0x734>)
 8003d4e:	781b      	ldrb	r3, [r3, #0]
 8003d50:	461a      	mov	r2, r3
 8003d52:	4b6c      	ldr	r3, [pc, #432]	; (8003f04 <main+0x724>)
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	4619      	mov	r1, r3
 8003d58:	4b6f      	ldr	r3, [pc, #444]	; (8003f18 <main+0x738>)
 8003d5a:	5c5b      	ldrb	r3, [r3, r1]
 8003d5c:	3305      	adds	r3, #5
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	da0a      	bge.n	8003d78 <main+0x598>
 8003d62:	4b6c      	ldr	r3, [pc, #432]	; (8003f14 <main+0x734>)
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	461a      	mov	r2, r3
 8003d68:	4b66      	ldr	r3, [pc, #408]	; (8003f04 <main+0x724>)
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	4b6a      	ldr	r3, [pc, #424]	; (8003f18 <main+0x738>)
 8003d70:	5c5b      	ldrb	r3, [r3, r1]
 8003d72:	3b05      	subs	r3, #5
 8003d74:	429a      	cmp	r2, r3
 8003d76:	dc40      	bgt.n	8003dfa <main+0x61a>
		{
			// Moving average
			pot1Sum -= pot1Buffer[pot1BufferIndex];
 8003d78:	4b68      	ldr	r3, [pc, #416]	; (8003f1c <main+0x73c>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a68      	ldr	r2, [pc, #416]	; (8003f20 <main+0x740>)
 8003d7e:	7812      	ldrb	r2, [r2, #0]
 8003d80:	4611      	mov	r1, r2
 8003d82:	4a68      	ldr	r2, [pc, #416]	; (8003f24 <main+0x744>)
 8003d84:	5c52      	ldrb	r2, [r2, r1]
 8003d86:	1a9b      	subs	r3, r3, r2
 8003d88:	4a64      	ldr	r2, [pc, #400]	; (8003f1c <main+0x73c>)
 8003d8a:	6013      	str	r3, [r2, #0]
			pot1Buffer[pot1BufferIndex] = currentPotState;
 8003d8c:	4b64      	ldr	r3, [pc, #400]	; (8003f20 <main+0x740>)
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	461a      	mov	r2, r3
 8003d92:	4b60      	ldr	r3, [pc, #384]	; (8003f14 <main+0x734>)
 8003d94:	7819      	ldrb	r1, [r3, #0]
 8003d96:	4b63      	ldr	r3, [pc, #396]	; (8003f24 <main+0x744>)
 8003d98:	5499      	strb	r1, [r3, r2]
			pot1Sum += currentPotState;
 8003d9a:	4b5e      	ldr	r3, [pc, #376]	; (8003f14 <main+0x734>)
 8003d9c:	781b      	ldrb	r3, [r3, #0]
 8003d9e:	461a      	mov	r2, r3
 8003da0:	4b5e      	ldr	r3, [pc, #376]	; (8003f1c <main+0x73c>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4413      	add	r3, r2
 8003da6:	4a5d      	ldr	r2, [pc, #372]	; (8003f1c <main+0x73c>)
 8003da8:	6013      	str	r3, [r2, #0]
			pot1State = pot1Sum / ADC_BUFF_SIZE;
 8003daa:	4b5c      	ldr	r3, [pc, #368]	; (8003f1c <main+0x73c>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a5e      	ldr	r2, [pc, #376]	; (8003f28 <main+0x748>)
 8003db0:	fba2 2303 	umull	r2, r3, r2, r3
 8003db4:	08db      	lsrs	r3, r3, #3
 8003db6:	b2da      	uxtb	r2, r3
 8003db8:	4b5c      	ldr	r3, [pc, #368]	; (8003f2c <main+0x74c>)
 8003dba:	701a      	strb	r2, [r3, #0]

			if (pot1BufferIndex++ > (ADC_BUFF_SIZE - 1)) pot1BufferIndex = 0;
 8003dbc:	4b58      	ldr	r3, [pc, #352]	; (8003f20 <main+0x740>)
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	1c5a      	adds	r2, r3, #1
 8003dc2:	b2d1      	uxtb	r1, r2
 8003dc4:	4a56      	ldr	r2, [pc, #344]	; (8003f20 <main+0x740>)
 8003dc6:	7011      	strb	r1, [r2, #0]
 8003dc8:	2b09      	cmp	r3, #9
 8003dca:	d902      	bls.n	8003dd2 <main+0x5f2>
 8003dcc:	4b54      	ldr	r3, [pc, #336]	; (8003f20 <main+0x740>)
 8003dce:	2200      	movs	r2, #0
 8003dd0:	701a      	strb	r2, [r3, #0]

			// Sending packet
			info_out.board_add  =  Pot1HWAdd;
 8003dd2:	4b57      	ldr	r3, [pc, #348]	; (8003f30 <main+0x750>)
 8003dd4:	2233      	movs	r2, #51	; 0x33
 8003dd6:	705a      	strb	r2, [r3, #1]
			info_out.state  = pot1State;
 8003dd8:	4b54      	ldr	r3, [pc, #336]	; (8003f2c <main+0x74c>)
 8003dda:	781a      	ldrb	r2, [r3, #0]
 8003ddc:	4b54      	ldr	r3, [pc, #336]	; (8003f30 <main+0x750>)
 8003dde:	709a      	strb	r2, [r3, #2]
			HAL_UART_Transmit(&huart8,&info_out,sizeof(info_out),10);
 8003de0:	230a      	movs	r3, #10
 8003de2:	2203      	movs	r2, #3
 8003de4:	4952      	ldr	r1, [pc, #328]	; (8003f30 <main+0x750>)
 8003de6:	4853      	ldr	r0, [pc, #332]	; (8003f34 <main+0x754>)
 8003de8:	f7fe fef5 	bl	8002bd6 <HAL_UART_Transmit>
			prevPotState[adcIndex] = pot1State;
 8003dec:	4b45      	ldr	r3, [pc, #276]	; (8003f04 <main+0x724>)
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	461a      	mov	r2, r3
 8003df2:	4b4e      	ldr	r3, [pc, #312]	; (8003f2c <main+0x74c>)
 8003df4:	7819      	ldrb	r1, [r3, #0]
 8003df6:	4b48      	ldr	r3, [pc, #288]	; (8003f18 <main+0x738>)
 8003df8:	5499      	strb	r1, [r3, r2]

		}

		if (adcIndex == 1 && ((currentPotState >= prevPotState[adcIndex] + 5) || (currentPotState <= prevPotState[adcIndex] - 5)))
 8003dfa:	4b42      	ldr	r3, [pc, #264]	; (8003f04 <main+0x724>)
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d156      	bne.n	8003eb0 <main+0x6d0>
 8003e02:	4b44      	ldr	r3, [pc, #272]	; (8003f14 <main+0x734>)
 8003e04:	781b      	ldrb	r3, [r3, #0]
 8003e06:	461a      	mov	r2, r3
 8003e08:	4b3e      	ldr	r3, [pc, #248]	; (8003f04 <main+0x724>)
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	4b42      	ldr	r3, [pc, #264]	; (8003f18 <main+0x738>)
 8003e10:	5c5b      	ldrb	r3, [r3, r1]
 8003e12:	3305      	adds	r3, #5
 8003e14:	429a      	cmp	r2, r3
 8003e16:	da0a      	bge.n	8003e2e <main+0x64e>
 8003e18:	4b3e      	ldr	r3, [pc, #248]	; (8003f14 <main+0x734>)
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	4b39      	ldr	r3, [pc, #228]	; (8003f04 <main+0x724>)
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	4619      	mov	r1, r3
 8003e24:	4b3c      	ldr	r3, [pc, #240]	; (8003f18 <main+0x738>)
 8003e26:	5c5b      	ldrb	r3, [r3, r1]
 8003e28:	3b05      	subs	r3, #5
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	dc40      	bgt.n	8003eb0 <main+0x6d0>
		{
			// Moving average
			pot2Sum -= pot2Buffer[pot2BufferIndex];
 8003e2e:	4b42      	ldr	r3, [pc, #264]	; (8003f38 <main+0x758>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a42      	ldr	r2, [pc, #264]	; (8003f3c <main+0x75c>)
 8003e34:	7812      	ldrb	r2, [r2, #0]
 8003e36:	4611      	mov	r1, r2
 8003e38:	4a41      	ldr	r2, [pc, #260]	; (8003f40 <main+0x760>)
 8003e3a:	5c52      	ldrb	r2, [r2, r1]
 8003e3c:	1a9b      	subs	r3, r3, r2
 8003e3e:	4a3e      	ldr	r2, [pc, #248]	; (8003f38 <main+0x758>)
 8003e40:	6013      	str	r3, [r2, #0]
			pot2Buffer[pot2BufferIndex] = currentPotState;
 8003e42:	4b3e      	ldr	r3, [pc, #248]	; (8003f3c <main+0x75c>)
 8003e44:	781b      	ldrb	r3, [r3, #0]
 8003e46:	461a      	mov	r2, r3
 8003e48:	4b32      	ldr	r3, [pc, #200]	; (8003f14 <main+0x734>)
 8003e4a:	7819      	ldrb	r1, [r3, #0]
 8003e4c:	4b3c      	ldr	r3, [pc, #240]	; (8003f40 <main+0x760>)
 8003e4e:	5499      	strb	r1, [r3, r2]
			pot2Sum += currentPotState;
 8003e50:	4b30      	ldr	r3, [pc, #192]	; (8003f14 <main+0x734>)
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	461a      	mov	r2, r3
 8003e56:	4b38      	ldr	r3, [pc, #224]	; (8003f38 <main+0x758>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4413      	add	r3, r2
 8003e5c:	4a36      	ldr	r2, [pc, #216]	; (8003f38 <main+0x758>)
 8003e5e:	6013      	str	r3, [r2, #0]
			pot2State = pot2Sum / ADC_BUFF_SIZE;
 8003e60:	4b35      	ldr	r3, [pc, #212]	; (8003f38 <main+0x758>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a30      	ldr	r2, [pc, #192]	; (8003f28 <main+0x748>)
 8003e66:	fba2 2303 	umull	r2, r3, r2, r3
 8003e6a:	08db      	lsrs	r3, r3, #3
 8003e6c:	b2da      	uxtb	r2, r3
 8003e6e:	4b35      	ldr	r3, [pc, #212]	; (8003f44 <main+0x764>)
 8003e70:	701a      	strb	r2, [r3, #0]

			if (pot2BufferIndex++ > (ADC_BUFF_SIZE - 1)) pot2BufferIndex = 0;
 8003e72:	4b32      	ldr	r3, [pc, #200]	; (8003f3c <main+0x75c>)
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	1c5a      	adds	r2, r3, #1
 8003e78:	b2d1      	uxtb	r1, r2
 8003e7a:	4a30      	ldr	r2, [pc, #192]	; (8003f3c <main+0x75c>)
 8003e7c:	7011      	strb	r1, [r2, #0]
 8003e7e:	2b09      	cmp	r3, #9
 8003e80:	d902      	bls.n	8003e88 <main+0x6a8>
 8003e82:	4b2e      	ldr	r3, [pc, #184]	; (8003f3c <main+0x75c>)
 8003e84:	2200      	movs	r2, #0
 8003e86:	701a      	strb	r2, [r3, #0]

			// Sending packet
			info_out.board_add  =  Pot2HWAdd;
 8003e88:	4b29      	ldr	r3, [pc, #164]	; (8003f30 <main+0x750>)
 8003e8a:	2234      	movs	r2, #52	; 0x34
 8003e8c:	705a      	strb	r2, [r3, #1]
			info_out.state  = pot2State;
 8003e8e:	4b2d      	ldr	r3, [pc, #180]	; (8003f44 <main+0x764>)
 8003e90:	781a      	ldrb	r2, [r3, #0]
 8003e92:	4b27      	ldr	r3, [pc, #156]	; (8003f30 <main+0x750>)
 8003e94:	709a      	strb	r2, [r3, #2]
			HAL_UART_Transmit(&huart8,&info_out,sizeof(info_out),10);
 8003e96:	230a      	movs	r3, #10
 8003e98:	2203      	movs	r2, #3
 8003e9a:	4925      	ldr	r1, [pc, #148]	; (8003f30 <main+0x750>)
 8003e9c:	4825      	ldr	r0, [pc, #148]	; (8003f34 <main+0x754>)
 8003e9e:	f7fe fe9a 	bl	8002bd6 <HAL_UART_Transmit>
			prevPotState[adcIndex] = pot2State;
 8003ea2:	4b18      	ldr	r3, [pc, #96]	; (8003f04 <main+0x724>)
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	4b26      	ldr	r3, [pc, #152]	; (8003f44 <main+0x764>)
 8003eaa:	7819      	ldrb	r1, [r3, #0]
 8003eac:	4b1a      	ldr	r3, [pc, #104]	; (8003f18 <main+0x738>)
 8003eae:	5499      	strb	r1, [r3, r2]
		}

		if (adcIndex++ > 1) adcIndex = 0;
 8003eb0:	4b14      	ldr	r3, [pc, #80]	; (8003f04 <main+0x724>)
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	1c5a      	adds	r2, r3, #1
 8003eb6:	b2d1      	uxtb	r1, r2
 8003eb8:	4a12      	ldr	r2, [pc, #72]	; (8003f04 <main+0x724>)
 8003eba:	7011      	strb	r1, [r2, #0]
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d902      	bls.n	8003ec6 <main+0x6e6>
 8003ec0:	4b10      	ldr	r3, [pc, #64]	; (8003f04 <main+0x724>)
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	701a      	strb	r2, [r3, #0]

	  	// Stepper motor driving 1
	  	if (abs(desiredDialState1 - currentDialState1) != 0)
 8003ec6:	4b20      	ldr	r3, [pc, #128]	; (8003f48 <main+0x768>)
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	4b20      	ldr	r3, [pc, #128]	; (8003f4c <main+0x76c>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d063      	beq.n	8003f9a <main+0x7ba>
	  	{
	  		if ((currentDialState1 > desiredDialState1) && currentDialState1 != 0)
 8003ed2:	4b1e      	ldr	r3, [pc, #120]	; (8003f4c <main+0x76c>)
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	4b1c      	ldr	r3, [pc, #112]	; (8003f48 <main+0x768>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d938      	bls.n	8003f50 <main+0x770>
 8003ede:	4b1b      	ldr	r3, [pc, #108]	; (8003f4c <main+0x76c>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d034      	beq.n	8003f50 <main+0x770>
			{
	  			currentDialState1--;
 8003ee6:	4b19      	ldr	r3, [pc, #100]	; (8003f4c <main+0x76c>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	3b01      	subs	r3, #1
 8003eec:	4a17      	ldr	r2, [pc, #92]	; (8003f4c <main+0x76c>)
 8003eee:	6013      	str	r3, [r2, #0]
				HAL_GPIO_WritePin(GPIOF, con3_4_Pin, ANTICLOCKWISE);
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	2120      	movs	r1, #32
 8003ef4:	4801      	ldr	r0, [pc, #4]	; (8003efc <main+0x71c>)
 8003ef6:	f7fe f9cb 	bl	8002290 <HAL_GPIO_WritePin>
 8003efa:	e03e      	b.n	8003f7a <main+0x79a>
 8003efc:	40021400 	.word	0x40021400
 8003f00:	40020c00 	.word	0x40020c00
 8003f04:	20000041 	.word	0x20000041
 8003f08:	20000110 	.word	0x20000110
 8003f0c:	457ff000 	.word	0x457ff000
 8003f10:	42c80000 	.word	0x42c80000
 8003f14:	20000040 	.word	0x20000040
 8003f18:	2000010c 	.word	0x2000010c
 8003f1c:	20000044 	.word	0x20000044
 8003f20:	20000048 	.word	0x20000048
 8003f24:	2000004c 	.word	0x2000004c
 8003f28:	cccccccd 	.word	0xcccccccd
 8003f2c:	20000056 	.word	0x20000056
 8003f30:	20000204 	.word	0x20000204
 8003f34:	200001c4 	.word	0x200001c4
 8003f38:	20000058 	.word	0x20000058
 8003f3c:	2000005c 	.word	0x2000005c
 8003f40:	20000060 	.word	0x20000060
 8003f44:	2000006a 	.word	0x2000006a
 8003f48:	20000030 	.word	0x20000030
 8003f4c:	20000034 	.word	0x20000034
			}
			else if ((currentDialState1 < desiredDialState1) && currentDialState1 != 600)
 8003f50:	4bb8      	ldr	r3, [pc, #736]	; (8004234 <main+0xa54>)
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	4bb8      	ldr	r3, [pc, #736]	; (8004238 <main+0xa58>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d20e      	bcs.n	8003f7a <main+0x79a>
 8003f5c:	4bb5      	ldr	r3, [pc, #724]	; (8004234 <main+0xa54>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8003f64:	d009      	beq.n	8003f7a <main+0x79a>
			{
				currentDialState1++;
 8003f66:	4bb3      	ldr	r3, [pc, #716]	; (8004234 <main+0xa54>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	3301      	adds	r3, #1
 8003f6c:	4ab1      	ldr	r2, [pc, #708]	; (8004234 <main+0xa54>)
 8003f6e:	6013      	str	r3, [r2, #0]
				HAL_GPIO_WritePin(GPIOF, con3_4_Pin, CLOCKWISE);
 8003f70:	2201      	movs	r2, #1
 8003f72:	2120      	movs	r1, #32
 8003f74:	48b1      	ldr	r0, [pc, #708]	; (800423c <main+0xa5c>)
 8003f76:	f7fe f98b 	bl	8002290 <HAL_GPIO_WritePin>
			}

	  		HAL_GPIO_WritePin(GPIOF, con3_5_Pin, GPIO_PIN_RESET);
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	2110      	movs	r1, #16
 8003f7e:	48af      	ldr	r0, [pc, #700]	; (800423c <main+0xa5c>)
 8003f80:	f7fe f986 	bl	8002290 <HAL_GPIO_WritePin>
	  		HAL_Delay(1);
 8003f84:	2001      	movs	r0, #1
 8003f86:	f7fc ff27 	bl	8000dd8 <HAL_Delay>
	  		HAL_GPIO_WritePin(GPIOF, con3_5_Pin, GPIO_PIN_SET);
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	2110      	movs	r1, #16
 8003f8e:	48ab      	ldr	r0, [pc, #684]	; (800423c <main+0xa5c>)
 8003f90:	f7fe f97e 	bl	8002290 <HAL_GPIO_WritePin>
	  		HAL_Delay(1);
 8003f94:	2001      	movs	r0, #1
 8003f96:	f7fc ff1f 	bl	8000dd8 <HAL_Delay>
	  	}


	  	// Stepper motor driving 2 - need to change the pins
	  	if (abs(desiredDialState2 - currentDialState2) != 0)
 8003f9a:	4ba9      	ldr	r3, [pc, #676]	; (8004240 <main+0xa60>)
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	4ba9      	ldr	r3, [pc, #676]	; (8004244 <main+0xa64>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d03a      	beq.n	800401c <main+0x83c>
	  	{
	  		if ((currentDialState2 > desiredDialState2) && currentDialState2 != 0)
 8003fa6:	4ba7      	ldr	r3, [pc, #668]	; (8004244 <main+0xa64>)
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	4ba5      	ldr	r3, [pc, #660]	; (8004240 <main+0xa60>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d90e      	bls.n	8003fd0 <main+0x7f0>
 8003fb2:	4ba4      	ldr	r3, [pc, #656]	; (8004244 <main+0xa64>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d00a      	beq.n	8003fd0 <main+0x7f0>
			{
	  			currentDialState2--;
 8003fba:	4ba2      	ldr	r3, [pc, #648]	; (8004244 <main+0xa64>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	4aa0      	ldr	r2, [pc, #640]	; (8004244 <main+0xa64>)
 8003fc2:	6013      	str	r3, [r2, #0]
				HAL_GPIO_WritePin(GPIOA, con1_4_Pin, ANTICLOCKWISE);
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	2140      	movs	r1, #64	; 0x40
 8003fc8:	489f      	ldr	r0, [pc, #636]	; (8004248 <main+0xa68>)
 8003fca:	f7fe f961 	bl	8002290 <HAL_GPIO_WritePin>
 8003fce:	e015      	b.n	8003ffc <main+0x81c>
			}
			else if ((currentDialState2 < desiredDialState2) && currentDialState2 != 530)
 8003fd0:	4b9c      	ldr	r3, [pc, #624]	; (8004244 <main+0xa64>)
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	4b9a      	ldr	r3, [pc, #616]	; (8004240 <main+0xa60>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d20f      	bcs.n	8003ffc <main+0x81c>
 8003fdc:	4b99      	ldr	r3, [pc, #612]	; (8004244 <main+0xa64>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f240 2212 	movw	r2, #530	; 0x212
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d009      	beq.n	8003ffc <main+0x81c>
			{
				currentDialState2++;
 8003fe8:	4b96      	ldr	r3, [pc, #600]	; (8004244 <main+0xa64>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	3301      	adds	r3, #1
 8003fee:	4a95      	ldr	r2, [pc, #596]	; (8004244 <main+0xa64>)
 8003ff0:	6013      	str	r3, [r2, #0]
				HAL_GPIO_WritePin(GPIOA, con1_4_Pin, CLOCKWISE);
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	2140      	movs	r1, #64	; 0x40
 8003ff6:	4894      	ldr	r0, [pc, #592]	; (8004248 <main+0xa68>)
 8003ff8:	f7fe f94a 	bl	8002290 <HAL_GPIO_WritePin>
			}

	  		HAL_GPIO_WritePin(GPIOA, con1_5_Pin, GPIO_PIN_RESET);
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	2120      	movs	r1, #32
 8004000:	4891      	ldr	r0, [pc, #580]	; (8004248 <main+0xa68>)
 8004002:	f7fe f945 	bl	8002290 <HAL_GPIO_WritePin>
	  		HAL_Delay(1);
 8004006:	2001      	movs	r0, #1
 8004008:	f7fc fee6 	bl	8000dd8 <HAL_Delay>
	  		HAL_GPIO_WritePin(GPIOA, con1_5_Pin, GPIO_PIN_SET);
 800400c:	2201      	movs	r2, #1
 800400e:	2120      	movs	r1, #32
 8004010:	488d      	ldr	r0, [pc, #564]	; (8004248 <main+0xa68>)
 8004012:	f7fe f93d 	bl	8002290 <HAL_GPIO_WritePin>
	  		HAL_Delay(1);
 8004016:	2001      	movs	r0, #1
 8004018:	f7fc fede 	bl	8000dd8 <HAL_Delay>
	  	}

	  	// Driving the 7 SEGS (need to implement the second one
		if (desiredDispValue1 != currentDispValue1)
 800401c:	4b8b      	ldr	r3, [pc, #556]	; (800424c <main+0xa6c>)
 800401e:	781a      	ldrb	r2, [r3, #0]
 8004020:	4b8b      	ldr	r3, [pc, #556]	; (8004250 <main+0xa70>)
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	429a      	cmp	r2, r3
 8004026:	d039      	beq.n	800409c <main+0x8bc>
		{
			currentDispValue1 = desiredDispValue1;
 8004028:	4b88      	ldr	r3, [pc, #544]	; (800424c <main+0xa6c>)
 800402a:	781a      	ldrb	r2, [r3, #0]
 800402c:	4b88      	ldr	r3, [pc, #544]	; (8004250 <main+0xa70>)
 800402e:	701a      	strb	r2, [r3, #0]
			memcpy(&desiredDispValueDigits1, 0x00, sizeof(tempDigits1));
 8004030:	2300      	movs	r3, #0
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a87      	ldr	r2, [pc, #540]	; (8004254 <main+0xa74>)
 8004036:	6013      	str	r3, [r2, #0]
			for (int i = 0; desiredDispValue1 > 0; i++)
 8004038:	2300      	movs	r3, #0
 800403a:	60fb      	str	r3, [r7, #12]
 800403c:	e026      	b.n	800408c <main+0x8ac>
			{
				 desiredDispValueDigits1[i] = desiredDispValue1 % 10;
 800403e:	4b83      	ldr	r3, [pc, #524]	; (800424c <main+0xa6c>)
 8004040:	781a      	ldrb	r2, [r3, #0]
 8004042:	4b85      	ldr	r3, [pc, #532]	; (8004258 <main+0xa78>)
 8004044:	fba3 1302 	umull	r1, r3, r3, r2
 8004048:	08d9      	lsrs	r1, r3, #3
 800404a:	460b      	mov	r3, r1
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	440b      	add	r3, r1
 8004050:	005b      	lsls	r3, r3, #1
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	b2d9      	uxtb	r1, r3
 8004056:	4a7f      	ldr	r2, [pc, #508]	; (8004254 <main+0xa74>)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	4413      	add	r3, r2
 800405c:	460a      	mov	r2, r1
 800405e:	701a      	strb	r2, [r3, #0]
				 desiredDispValue1 -= desiredDispValueDigits1[i];
 8004060:	4b7a      	ldr	r3, [pc, #488]	; (800424c <main+0xa6c>)
 8004062:	781a      	ldrb	r2, [r3, #0]
 8004064:	497b      	ldr	r1, [pc, #492]	; (8004254 <main+0xa74>)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	440b      	add	r3, r1
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	b2da      	uxtb	r2, r3
 8004070:	4b76      	ldr	r3, [pc, #472]	; (800424c <main+0xa6c>)
 8004072:	701a      	strb	r2, [r3, #0]
				 desiredDispValue1 /= 10;
 8004074:	4b75      	ldr	r3, [pc, #468]	; (800424c <main+0xa6c>)
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	4a77      	ldr	r2, [pc, #476]	; (8004258 <main+0xa78>)
 800407a:	fba2 2303 	umull	r2, r3, r2, r3
 800407e:	08db      	lsrs	r3, r3, #3
 8004080:	b2da      	uxtb	r2, r3
 8004082:	4b72      	ldr	r3, [pc, #456]	; (800424c <main+0xa6c>)
 8004084:	701a      	strb	r2, [r3, #0]
			for (int i = 0; desiredDispValue1 > 0; i++)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	3301      	adds	r3, #1
 800408a:	60fb      	str	r3, [r7, #12]
 800408c:	4b6f      	ldr	r3, [pc, #444]	; (800424c <main+0xa6c>)
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d1d4      	bne.n	800403e <main+0x85e>
			}
			desiredDispValue1 = currentDispValue1;
 8004094:	4b6e      	ldr	r3, [pc, #440]	; (8004250 <main+0xa70>)
 8004096:	781a      	ldrb	r2, [r3, #0]
 8004098:	4b6c      	ldr	r3, [pc, #432]	; (800424c <main+0xa6c>)
 800409a:	701a      	strb	r2, [r3, #0]
		}

		// Clear the display
		HAL_GPIO_WritePin(GPIOF, con4_1_Pin, GPIO_PIN_SET); 	// A
 800409c:	2201      	movs	r2, #1
 800409e:	2101      	movs	r1, #1
 80040a0:	4866      	ldr	r0, [pc, #408]	; (800423c <main+0xa5c>)
 80040a2:	f7fe f8f5 	bl	8002290 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, con4_2_Pin, GPIO_PIN_SET); 	// B
 80040a6:	2201      	movs	r2, #1
 80040a8:	2102      	movs	r1, #2
 80040aa:	4864      	ldr	r0, [pc, #400]	; (800423c <main+0xa5c>)
 80040ac:	f7fe f8f0 	bl	8002290 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, con4_3_Pin, GPIO_PIN_SET); 	// C
 80040b0:	2201      	movs	r2, #1
 80040b2:	2120      	movs	r1, #32
 80040b4:	4869      	ldr	r0, [pc, #420]	; (800425c <main+0xa7c>)
 80040b6:	f7fe f8eb 	bl	8002290 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, con4_4_Pin, GPIO_PIN_SET); 	// D
 80040ba:	2201      	movs	r2, #1
 80040bc:	2140      	movs	r1, #64	; 0x40
 80040be:	4867      	ldr	r0, [pc, #412]	; (800425c <main+0xa7c>)
 80040c0:	f7fe f8e6 	bl	8002290 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, con4_5_Pin, GPIO_PIN_SET); 	// E
 80040c4:	2201      	movs	r2, #1
 80040c6:	2180      	movs	r1, #128	; 0x80
 80040c8:	4864      	ldr	r0, [pc, #400]	; (800425c <main+0xa7c>)
 80040ca:	f7fe f8e1 	bl	8002290 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, con4_6_Pin, GPIO_PIN_SET); 	// F
 80040ce:	2201      	movs	r2, #1
 80040d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80040d4:	4861      	ldr	r0, [pc, #388]	; (800425c <main+0xa7c>)
 80040d6:	f7fe f8db 	bl	8002290 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, con4_7_Pin, GPIO_PIN_SET); 	// G
 80040da:	2201      	movs	r2, #1
 80040dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80040e0:	4859      	ldr	r0, [pc, #356]	; (8004248 <main+0xa68>)
 80040e2:	f7fe f8d5 	bl	8002290 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, con4_8_Pin, GPIO_PIN_SET); 	// DP
 80040e6:	2201      	movs	r2, #1
 80040e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80040ec:	485c      	ldr	r0, [pc, #368]	; (8004260 <main+0xa80>)
 80040ee:	f7fe f8cf 	bl	8002290 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, con4_9_Pin, GPIO_PIN_RESET); 	// Dig 1
 80040f2:	2200      	movs	r2, #0
 80040f4:	2140      	movs	r1, #64	; 0x40
 80040f6:	485a      	ldr	r0, [pc, #360]	; (8004260 <main+0xa80>)
 80040f8:	f7fe f8ca 	bl	8002290 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, con4_10_Pin, GPIO_PIN_RESET); 	// Dig 2
 80040fc:	2200      	movs	r2, #0
 80040fe:	2180      	movs	r1, #128	; 0x80
 8004100:	4857      	ldr	r0, [pc, #348]	; (8004260 <main+0xa80>)
 8004102:	f7fe f8c5 	bl	8002290 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, con3_9_Pin, GPIO_PIN_RESET); 	// Dig 3
 8004106:	2200      	movs	r2, #0
 8004108:	2120      	movs	r1, #32
 800410a:	4856      	ldr	r0, [pc, #344]	; (8004264 <main+0xa84>)
 800410c:	f7fe f8c0 	bl	8002290 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, con3_10_Pin, GPIO_PIN_RESET); 	// Dig 4
 8004110:	2200      	movs	r2, #0
 8004112:	2110      	movs	r1, #16
 8004114:	4853      	ldr	r0, [pc, #332]	; (8004264 <main+0xa84>)
 8004116:	f7fe f8bb 	bl	8002290 <HAL_GPIO_WritePin>



		// Select digit
		switch(dispIndex1)
 800411a:	4b53      	ldr	r3, [pc, #332]	; (8004268 <main+0xa88>)
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	2b03      	cmp	r3, #3
 8004120:	d822      	bhi.n	8004168 <main+0x988>
 8004122:	a201      	add	r2, pc, #4	; (adr r2, 8004128 <main+0x948>)
 8004124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004128:	08004139 	.word	0x08004139
 800412c:	08004145 	.word	0x08004145
 8004130:	08004151 	.word	0x08004151
 8004134:	0800415d 	.word	0x0800415d
		{
			// Dig 1
			case 0:
				HAL_GPIO_WritePin(GPIOE, con3_10_Pin, GPIO_PIN_SET); 	// Dig 4
 8004138:	2201      	movs	r2, #1
 800413a:	2110      	movs	r1, #16
 800413c:	4849      	ldr	r0, [pc, #292]	; (8004264 <main+0xa84>)
 800413e:	f7fe f8a7 	bl	8002290 <HAL_GPIO_WritePin>
				break;
 8004142:	e011      	b.n	8004168 <main+0x988>

			// Dig 2
			case 1:
				HAL_GPIO_WritePin(GPIOE, con3_9_Pin, GPIO_PIN_SET); 	// Dig 3
 8004144:	2201      	movs	r2, #1
 8004146:	2120      	movs	r1, #32
 8004148:	4846      	ldr	r0, [pc, #280]	; (8004264 <main+0xa84>)
 800414a:	f7fe f8a1 	bl	8002290 <HAL_GPIO_WritePin>
				break;
 800414e:	e00b      	b.n	8004168 <main+0x988>

			// Dig 3
			case 2:
				HAL_GPIO_WritePin(GPIOC, con4_10_Pin, GPIO_PIN_SET); 	// Dig 2
 8004150:	2201      	movs	r2, #1
 8004152:	2180      	movs	r1, #128	; 0x80
 8004154:	4842      	ldr	r0, [pc, #264]	; (8004260 <main+0xa80>)
 8004156:	f7fe f89b 	bl	8002290 <HAL_GPIO_WritePin>
				break;
 800415a:	e005      	b.n	8004168 <main+0x988>

			// Dig 4
			case 3:
				HAL_GPIO_WritePin(GPIOC, con4_9_Pin, GPIO_PIN_SET); 	// Dig 1
 800415c:	2201      	movs	r2, #1
 800415e:	2140      	movs	r1, #64	; 0x40
 8004160:	483f      	ldr	r0, [pc, #252]	; (8004260 <main+0xa80>)
 8004162:	f7fe f895 	bl	8002290 <HAL_GPIO_WritePin>
				break;
 8004166:	bf00      	nop

		}


		// Update the digit
		switch(desiredDispValueDigits1[dispIndex1])
 8004168:	4b3f      	ldr	r3, [pc, #252]	; (8004268 <main+0xa88>)
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	461a      	mov	r2, r3
 800416e:	4b39      	ldr	r3, [pc, #228]	; (8004254 <main+0xa74>)
 8004170:	5c9b      	ldrb	r3, [r3, r2]
 8004172:	2b09      	cmp	r3, #9
 8004174:	f200 813b 	bhi.w	80043ee <main+0xc0e>
 8004178:	a201      	add	r2, pc, #4	; (adr r2, 8004180 <main+0x9a0>)
 800417a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800417e:	bf00      	nop
 8004180:	080041a9 	.word	0x080041a9
 8004184:	080041e9 	.word	0x080041e9
 8004188:	080041ff 	.word	0x080041ff
 800418c:	0800426d 	.word	0x0800426d
 8004190:	080042a3 	.word	0x080042a3
 8004194:	080042d1 	.word	0x080042d1
 8004198:	08004309 	.word	0x08004309
 800419c:	0800434b 	.word	0x0800434b
 80041a0:	0800436b 	.word	0x0800436b
 80041a4:	080043b7 	.word	0x080043b7
		{
			case 0:
				HAL_GPIO_WritePin(GPIOF, con4_1_Pin, GPIO_PIN_RESET); 	// A
 80041a8:	2200      	movs	r2, #0
 80041aa:	2101      	movs	r1, #1
 80041ac:	4823      	ldr	r0, [pc, #140]	; (800423c <main+0xa5c>)
 80041ae:	f7fe f86f 	bl	8002290 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOF, con4_2_Pin, GPIO_PIN_RESET); 	// B
 80041b2:	2200      	movs	r2, #0
 80041b4:	2102      	movs	r1, #2
 80041b6:	4821      	ldr	r0, [pc, #132]	; (800423c <main+0xa5c>)
 80041b8:	f7fe f86a 	bl	8002290 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, con4_3_Pin, GPIO_PIN_RESET); 	// C
 80041bc:	2200      	movs	r2, #0
 80041be:	2120      	movs	r1, #32
 80041c0:	4826      	ldr	r0, [pc, #152]	; (800425c <main+0xa7c>)
 80041c2:	f7fe f865 	bl	8002290 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, con4_4_Pin, GPIO_PIN_RESET); 	// D
 80041c6:	2200      	movs	r2, #0
 80041c8:	2140      	movs	r1, #64	; 0x40
 80041ca:	4824      	ldr	r0, [pc, #144]	; (800425c <main+0xa7c>)
 80041cc:	f7fe f860 	bl	8002290 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, con4_5_Pin, GPIO_PIN_RESET); 	// E
 80041d0:	2200      	movs	r2, #0
 80041d2:	2180      	movs	r1, #128	; 0x80
 80041d4:	4821      	ldr	r0, [pc, #132]	; (800425c <main+0xa7c>)
 80041d6:	f7fe f85b 	bl	8002290 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, con4_6_Pin, GPIO_PIN_RESET); 	// F
 80041da:	2200      	movs	r2, #0
 80041dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80041e0:	481e      	ldr	r0, [pc, #120]	; (800425c <main+0xa7c>)
 80041e2:	f7fe f855 	bl	8002290 <HAL_GPIO_WritePin>
				break;
 80041e6:	e102      	b.n	80043ee <main+0xc0e>


			case 1:
				HAL_GPIO_WritePin(GPIOF, con4_2_Pin, GPIO_PIN_RESET); 	// B
 80041e8:	2200      	movs	r2, #0
 80041ea:	2102      	movs	r1, #2
 80041ec:	4813      	ldr	r0, [pc, #76]	; (800423c <main+0xa5c>)
 80041ee:	f7fe f84f 	bl	8002290 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, con4_3_Pin, GPIO_PIN_RESET); 	// C
 80041f2:	2200      	movs	r2, #0
 80041f4:	2120      	movs	r1, #32
 80041f6:	4819      	ldr	r0, [pc, #100]	; (800425c <main+0xa7c>)
 80041f8:	f7fe f84a 	bl	8002290 <HAL_GPIO_WritePin>
				break;
 80041fc:	e0f7      	b.n	80043ee <main+0xc0e>

			case 2:
				HAL_GPIO_WritePin(GPIOF, con4_1_Pin, GPIO_PIN_RESET); 	// A
 80041fe:	2200      	movs	r2, #0
 8004200:	2101      	movs	r1, #1
 8004202:	480e      	ldr	r0, [pc, #56]	; (800423c <main+0xa5c>)
 8004204:	f7fe f844 	bl	8002290 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOF, con4_2_Pin, GPIO_PIN_RESET); 	// B
 8004208:	2200      	movs	r2, #0
 800420a:	2102      	movs	r1, #2
 800420c:	480b      	ldr	r0, [pc, #44]	; (800423c <main+0xa5c>)
 800420e:	f7fe f83f 	bl	8002290 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, con4_4_Pin, GPIO_PIN_RESET); 	// D
 8004212:	2200      	movs	r2, #0
 8004214:	2140      	movs	r1, #64	; 0x40
 8004216:	4811      	ldr	r0, [pc, #68]	; (800425c <main+0xa7c>)
 8004218:	f7fe f83a 	bl	8002290 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, con4_5_Pin, GPIO_PIN_RESET); 	// E
 800421c:	2200      	movs	r2, #0
 800421e:	2180      	movs	r1, #128	; 0x80
 8004220:	480e      	ldr	r0, [pc, #56]	; (800425c <main+0xa7c>)
 8004222:	f7fe f835 	bl	8002290 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, con4_7_Pin, GPIO_PIN_RESET); 	// G
 8004226:	2200      	movs	r2, #0
 8004228:	f44f 7180 	mov.w	r1, #256	; 0x100
 800422c:	4806      	ldr	r0, [pc, #24]	; (8004248 <main+0xa68>)
 800422e:	f7fe f82f 	bl	8002290 <HAL_GPIO_WritePin>
				break;
 8004232:	e0dc      	b.n	80043ee <main+0xc0e>
 8004234:	20000034 	.word	0x20000034
 8004238:	20000030 	.word	0x20000030
 800423c:	40021400 	.word	0x40021400
 8004240:	20000038 	.word	0x20000038
 8004244:	2000003c 	.word	0x2000003c
 8004248:	40020000 	.word	0x40020000
 800424c:	2000006b 	.word	0x2000006b
 8004250:	2000006c 	.word	0x2000006c
 8004254:	20000070 	.word	0x20000070
 8004258:	cccccccd 	.word	0xcccccccd
 800425c:	40020400 	.word	0x40020400
 8004260:	40020800 	.word	0x40020800
 8004264:	40021000 	.word	0x40021000
 8004268:	20000074 	.word	0x20000074

			case 3:
				HAL_GPIO_WritePin(GPIOF, con4_1_Pin, GPIO_PIN_RESET); 	// A
 800426c:	2200      	movs	r2, #0
 800426e:	2101      	movs	r1, #1
 8004270:	48b9      	ldr	r0, [pc, #740]	; (8004558 <main+0xd78>)
 8004272:	f7fe f80d 	bl	8002290 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOF, con4_2_Pin, GPIO_PIN_RESET); 	// B
 8004276:	2200      	movs	r2, #0
 8004278:	2102      	movs	r1, #2
 800427a:	48b7      	ldr	r0, [pc, #732]	; (8004558 <main+0xd78>)
 800427c:	f7fe f808 	bl	8002290 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, con4_3_Pin, GPIO_PIN_RESET); 	// C
 8004280:	2200      	movs	r2, #0
 8004282:	2120      	movs	r1, #32
 8004284:	48b5      	ldr	r0, [pc, #724]	; (800455c <main+0xd7c>)
 8004286:	f7fe f803 	bl	8002290 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, con4_4_Pin, GPIO_PIN_RESET); 	// D
 800428a:	2200      	movs	r2, #0
 800428c:	2140      	movs	r1, #64	; 0x40
 800428e:	48b3      	ldr	r0, [pc, #716]	; (800455c <main+0xd7c>)
 8004290:	f7fd fffe 	bl	8002290 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, con4_7_Pin, GPIO_PIN_RESET); 	// G
 8004294:	2200      	movs	r2, #0
 8004296:	f44f 7180 	mov.w	r1, #256	; 0x100
 800429a:	48b1      	ldr	r0, [pc, #708]	; (8004560 <main+0xd80>)
 800429c:	f7fd fff8 	bl	8002290 <HAL_GPIO_WritePin>
				break;
 80042a0:	e0a5      	b.n	80043ee <main+0xc0e>

			case 4:
				HAL_GPIO_WritePin(GPIOF, con4_2_Pin, GPIO_PIN_RESET); 	// B
 80042a2:	2200      	movs	r2, #0
 80042a4:	2102      	movs	r1, #2
 80042a6:	48ac      	ldr	r0, [pc, #688]	; (8004558 <main+0xd78>)
 80042a8:	f7fd fff2 	bl	8002290 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, con4_3_Pin, GPIO_PIN_RESET); 	// C
 80042ac:	2200      	movs	r2, #0
 80042ae:	2120      	movs	r1, #32
 80042b0:	48aa      	ldr	r0, [pc, #680]	; (800455c <main+0xd7c>)
 80042b2:	f7fd ffed 	bl	8002290 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, con4_6_Pin, GPIO_PIN_RESET); 	// F
 80042b6:	2200      	movs	r2, #0
 80042b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80042bc:	48a7      	ldr	r0, [pc, #668]	; (800455c <main+0xd7c>)
 80042be:	f7fd ffe7 	bl	8002290 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, con4_7_Pin, GPIO_PIN_RESET); 	// G
 80042c2:	2200      	movs	r2, #0
 80042c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80042c8:	48a5      	ldr	r0, [pc, #660]	; (8004560 <main+0xd80>)
 80042ca:	f7fd ffe1 	bl	8002290 <HAL_GPIO_WritePin>
				break;
 80042ce:	e08e      	b.n	80043ee <main+0xc0e>

			case 5:
				HAL_GPIO_WritePin(GPIOF, con4_1_Pin, GPIO_PIN_RESET); 	// A
 80042d0:	2200      	movs	r2, #0
 80042d2:	2101      	movs	r1, #1
 80042d4:	48a0      	ldr	r0, [pc, #640]	; (8004558 <main+0xd78>)
 80042d6:	f7fd ffdb 	bl	8002290 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, con4_3_Pin, GPIO_PIN_RESET); 	// C
 80042da:	2200      	movs	r2, #0
 80042dc:	2120      	movs	r1, #32
 80042de:	489f      	ldr	r0, [pc, #636]	; (800455c <main+0xd7c>)
 80042e0:	f7fd ffd6 	bl	8002290 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, con4_4_Pin, GPIO_PIN_RESET); 	// D
 80042e4:	2200      	movs	r2, #0
 80042e6:	2140      	movs	r1, #64	; 0x40
 80042e8:	489c      	ldr	r0, [pc, #624]	; (800455c <main+0xd7c>)
 80042ea:	f7fd ffd1 	bl	8002290 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, con4_6_Pin, GPIO_PIN_RESET); 	// F
 80042ee:	2200      	movs	r2, #0
 80042f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80042f4:	4899      	ldr	r0, [pc, #612]	; (800455c <main+0xd7c>)
 80042f6:	f7fd ffcb 	bl	8002290 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, con4_7_Pin, GPIO_PIN_RESET); 	// G
 80042fa:	2200      	movs	r2, #0
 80042fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004300:	4897      	ldr	r0, [pc, #604]	; (8004560 <main+0xd80>)
 8004302:	f7fd ffc5 	bl	8002290 <HAL_GPIO_WritePin>
				break;
 8004306:	e072      	b.n	80043ee <main+0xc0e>

			case 6:
				HAL_GPIO_WritePin(GPIOF, con4_1_Pin, GPIO_PIN_RESET); 	// A
 8004308:	2200      	movs	r2, #0
 800430a:	2101      	movs	r1, #1
 800430c:	4892      	ldr	r0, [pc, #584]	; (8004558 <main+0xd78>)
 800430e:	f7fd ffbf 	bl	8002290 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, con4_3_Pin, GPIO_PIN_RESET); 	// C
 8004312:	2200      	movs	r2, #0
 8004314:	2120      	movs	r1, #32
 8004316:	4891      	ldr	r0, [pc, #580]	; (800455c <main+0xd7c>)
 8004318:	f7fd ffba 	bl	8002290 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, con4_4_Pin, GPIO_PIN_RESET); 	// D
 800431c:	2200      	movs	r2, #0
 800431e:	2140      	movs	r1, #64	; 0x40
 8004320:	488e      	ldr	r0, [pc, #568]	; (800455c <main+0xd7c>)
 8004322:	f7fd ffb5 	bl	8002290 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, con4_5_Pin, GPIO_PIN_RESET); 	// E
 8004326:	2200      	movs	r2, #0
 8004328:	2180      	movs	r1, #128	; 0x80
 800432a:	488c      	ldr	r0, [pc, #560]	; (800455c <main+0xd7c>)
 800432c:	f7fd ffb0 	bl	8002290 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, con4_6_Pin, GPIO_PIN_RESET); 	// F
 8004330:	2200      	movs	r2, #0
 8004332:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004336:	4889      	ldr	r0, [pc, #548]	; (800455c <main+0xd7c>)
 8004338:	f7fd ffaa 	bl	8002290 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, con4_7_Pin, GPIO_PIN_RESET);	// G
 800433c:	2200      	movs	r2, #0
 800433e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004342:	4887      	ldr	r0, [pc, #540]	; (8004560 <main+0xd80>)
 8004344:	f7fd ffa4 	bl	8002290 <HAL_GPIO_WritePin>
				break;
 8004348:	e051      	b.n	80043ee <main+0xc0e>

			case 7:
				HAL_GPIO_WritePin(GPIOF, con4_1_Pin, GPIO_PIN_RESET); 	// A
 800434a:	2200      	movs	r2, #0
 800434c:	2101      	movs	r1, #1
 800434e:	4882      	ldr	r0, [pc, #520]	; (8004558 <main+0xd78>)
 8004350:	f7fd ff9e 	bl	8002290 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOF, con4_2_Pin, GPIO_PIN_RESET); 	// B
 8004354:	2200      	movs	r2, #0
 8004356:	2102      	movs	r1, #2
 8004358:	487f      	ldr	r0, [pc, #508]	; (8004558 <main+0xd78>)
 800435a:	f7fd ff99 	bl	8002290 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, con4_3_Pin, GPIO_PIN_RESET); 	// C
 800435e:	2200      	movs	r2, #0
 8004360:	2120      	movs	r1, #32
 8004362:	487e      	ldr	r0, [pc, #504]	; (800455c <main+0xd7c>)
 8004364:	f7fd ff94 	bl	8002290 <HAL_GPIO_WritePin>
				break;
 8004368:	e041      	b.n	80043ee <main+0xc0e>

			case 8:
				HAL_GPIO_WritePin(GPIOF, con4_1_Pin, GPIO_PIN_RESET); 	// A
 800436a:	2200      	movs	r2, #0
 800436c:	2101      	movs	r1, #1
 800436e:	487a      	ldr	r0, [pc, #488]	; (8004558 <main+0xd78>)
 8004370:	f7fd ff8e 	bl	8002290 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOF, con4_2_Pin, GPIO_PIN_RESET); 	// B
 8004374:	2200      	movs	r2, #0
 8004376:	2102      	movs	r1, #2
 8004378:	4877      	ldr	r0, [pc, #476]	; (8004558 <main+0xd78>)
 800437a:	f7fd ff89 	bl	8002290 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, con4_3_Pin, GPIO_PIN_RESET); 	// C
 800437e:	2200      	movs	r2, #0
 8004380:	2120      	movs	r1, #32
 8004382:	4876      	ldr	r0, [pc, #472]	; (800455c <main+0xd7c>)
 8004384:	f7fd ff84 	bl	8002290 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, con4_4_Pin, GPIO_PIN_RESET); 	// D
 8004388:	2200      	movs	r2, #0
 800438a:	2140      	movs	r1, #64	; 0x40
 800438c:	4873      	ldr	r0, [pc, #460]	; (800455c <main+0xd7c>)
 800438e:	f7fd ff7f 	bl	8002290 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, con4_5_Pin, GPIO_PIN_RESET); 	// E
 8004392:	2200      	movs	r2, #0
 8004394:	2180      	movs	r1, #128	; 0x80
 8004396:	4871      	ldr	r0, [pc, #452]	; (800455c <main+0xd7c>)
 8004398:	f7fd ff7a 	bl	8002290 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, con4_6_Pin, GPIO_PIN_RESET); 	// F
 800439c:	2200      	movs	r2, #0
 800439e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80043a2:	486e      	ldr	r0, [pc, #440]	; (800455c <main+0xd7c>)
 80043a4:	f7fd ff74 	bl	8002290 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, con4_7_Pin, GPIO_PIN_RESET); 	// G
 80043a8:	2200      	movs	r2, #0
 80043aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80043ae:	486c      	ldr	r0, [pc, #432]	; (8004560 <main+0xd80>)
 80043b0:	f7fd ff6e 	bl	8002290 <HAL_GPIO_WritePin>
				break;
 80043b4:	e01b      	b.n	80043ee <main+0xc0e>

			case 9:
				HAL_GPIO_WritePin(GPIOF, con4_1_Pin, GPIO_PIN_RESET); 	// A
 80043b6:	2200      	movs	r2, #0
 80043b8:	2101      	movs	r1, #1
 80043ba:	4867      	ldr	r0, [pc, #412]	; (8004558 <main+0xd78>)
 80043bc:	f7fd ff68 	bl	8002290 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOF, con4_2_Pin, GPIO_PIN_RESET); 	// B
 80043c0:	2200      	movs	r2, #0
 80043c2:	2102      	movs	r1, #2
 80043c4:	4864      	ldr	r0, [pc, #400]	; (8004558 <main+0xd78>)
 80043c6:	f7fd ff63 	bl	8002290 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, con4_3_Pin, GPIO_PIN_RESET); 	// C
 80043ca:	2200      	movs	r2, #0
 80043cc:	2120      	movs	r1, #32
 80043ce:	4863      	ldr	r0, [pc, #396]	; (800455c <main+0xd7c>)
 80043d0:	f7fd ff5e 	bl	8002290 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, con4_6_Pin, GPIO_PIN_RESET); 	// F
 80043d4:	2200      	movs	r2, #0
 80043d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80043da:	4860      	ldr	r0, [pc, #384]	; (800455c <main+0xd7c>)
 80043dc:	f7fd ff58 	bl	8002290 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, con4_7_Pin, GPIO_PIN_RESET); 	// G
 80043e0:	2200      	movs	r2, #0
 80043e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80043e6:	485e      	ldr	r0, [pc, #376]	; (8004560 <main+0xd80>)
 80043e8:	f7fd ff52 	bl	8002290 <HAL_GPIO_WritePin>
				break;
 80043ec:	bf00      	nop

		}

		// Update the index
		dispIndex1++;
 80043ee:	4b5d      	ldr	r3, [pc, #372]	; (8004564 <main+0xd84>)
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	3301      	adds	r3, #1
 80043f4:	b2da      	uxtb	r2, r3
 80043f6:	4b5b      	ldr	r3, [pc, #364]	; (8004564 <main+0xd84>)
 80043f8:	701a      	strb	r2, [r3, #0]
		if (dispIndex1 > 3) dispIndex1 = 0;
 80043fa:	4b5a      	ldr	r3, [pc, #360]	; (8004564 <main+0xd84>)
 80043fc:	781b      	ldrb	r3, [r3, #0]
 80043fe:	2b03      	cmp	r3, #3
 8004400:	d902      	bls.n	8004408 <main+0xc28>
 8004402:	4b58      	ldr	r3, [pc, #352]	; (8004564 <main+0xd84>)
 8004404:	2200      	movs	r2, #0
 8004406:	701a      	strb	r2, [r3, #0]

			if (desiredDispValue2 != currentDispValue2)
 8004408:	4b57      	ldr	r3, [pc, #348]	; (8004568 <main+0xd88>)
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	461a      	mov	r2, r3
 800440e:	4b57      	ldr	r3, [pc, #348]	; (800456c <main+0xd8c>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	429a      	cmp	r2, r3
 8004414:	d03b      	beq.n	800448e <main+0xcae>
			{
				memcpy(&desiredDispValueDigits2, 0x00, sizeof(tempDigits2));
 8004416:	2300      	movs	r3, #0
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a55      	ldr	r2, [pc, #340]	; (8004570 <main+0xd90>)
 800441c:	6013      	str	r3, [r2, #0]
				currentDispValue2 = desiredDispValue2;
 800441e:	4b52      	ldr	r3, [pc, #328]	; (8004568 <main+0xd88>)
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	461a      	mov	r2, r3
 8004424:	4b51      	ldr	r3, [pc, #324]	; (800456c <main+0xd8c>)
 8004426:	601a      	str	r2, [r3, #0]
				for (int i = 0; desiredDispValue2 > 0; i++)
 8004428:	2300      	movs	r3, #0
 800442a:	60bb      	str	r3, [r7, #8]
 800442c:	e026      	b.n	800447c <main+0xc9c>
				{
					desiredDispValueDigits2[i] = desiredDispValue2 % 10;
 800442e:	4b4e      	ldr	r3, [pc, #312]	; (8004568 <main+0xd88>)
 8004430:	781a      	ldrb	r2, [r3, #0]
 8004432:	4b50      	ldr	r3, [pc, #320]	; (8004574 <main+0xd94>)
 8004434:	fba3 1302 	umull	r1, r3, r3, r2
 8004438:	08d9      	lsrs	r1, r3, #3
 800443a:	460b      	mov	r3, r1
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	440b      	add	r3, r1
 8004440:	005b      	lsls	r3, r3, #1
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	b2d9      	uxtb	r1, r3
 8004446:	4a4a      	ldr	r2, [pc, #296]	; (8004570 <main+0xd90>)
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	4413      	add	r3, r2
 800444c:	460a      	mov	r2, r1
 800444e:	701a      	strb	r2, [r3, #0]
					 desiredDispValue2 -= desiredDispValueDigits2[i];
 8004450:	4b45      	ldr	r3, [pc, #276]	; (8004568 <main+0xd88>)
 8004452:	781a      	ldrb	r2, [r3, #0]
 8004454:	4946      	ldr	r1, [pc, #280]	; (8004570 <main+0xd90>)
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	440b      	add	r3, r1
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	b2da      	uxtb	r2, r3
 8004460:	4b41      	ldr	r3, [pc, #260]	; (8004568 <main+0xd88>)
 8004462:	701a      	strb	r2, [r3, #0]
					 desiredDispValue2 /= 10;
 8004464:	4b40      	ldr	r3, [pc, #256]	; (8004568 <main+0xd88>)
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	4a42      	ldr	r2, [pc, #264]	; (8004574 <main+0xd94>)
 800446a:	fba2 2303 	umull	r2, r3, r2, r3
 800446e:	08db      	lsrs	r3, r3, #3
 8004470:	b2da      	uxtb	r2, r3
 8004472:	4b3d      	ldr	r3, [pc, #244]	; (8004568 <main+0xd88>)
 8004474:	701a      	strb	r2, [r3, #0]
				for (int i = 0; desiredDispValue2 > 0; i++)
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	3301      	adds	r3, #1
 800447a:	60bb      	str	r3, [r7, #8]
 800447c:	4b3a      	ldr	r3, [pc, #232]	; (8004568 <main+0xd88>)
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d1d4      	bne.n	800442e <main+0xc4e>
				}

				desiredDispValue2 = currentDispValue2;
 8004484:	4b39      	ldr	r3, [pc, #228]	; (800456c <main+0xd8c>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	b2da      	uxtb	r2, r3
 800448a:	4b37      	ldr	r3, [pc, #220]	; (8004568 <main+0xd88>)
 800448c:	701a      	strb	r2, [r3, #0]
			}

			// Clear the display
			HAL_GPIO_WritePin(GPIOC, con2_1_Pin, GPIO_PIN_SET); 	// A
 800448e:	2201      	movs	r2, #1
 8004490:	2120      	movs	r1, #32
 8004492:	4839      	ldr	r0, [pc, #228]	; (8004578 <main+0xd98>)
 8004494:	f7fd fefc 	bl	8002290 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, con2_2_Pin, GPIO_PIN_SET); 	// B
 8004498:	2201      	movs	r2, #1
 800449a:	2110      	movs	r1, #16
 800449c:	4836      	ldr	r0, [pc, #216]	; (8004578 <main+0xd98>)
 800449e:	f7fd fef7 	bl	8002290 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, con2_3_Pin, GPIO_PIN_SET); 	// C
 80044a2:	2201      	movs	r2, #1
 80044a4:	2108      	movs	r1, #8
 80044a6:	4834      	ldr	r0, [pc, #208]	; (8004578 <main+0xd98>)
 80044a8:	f7fd fef2 	bl	8002290 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, con2_4_Pin, GPIO_PIN_SET); 	// D
 80044ac:	2201      	movs	r2, #1
 80044ae:	2104      	movs	r1, #4
 80044b0:	4831      	ldr	r0, [pc, #196]	; (8004578 <main+0xd98>)
 80044b2:	f7fd feed 	bl	8002290 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, con2_5_Pin, GPIO_PIN_SET); 	// E
 80044b6:	2201      	movs	r2, #1
 80044b8:	2102      	movs	r1, #2
 80044ba:	482f      	ldr	r0, [pc, #188]	; (8004578 <main+0xd98>)
 80044bc:	f7fd fee8 	bl	8002290 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, con2_6_Pin, GPIO_PIN_SET); 	// F
 80044c0:	2201      	movs	r2, #1
 80044c2:	2101      	movs	r1, #1
 80044c4:	482c      	ldr	r0, [pc, #176]	; (8004578 <main+0xd98>)
 80044c6:	f7fd fee3 	bl	8002290 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, con2_7_Pin, GPIO_PIN_SET); 	// G
 80044ca:	2201      	movs	r2, #1
 80044cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80044d0:	482a      	ldr	r0, [pc, #168]	; (800457c <main+0xd9c>)
 80044d2:	f7fd fedd 	bl	8002290 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, con2_8_Pin, GPIO_PIN_SET); 	// DP
 80044d6:	2201      	movs	r2, #1
 80044d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80044dc:	4827      	ldr	r0, [pc, #156]	; (800457c <main+0xd9c>)
 80044de:	f7fd fed7 	bl	8002290 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(GPIOD, con2_9_Pin, GPIO_PIN_RESET); 	// Dig 1
 80044e2:	2200      	movs	r2, #0
 80044e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80044e8:	4824      	ldr	r0, [pc, #144]	; (800457c <main+0xd9c>)
 80044ea:	f7fd fed1 	bl	8002290 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, con2_10_Pin, GPIO_PIN_RESET); 	// Dig 2
 80044ee:	2200      	movs	r2, #0
 80044f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80044f4:	4821      	ldr	r0, [pc, #132]	; (800457c <main+0xd9c>)
 80044f6:	f7fd fecb 	bl	8002290 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, con3_1_Pin, GPIO_PIN_RESET); 	// Dig 3
 80044fa:	2200      	movs	r2, #0
 80044fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004500:	4815      	ldr	r0, [pc, #84]	; (8004558 <main+0xd78>)
 8004502:	f7fd fec5 	bl	8002290 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, con3_2_Pin, GPIO_PIN_RESET); 	// Dig 4
 8004506:	2200      	movs	r2, #0
 8004508:	2180      	movs	r1, #128	; 0x80
 800450a:	4813      	ldr	r0, [pc, #76]	; (8004558 <main+0xd78>)
 800450c:	f7fd fec0 	bl	8002290 <HAL_GPIO_WritePin>

			// Select digit
			switch(dispIndex2)
 8004510:	4b1b      	ldr	r3, [pc, #108]	; (8004580 <main+0xda0>)
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	2b03      	cmp	r3, #3
 8004516:	d83c      	bhi.n	8004592 <main+0xdb2>
 8004518:	a201      	add	r2, pc, #4	; (adr r2, 8004520 <main+0xd40>)
 800451a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800451e:	bf00      	nop
 8004520:	08004531 	.word	0x08004531
 8004524:	0800453d 	.word	0x0800453d
 8004528:	0800454b 	.word	0x0800454b
 800452c:	08004585 	.word	0x08004585
			{
				// Dig 1
				case 0:
					HAL_GPIO_WritePin(GPIOF, con3_2_Pin, GPIO_PIN_SET); 	// Dig 4
 8004530:	2201      	movs	r2, #1
 8004532:	2180      	movs	r1, #128	; 0x80
 8004534:	4808      	ldr	r0, [pc, #32]	; (8004558 <main+0xd78>)
 8004536:	f7fd feab 	bl	8002290 <HAL_GPIO_WritePin>
					break;
 800453a:	e02a      	b.n	8004592 <main+0xdb2>

				// Dig 2
				case 1:
					HAL_GPIO_WritePin(GPIOF, con3_1_Pin, GPIO_PIN_SET); 	// Dig 3
 800453c:	2201      	movs	r2, #1
 800453e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004542:	4805      	ldr	r0, [pc, #20]	; (8004558 <main+0xd78>)
 8004544:	f7fd fea4 	bl	8002290 <HAL_GPIO_WritePin>
					break;
 8004548:	e023      	b.n	8004592 <main+0xdb2>

				// Dig 3
				case 2:
					HAL_GPIO_WritePin(GPIOD, con2_10_Pin, GPIO_PIN_SET); 	// Dig 2
 800454a:	2201      	movs	r2, #1
 800454c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004550:	480a      	ldr	r0, [pc, #40]	; (800457c <main+0xd9c>)
 8004552:	f7fd fe9d 	bl	8002290 <HAL_GPIO_WritePin>
					break;
 8004556:	e01c      	b.n	8004592 <main+0xdb2>
 8004558:	40021400 	.word	0x40021400
 800455c:	40020400 	.word	0x40020400
 8004560:	40020000 	.word	0x40020000
 8004564:	20000074 	.word	0x20000074
 8004568:	20000075 	.word	0x20000075
 800456c:	20000078 	.word	0x20000078
 8004570:	2000007c 	.word	0x2000007c
 8004574:	cccccccd 	.word	0xcccccccd
 8004578:	40020800 	.word	0x40020800
 800457c:	40020c00 	.word	0x40020c00
 8004580:	20000080 	.word	0x20000080

				// Dig 4
				case 3:
					HAL_GPIO_WritePin(GPIOD, con2_9_Pin, GPIO_PIN_SET); 	// Dig 1
 8004584:	2201      	movs	r2, #1
 8004586:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800458a:	489a      	ldr	r0, [pc, #616]	; (80047f4 <main+0x1014>)
 800458c:	f7fd fe80 	bl	8002290 <HAL_GPIO_WritePin>
					break;
 8004590:	bf00      	nop
			}

			// Update the digit
			switch(desiredDispValueDigits2[dispIndex2])
 8004592:	4b99      	ldr	r3, [pc, #612]	; (80047f8 <main+0x1018>)
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	461a      	mov	r2, r3
 8004598:	4b98      	ldr	r3, [pc, #608]	; (80047fc <main+0x101c>)
 800459a:	5c9b      	ldrb	r3, [r3, r2]
 800459c:	2b09      	cmp	r3, #9
 800459e:	f200 8118 	bhi.w	80047d2 <main+0xff2>
 80045a2:	a201      	add	r2, pc, #4	; (adr r2, 80045a8 <main+0xdc8>)
 80045a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a8:	080045d1 	.word	0x080045d1
 80045ac:	0800460f 	.word	0x0800460f
 80045b0:	08004625 	.word	0x08004625
 80045b4:	0800465b 	.word	0x0800465b
 80045b8:	08004691 	.word	0x08004691
 80045bc:	080046bd 	.word	0x080046bd
 80045c0:	080046f3 	.word	0x080046f3
 80045c4:	08004733 	.word	0x08004733
 80045c8:	08004753 	.word	0x08004753
 80045cc:	0800479d 	.word	0x0800479d
			{
				case 0:
					HAL_GPIO_WritePin(GPIOC, con2_1_Pin, GPIO_PIN_RESET); 	// A
 80045d0:	2200      	movs	r2, #0
 80045d2:	2120      	movs	r1, #32
 80045d4:	488a      	ldr	r0, [pc, #552]	; (8004800 <main+0x1020>)
 80045d6:	f7fd fe5b 	bl	8002290 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, con2_2_Pin, GPIO_PIN_RESET); 	// B
 80045da:	2200      	movs	r2, #0
 80045dc:	2110      	movs	r1, #16
 80045de:	4888      	ldr	r0, [pc, #544]	; (8004800 <main+0x1020>)
 80045e0:	f7fd fe56 	bl	8002290 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, con2_3_Pin, GPIO_PIN_RESET); 	// C
 80045e4:	2200      	movs	r2, #0
 80045e6:	2108      	movs	r1, #8
 80045e8:	4885      	ldr	r0, [pc, #532]	; (8004800 <main+0x1020>)
 80045ea:	f7fd fe51 	bl	8002290 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, con2_4_Pin, GPIO_PIN_RESET); 	// D
 80045ee:	2200      	movs	r2, #0
 80045f0:	2104      	movs	r1, #4
 80045f2:	4883      	ldr	r0, [pc, #524]	; (8004800 <main+0x1020>)
 80045f4:	f7fd fe4c 	bl	8002290 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, con2_5_Pin, GPIO_PIN_RESET); 	// E
 80045f8:	2200      	movs	r2, #0
 80045fa:	2102      	movs	r1, #2
 80045fc:	4880      	ldr	r0, [pc, #512]	; (8004800 <main+0x1020>)
 80045fe:	f7fd fe47 	bl	8002290 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, con2_6_Pin, GPIO_PIN_RESET); 	// F
 8004602:	2200      	movs	r2, #0
 8004604:	2101      	movs	r1, #1
 8004606:	487e      	ldr	r0, [pc, #504]	; (8004800 <main+0x1020>)
 8004608:	f7fd fe42 	bl	8002290 <HAL_GPIO_WritePin>
					break;
 800460c:	e0e1      	b.n	80047d2 <main+0xff2>


				case 1:
					HAL_GPIO_WritePin(GPIOC, con2_2_Pin, GPIO_PIN_RESET); 	// B
 800460e:	2200      	movs	r2, #0
 8004610:	2110      	movs	r1, #16
 8004612:	487b      	ldr	r0, [pc, #492]	; (8004800 <main+0x1020>)
 8004614:	f7fd fe3c 	bl	8002290 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, con2_3_Pin, GPIO_PIN_RESET); 	// C
 8004618:	2200      	movs	r2, #0
 800461a:	2108      	movs	r1, #8
 800461c:	4878      	ldr	r0, [pc, #480]	; (8004800 <main+0x1020>)
 800461e:	f7fd fe37 	bl	8002290 <HAL_GPIO_WritePin>
					break;
 8004622:	e0d6      	b.n	80047d2 <main+0xff2>

				case 2:
					HAL_GPIO_WritePin(GPIOC, con2_1_Pin, GPIO_PIN_RESET); 	// A
 8004624:	2200      	movs	r2, #0
 8004626:	2120      	movs	r1, #32
 8004628:	4875      	ldr	r0, [pc, #468]	; (8004800 <main+0x1020>)
 800462a:	f7fd fe31 	bl	8002290 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, con2_2_Pin, GPIO_PIN_RESET); 	// B
 800462e:	2200      	movs	r2, #0
 8004630:	2110      	movs	r1, #16
 8004632:	4873      	ldr	r0, [pc, #460]	; (8004800 <main+0x1020>)
 8004634:	f7fd fe2c 	bl	8002290 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, con2_4_Pin, GPIO_PIN_RESET); 	// D
 8004638:	2200      	movs	r2, #0
 800463a:	2104      	movs	r1, #4
 800463c:	4870      	ldr	r0, [pc, #448]	; (8004800 <main+0x1020>)
 800463e:	f7fd fe27 	bl	8002290 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, con2_5_Pin, GPIO_PIN_RESET); 	// E
 8004642:	2200      	movs	r2, #0
 8004644:	2102      	movs	r1, #2
 8004646:	486e      	ldr	r0, [pc, #440]	; (8004800 <main+0x1020>)
 8004648:	f7fd fe22 	bl	8002290 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOD, con2_7_Pin, GPIO_PIN_RESET); 	// G
 800464c:	2200      	movs	r2, #0
 800464e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004652:	4868      	ldr	r0, [pc, #416]	; (80047f4 <main+0x1014>)
 8004654:	f7fd fe1c 	bl	8002290 <HAL_GPIO_WritePin>
					break;
 8004658:	e0bb      	b.n	80047d2 <main+0xff2>

				case 3:
					HAL_GPIO_WritePin(GPIOC, con2_1_Pin, GPIO_PIN_RESET); 	// A
 800465a:	2200      	movs	r2, #0
 800465c:	2120      	movs	r1, #32
 800465e:	4868      	ldr	r0, [pc, #416]	; (8004800 <main+0x1020>)
 8004660:	f7fd fe16 	bl	8002290 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, con2_2_Pin, GPIO_PIN_RESET); 	// B
 8004664:	2200      	movs	r2, #0
 8004666:	2110      	movs	r1, #16
 8004668:	4865      	ldr	r0, [pc, #404]	; (8004800 <main+0x1020>)
 800466a:	f7fd fe11 	bl	8002290 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, con2_3_Pin, GPIO_PIN_RESET); 	// C
 800466e:	2200      	movs	r2, #0
 8004670:	2108      	movs	r1, #8
 8004672:	4863      	ldr	r0, [pc, #396]	; (8004800 <main+0x1020>)
 8004674:	f7fd fe0c 	bl	8002290 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, con2_4_Pin, GPIO_PIN_RESET); 	// D
 8004678:	2200      	movs	r2, #0
 800467a:	2104      	movs	r1, #4
 800467c:	4860      	ldr	r0, [pc, #384]	; (8004800 <main+0x1020>)
 800467e:	f7fd fe07 	bl	8002290 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOD, con2_7_Pin, GPIO_PIN_RESET); 	// G
 8004682:	2200      	movs	r2, #0
 8004684:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004688:	485a      	ldr	r0, [pc, #360]	; (80047f4 <main+0x1014>)
 800468a:	f7fd fe01 	bl	8002290 <HAL_GPIO_WritePin>
					break;
 800468e:	e0a0      	b.n	80047d2 <main+0xff2>

				case 4:
					HAL_GPIO_WritePin(GPIOC, con2_2_Pin, GPIO_PIN_RESET); 	// B
 8004690:	2200      	movs	r2, #0
 8004692:	2110      	movs	r1, #16
 8004694:	485a      	ldr	r0, [pc, #360]	; (8004800 <main+0x1020>)
 8004696:	f7fd fdfb 	bl	8002290 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, con2_3_Pin, GPIO_PIN_RESET); 	// C
 800469a:	2200      	movs	r2, #0
 800469c:	2108      	movs	r1, #8
 800469e:	4858      	ldr	r0, [pc, #352]	; (8004800 <main+0x1020>)
 80046a0:	f7fd fdf6 	bl	8002290 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, con2_6_Pin, GPIO_PIN_RESET); 	// F
 80046a4:	2200      	movs	r2, #0
 80046a6:	2101      	movs	r1, #1
 80046a8:	4855      	ldr	r0, [pc, #340]	; (8004800 <main+0x1020>)
 80046aa:	f7fd fdf1 	bl	8002290 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOD, con2_7_Pin, GPIO_PIN_RESET); 	// G
 80046ae:	2200      	movs	r2, #0
 80046b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80046b4:	484f      	ldr	r0, [pc, #316]	; (80047f4 <main+0x1014>)
 80046b6:	f7fd fdeb 	bl	8002290 <HAL_GPIO_WritePin>
					break;
 80046ba:	e08a      	b.n	80047d2 <main+0xff2>

				case 5:
					HAL_GPIO_WritePin(GPIOC, con2_1_Pin, GPIO_PIN_RESET); 	// A
 80046bc:	2200      	movs	r2, #0
 80046be:	2120      	movs	r1, #32
 80046c0:	484f      	ldr	r0, [pc, #316]	; (8004800 <main+0x1020>)
 80046c2:	f7fd fde5 	bl	8002290 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, con2_3_Pin, GPIO_PIN_RESET); 	// C
 80046c6:	2200      	movs	r2, #0
 80046c8:	2108      	movs	r1, #8
 80046ca:	484d      	ldr	r0, [pc, #308]	; (8004800 <main+0x1020>)
 80046cc:	f7fd fde0 	bl	8002290 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, con2_4_Pin, GPIO_PIN_RESET); 	// D
 80046d0:	2200      	movs	r2, #0
 80046d2:	2104      	movs	r1, #4
 80046d4:	484a      	ldr	r0, [pc, #296]	; (8004800 <main+0x1020>)
 80046d6:	f7fd fddb 	bl	8002290 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, con2_6_Pin, GPIO_PIN_RESET); 	// F
 80046da:	2200      	movs	r2, #0
 80046dc:	2101      	movs	r1, #1
 80046de:	4848      	ldr	r0, [pc, #288]	; (8004800 <main+0x1020>)
 80046e0:	f7fd fdd6 	bl	8002290 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOD, con2_7_Pin, GPIO_PIN_RESET); 	// G
 80046e4:	2200      	movs	r2, #0
 80046e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80046ea:	4842      	ldr	r0, [pc, #264]	; (80047f4 <main+0x1014>)
 80046ec:	f7fd fdd0 	bl	8002290 <HAL_GPIO_WritePin>
					break;
 80046f0:	e06f      	b.n	80047d2 <main+0xff2>

				case 6:
					HAL_GPIO_WritePin(GPIOC, con2_1_Pin, GPIO_PIN_RESET); 	// A
 80046f2:	2200      	movs	r2, #0
 80046f4:	2120      	movs	r1, #32
 80046f6:	4842      	ldr	r0, [pc, #264]	; (8004800 <main+0x1020>)
 80046f8:	f7fd fdca 	bl	8002290 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, con2_3_Pin, GPIO_PIN_RESET); 	// C
 80046fc:	2200      	movs	r2, #0
 80046fe:	2108      	movs	r1, #8
 8004700:	483f      	ldr	r0, [pc, #252]	; (8004800 <main+0x1020>)
 8004702:	f7fd fdc5 	bl	8002290 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, con2_4_Pin, GPIO_PIN_RESET); 	// D
 8004706:	2200      	movs	r2, #0
 8004708:	2104      	movs	r1, #4
 800470a:	483d      	ldr	r0, [pc, #244]	; (8004800 <main+0x1020>)
 800470c:	f7fd fdc0 	bl	8002290 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, con2_5_Pin, GPIO_PIN_RESET); 	// E
 8004710:	2200      	movs	r2, #0
 8004712:	2102      	movs	r1, #2
 8004714:	483a      	ldr	r0, [pc, #232]	; (8004800 <main+0x1020>)
 8004716:	f7fd fdbb 	bl	8002290 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, con2_6_Pin, GPIO_PIN_RESET); 	// F
 800471a:	2200      	movs	r2, #0
 800471c:	2101      	movs	r1, #1
 800471e:	4838      	ldr	r0, [pc, #224]	; (8004800 <main+0x1020>)
 8004720:	f7fd fdb6 	bl	8002290 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOD, con2_7_Pin, GPIO_PIN_RESET);	// G
 8004724:	2200      	movs	r2, #0
 8004726:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800472a:	4832      	ldr	r0, [pc, #200]	; (80047f4 <main+0x1014>)
 800472c:	f7fd fdb0 	bl	8002290 <HAL_GPIO_WritePin>
					break;
 8004730:	e04f      	b.n	80047d2 <main+0xff2>

				case 7:
					HAL_GPIO_WritePin(GPIOC, con2_1_Pin, GPIO_PIN_RESET); 	// A
 8004732:	2200      	movs	r2, #0
 8004734:	2120      	movs	r1, #32
 8004736:	4832      	ldr	r0, [pc, #200]	; (8004800 <main+0x1020>)
 8004738:	f7fd fdaa 	bl	8002290 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, con2_2_Pin, GPIO_PIN_RESET); 	// B
 800473c:	2200      	movs	r2, #0
 800473e:	2110      	movs	r1, #16
 8004740:	482f      	ldr	r0, [pc, #188]	; (8004800 <main+0x1020>)
 8004742:	f7fd fda5 	bl	8002290 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, con2_3_Pin, GPIO_PIN_RESET); 	// C
 8004746:	2200      	movs	r2, #0
 8004748:	2108      	movs	r1, #8
 800474a:	482d      	ldr	r0, [pc, #180]	; (8004800 <main+0x1020>)
 800474c:	f7fd fda0 	bl	8002290 <HAL_GPIO_WritePin>
					break;
 8004750:	e03f      	b.n	80047d2 <main+0xff2>

				case 8:
					HAL_GPIO_WritePin(GPIOC, con2_1_Pin, GPIO_PIN_RESET); 	// A
 8004752:	2200      	movs	r2, #0
 8004754:	2120      	movs	r1, #32
 8004756:	482a      	ldr	r0, [pc, #168]	; (8004800 <main+0x1020>)
 8004758:	f7fd fd9a 	bl	8002290 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, con2_2_Pin, GPIO_PIN_RESET); 	// B
 800475c:	2200      	movs	r2, #0
 800475e:	2110      	movs	r1, #16
 8004760:	4827      	ldr	r0, [pc, #156]	; (8004800 <main+0x1020>)
 8004762:	f7fd fd95 	bl	8002290 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, con2_3_Pin, GPIO_PIN_RESET); 	// C
 8004766:	2200      	movs	r2, #0
 8004768:	2108      	movs	r1, #8
 800476a:	4825      	ldr	r0, [pc, #148]	; (8004800 <main+0x1020>)
 800476c:	f7fd fd90 	bl	8002290 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, con2_4_Pin, GPIO_PIN_RESET); 	// D
 8004770:	2200      	movs	r2, #0
 8004772:	2104      	movs	r1, #4
 8004774:	4822      	ldr	r0, [pc, #136]	; (8004800 <main+0x1020>)
 8004776:	f7fd fd8b 	bl	8002290 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, con2_5_Pin, GPIO_PIN_RESET); 	// E
 800477a:	2200      	movs	r2, #0
 800477c:	2102      	movs	r1, #2
 800477e:	4820      	ldr	r0, [pc, #128]	; (8004800 <main+0x1020>)
 8004780:	f7fd fd86 	bl	8002290 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, con2_6_Pin, GPIO_PIN_RESET); 	// F
 8004784:	2200      	movs	r2, #0
 8004786:	2101      	movs	r1, #1
 8004788:	481d      	ldr	r0, [pc, #116]	; (8004800 <main+0x1020>)
 800478a:	f7fd fd81 	bl	8002290 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOD, con2_7_Pin, GPIO_PIN_RESET); 	// G
 800478e:	2200      	movs	r2, #0
 8004790:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004794:	4817      	ldr	r0, [pc, #92]	; (80047f4 <main+0x1014>)
 8004796:	f7fd fd7b 	bl	8002290 <HAL_GPIO_WritePin>
					break;
 800479a:	e01a      	b.n	80047d2 <main+0xff2>

				case 9:
					HAL_GPIO_WritePin(GPIOC, con2_1_Pin, GPIO_PIN_RESET); 	// A
 800479c:	2200      	movs	r2, #0
 800479e:	2120      	movs	r1, #32
 80047a0:	4817      	ldr	r0, [pc, #92]	; (8004800 <main+0x1020>)
 80047a2:	f7fd fd75 	bl	8002290 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, con2_2_Pin, GPIO_PIN_RESET); 	// B
 80047a6:	2200      	movs	r2, #0
 80047a8:	2110      	movs	r1, #16
 80047aa:	4815      	ldr	r0, [pc, #84]	; (8004800 <main+0x1020>)
 80047ac:	f7fd fd70 	bl	8002290 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, con2_3_Pin, GPIO_PIN_RESET); 	// C
 80047b0:	2200      	movs	r2, #0
 80047b2:	2108      	movs	r1, #8
 80047b4:	4812      	ldr	r0, [pc, #72]	; (8004800 <main+0x1020>)
 80047b6:	f7fd fd6b 	bl	8002290 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, con2_6_Pin, GPIO_PIN_RESET); 	// F
 80047ba:	2200      	movs	r2, #0
 80047bc:	2101      	movs	r1, #1
 80047be:	4810      	ldr	r0, [pc, #64]	; (8004800 <main+0x1020>)
 80047c0:	f7fd fd66 	bl	8002290 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOD, con2_7_Pin, GPIO_PIN_RESET); 	// G
 80047c4:	2200      	movs	r2, #0
 80047c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80047ca:	480a      	ldr	r0, [pc, #40]	; (80047f4 <main+0x1014>)
 80047cc:	f7fd fd60 	bl	8002290 <HAL_GPIO_WritePin>
					break;
 80047d0:	bf00      	nop

			}

			// Update the index
			dispIndex2++;
 80047d2:	4b09      	ldr	r3, [pc, #36]	; (80047f8 <main+0x1018>)
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	3301      	adds	r3, #1
 80047d8:	b2da      	uxtb	r2, r3
 80047da:	4b07      	ldr	r3, [pc, #28]	; (80047f8 <main+0x1018>)
 80047dc:	701a      	strb	r2, [r3, #0]
			if (dispIndex2 > 3) dispIndex2 = 0;
 80047de:	4b06      	ldr	r3, [pc, #24]	; (80047f8 <main+0x1018>)
 80047e0:	781b      	ldrb	r3, [r3, #0]
 80047e2:	2b03      	cmp	r3, #3
 80047e4:	f67f a90a 	bls.w	80039fc <main+0x21c>
 80047e8:	4b03      	ldr	r3, [pc, #12]	; (80047f8 <main+0x1018>)
 80047ea:	2200      	movs	r2, #0
 80047ec:	701a      	strb	r2, [r3, #0]
	  	  HAL_UART_Receive_IT(&huart8, recieved_data.info_in_buffer, 3);
 80047ee:	f7ff b905 	b.w	80039fc <main+0x21c>
 80047f2:	bf00      	nop
 80047f4:	40020c00 	.word	0x40020c00
 80047f8:	20000080 	.word	0x20000080
 80047fc:	2000007c 	.word	0x2000007c
 8004800:	40020800 	.word	0x40020800

08004804 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b094      	sub	sp, #80	; 0x50
 8004808:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800480a:	f107 031c 	add.w	r3, r7, #28
 800480e:	2234      	movs	r2, #52	; 0x34
 8004810:	2100      	movs	r1, #0
 8004812:	4618      	mov	r0, r3
 8004814:	f000 fc50 	bl	80050b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004818:	f107 0308 	add.w	r3, r7, #8
 800481c:	2200      	movs	r2, #0
 800481e:	601a      	str	r2, [r3, #0]
 8004820:	605a      	str	r2, [r3, #4]
 8004822:	609a      	str	r2, [r3, #8]
 8004824:	60da      	str	r2, [r3, #12]
 8004826:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004828:	2300      	movs	r3, #0
 800482a:	607b      	str	r3, [r7, #4]
 800482c:	4b22      	ldr	r3, [pc, #136]	; (80048b8 <SystemClock_Config+0xb4>)
 800482e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004830:	4a21      	ldr	r2, [pc, #132]	; (80048b8 <SystemClock_Config+0xb4>)
 8004832:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004836:	6413      	str	r3, [r2, #64]	; 0x40
 8004838:	4b1f      	ldr	r3, [pc, #124]	; (80048b8 <SystemClock_Config+0xb4>)
 800483a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004840:	607b      	str	r3, [r7, #4]
 8004842:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004844:	2300      	movs	r3, #0
 8004846:	603b      	str	r3, [r7, #0]
 8004848:	4b1c      	ldr	r3, [pc, #112]	; (80048bc <SystemClock_Config+0xb8>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a1b      	ldr	r2, [pc, #108]	; (80048bc <SystemClock_Config+0xb8>)
 800484e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004852:	6013      	str	r3, [r2, #0]
 8004854:	4b19      	ldr	r3, [pc, #100]	; (80048bc <SystemClock_Config+0xb8>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800485c:	603b      	str	r3, [r7, #0]
 800485e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004860:	2302      	movs	r3, #2
 8004862:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004864:	2301      	movs	r3, #1
 8004866:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004868:	2310      	movs	r3, #16
 800486a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800486c:	2300      	movs	r3, #0
 800486e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004870:	f107 031c 	add.w	r3, r7, #28
 8004874:	4618      	mov	r0, r3
 8004876:	f7fd ff1f 	bl	80026b8 <HAL_RCC_OscConfig>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d001      	beq.n	8004884 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8004880:	f000 fa54 	bl	8004d2c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004884:	230f      	movs	r3, #15
 8004886:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8004888:	2300      	movs	r3, #0
 800488a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800488c:	2300      	movs	r3, #0
 800488e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004890:	2300      	movs	r3, #0
 8004892:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004894:	2300      	movs	r3, #0
 8004896:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8004898:	f107 0308 	add.w	r3, r7, #8
 800489c:	2100      	movs	r1, #0
 800489e:	4618      	mov	r0, r3
 80048a0:	f7fd fd42 	bl	8002328 <HAL_RCC_ClockConfig>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d001      	beq.n	80048ae <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80048aa:	f000 fa3f 	bl	8004d2c <Error_Handler>
  }
}
 80048ae:	bf00      	nop
 80048b0:	3750      	adds	r7, #80	; 0x50
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	40023800 	.word	0x40023800
 80048bc:	40007000 	.word	0x40007000

080048c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80048c6:	463b      	mov	r3, r7
 80048c8:	2200      	movs	r2, #0
 80048ca:	601a      	str	r2, [r3, #0]
 80048cc:	605a      	str	r2, [r3, #4]
 80048ce:	609a      	str	r2, [r3, #8]
 80048d0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 80048d2:	4b28      	ldr	r3, [pc, #160]	; (8004974 <MX_ADC1_Init+0xb4>)
 80048d4:	4a28      	ldr	r2, [pc, #160]	; (8004978 <MX_ADC1_Init+0xb8>)
 80048d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80048d8:	4b26      	ldr	r3, [pc, #152]	; (8004974 <MX_ADC1_Init+0xb4>)
 80048da:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80048de:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80048e0:	4b24      	ldr	r3, [pc, #144]	; (8004974 <MX_ADC1_Init+0xb4>)
 80048e2:	2200      	movs	r2, #0
 80048e4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80048e6:	4b23      	ldr	r3, [pc, #140]	; (8004974 <MX_ADC1_Init+0xb4>)
 80048e8:	2201      	movs	r2, #1
 80048ea:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80048ec:	4b21      	ldr	r3, [pc, #132]	; (8004974 <MX_ADC1_Init+0xb4>)
 80048ee:	2201      	movs	r2, #1
 80048f0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80048f2:	4b20      	ldr	r3, [pc, #128]	; (8004974 <MX_ADC1_Init+0xb4>)
 80048f4:	2200      	movs	r2, #0
 80048f6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80048fa:	4b1e      	ldr	r3, [pc, #120]	; (8004974 <MX_ADC1_Init+0xb4>)
 80048fc:	2200      	movs	r2, #0
 80048fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004900:	4b1c      	ldr	r3, [pc, #112]	; (8004974 <MX_ADC1_Init+0xb4>)
 8004902:	4a1e      	ldr	r2, [pc, #120]	; (800497c <MX_ADC1_Init+0xbc>)
 8004904:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004906:	4b1b      	ldr	r3, [pc, #108]	; (8004974 <MX_ADC1_Init+0xb4>)
 8004908:	2200      	movs	r2, #0
 800490a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 800490c:	4b19      	ldr	r3, [pc, #100]	; (8004974 <MX_ADC1_Init+0xb4>)
 800490e:	2202      	movs	r2, #2
 8004910:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8004912:	4b18      	ldr	r3, [pc, #96]	; (8004974 <MX_ADC1_Init+0xb4>)
 8004914:	2201      	movs	r2, #1
 8004916:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800491a:	4b16      	ldr	r3, [pc, #88]	; (8004974 <MX_ADC1_Init+0xb4>)
 800491c:	2201      	movs	r2, #1
 800491e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004920:	4814      	ldr	r0, [pc, #80]	; (8004974 <MX_ADC1_Init+0xb4>)
 8004922:	f7fc fa7b 	bl	8000e1c <HAL_ADC_Init>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d001      	beq.n	8004930 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800492c:	f000 f9fe 	bl	8004d2c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8004930:	2300      	movs	r3, #0
 8004932:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8004934:	2301      	movs	r3, #1
 8004936:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8004938:	2307      	movs	r3, #7
 800493a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800493c:	463b      	mov	r3, r7
 800493e:	4619      	mov	r1, r3
 8004940:	480c      	ldr	r0, [pc, #48]	; (8004974 <MX_ADC1_Init+0xb4>)
 8004942:	f7fc fba1 	bl	8001088 <HAL_ADC_ConfigChannel>
 8004946:	4603      	mov	r3, r0
 8004948:	2b00      	cmp	r3, #0
 800494a:	d001      	beq.n	8004950 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800494c:	f000 f9ee 	bl	8004d2c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8004950:	2301      	movs	r3, #1
 8004952:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8004954:	2302      	movs	r3, #2
 8004956:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004958:	463b      	mov	r3, r7
 800495a:	4619      	mov	r1, r3
 800495c:	4805      	ldr	r0, [pc, #20]	; (8004974 <MX_ADC1_Init+0xb4>)
 800495e:	f7fc fb93 	bl	8001088 <HAL_ADC_ConfigChannel>
 8004962:	4603      	mov	r3, r0
 8004964:	2b00      	cmp	r3, #0
 8004966:	d001      	beq.n	800496c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8004968:	f000 f9e0 	bl	8004d2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800496c:	bf00      	nop
 800496e:	3710      	adds	r7, #16
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}
 8004974:	2000011c 	.word	0x2000011c
 8004978:	40012000 	.word	0x40012000
 800497c:	0f000001 	.word	0x0f000001

08004980 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8004984:	4b11      	ldr	r3, [pc, #68]	; (80049cc <MX_UART8_Init+0x4c>)
 8004986:	4a12      	ldr	r2, [pc, #72]	; (80049d0 <MX_UART8_Init+0x50>)
 8004988:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 9600;
 800498a:	4b10      	ldr	r3, [pc, #64]	; (80049cc <MX_UART8_Init+0x4c>)
 800498c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004990:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8004992:	4b0e      	ldr	r3, [pc, #56]	; (80049cc <MX_UART8_Init+0x4c>)
 8004994:	2200      	movs	r2, #0
 8004996:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8004998:	4b0c      	ldr	r3, [pc, #48]	; (80049cc <MX_UART8_Init+0x4c>)
 800499a:	2200      	movs	r2, #0
 800499c:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 800499e:	4b0b      	ldr	r3, [pc, #44]	; (80049cc <MX_UART8_Init+0x4c>)
 80049a0:	2200      	movs	r2, #0
 80049a2:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80049a4:	4b09      	ldr	r3, [pc, #36]	; (80049cc <MX_UART8_Init+0x4c>)
 80049a6:	220c      	movs	r2, #12
 80049a8:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80049aa:	4b08      	ldr	r3, [pc, #32]	; (80049cc <MX_UART8_Init+0x4c>)
 80049ac:	2200      	movs	r2, #0
 80049ae:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80049b0:	4b06      	ldr	r3, [pc, #24]	; (80049cc <MX_UART8_Init+0x4c>)
 80049b2:	2200      	movs	r2, #0
 80049b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80049b6:	4805      	ldr	r0, [pc, #20]	; (80049cc <MX_UART8_Init+0x4c>)
 80049b8:	f7fe f8c0 	bl	8002b3c <HAL_UART_Init>
 80049bc:	4603      	mov	r3, r0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d001      	beq.n	80049c6 <MX_UART8_Init+0x46>
  {
    Error_Handler();
 80049c2:	f000 f9b3 	bl	8004d2c <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 80049c6:	bf00      	nop
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop
 80049cc:	200001c4 	.word	0x200001c4
 80049d0:	40007c00 	.word	0x40007c00

080049d4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b082      	sub	sp, #8
 80049d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80049da:	2300      	movs	r3, #0
 80049dc:	607b      	str	r3, [r7, #4]
 80049de:	4b0c      	ldr	r3, [pc, #48]	; (8004a10 <MX_DMA_Init+0x3c>)
 80049e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e2:	4a0b      	ldr	r2, [pc, #44]	; (8004a10 <MX_DMA_Init+0x3c>)
 80049e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80049e8:	6313      	str	r3, [r2, #48]	; 0x30
 80049ea:	4b09      	ldr	r3, [pc, #36]	; (8004a10 <MX_DMA_Init+0x3c>)
 80049ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049f2:	607b      	str	r3, [r7, #4]
 80049f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80049f6:	2200      	movs	r2, #0
 80049f8:	2100      	movs	r1, #0
 80049fa:	2038      	movs	r0, #56	; 0x38
 80049fc:	f7fc fecf 	bl	800179e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8004a00:	2038      	movs	r0, #56	; 0x38
 8004a02:	f7fc fee8 	bl	80017d6 <HAL_NVIC_EnableIRQ>

}
 8004a06:	bf00      	nop
 8004a08:	3708      	adds	r7, #8
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	bf00      	nop
 8004a10:	40023800 	.word	0x40023800

08004a14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b08c      	sub	sp, #48	; 0x30
 8004a18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a1a:	f107 031c 	add.w	r3, r7, #28
 8004a1e:	2200      	movs	r2, #0
 8004a20:	601a      	str	r2, [r3, #0]
 8004a22:	605a      	str	r2, [r3, #4]
 8004a24:	609a      	str	r2, [r3, #8]
 8004a26:	60da      	str	r2, [r3, #12]
 8004a28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	61bb      	str	r3, [r7, #24]
 8004a2e:	4ba0      	ldr	r3, [pc, #640]	; (8004cb0 <MX_GPIO_Init+0x29c>)
 8004a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a32:	4a9f      	ldr	r2, [pc, #636]	; (8004cb0 <MX_GPIO_Init+0x29c>)
 8004a34:	f043 0310 	orr.w	r3, r3, #16
 8004a38:	6313      	str	r3, [r2, #48]	; 0x30
 8004a3a:	4b9d      	ldr	r3, [pc, #628]	; (8004cb0 <MX_GPIO_Init+0x29c>)
 8004a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a3e:	f003 0310 	and.w	r3, r3, #16
 8004a42:	61bb      	str	r3, [r7, #24]
 8004a44:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a46:	2300      	movs	r3, #0
 8004a48:	617b      	str	r3, [r7, #20]
 8004a4a:	4b99      	ldr	r3, [pc, #612]	; (8004cb0 <MX_GPIO_Init+0x29c>)
 8004a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a4e:	4a98      	ldr	r2, [pc, #608]	; (8004cb0 <MX_GPIO_Init+0x29c>)
 8004a50:	f043 0304 	orr.w	r3, r3, #4
 8004a54:	6313      	str	r3, [r2, #48]	; 0x30
 8004a56:	4b96      	ldr	r3, [pc, #600]	; (8004cb0 <MX_GPIO_Init+0x29c>)
 8004a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a5a:	f003 0304 	and.w	r3, r3, #4
 8004a5e:	617b      	str	r3, [r7, #20]
 8004a60:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004a62:	2300      	movs	r3, #0
 8004a64:	613b      	str	r3, [r7, #16]
 8004a66:	4b92      	ldr	r3, [pc, #584]	; (8004cb0 <MX_GPIO_Init+0x29c>)
 8004a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a6a:	4a91      	ldr	r2, [pc, #580]	; (8004cb0 <MX_GPIO_Init+0x29c>)
 8004a6c:	f043 0320 	orr.w	r3, r3, #32
 8004a70:	6313      	str	r3, [r2, #48]	; 0x30
 8004a72:	4b8f      	ldr	r3, [pc, #572]	; (8004cb0 <MX_GPIO_Init+0x29c>)
 8004a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a76:	f003 0320 	and.w	r3, r3, #32
 8004a7a:	613b      	str	r3, [r7, #16]
 8004a7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a7e:	2300      	movs	r3, #0
 8004a80:	60fb      	str	r3, [r7, #12]
 8004a82:	4b8b      	ldr	r3, [pc, #556]	; (8004cb0 <MX_GPIO_Init+0x29c>)
 8004a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a86:	4a8a      	ldr	r2, [pc, #552]	; (8004cb0 <MX_GPIO_Init+0x29c>)
 8004a88:	f043 0301 	orr.w	r3, r3, #1
 8004a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8004a8e:	4b88      	ldr	r3, [pc, #544]	; (8004cb0 <MX_GPIO_Init+0x29c>)
 8004a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a92:	f003 0301 	and.w	r3, r3, #1
 8004a96:	60fb      	str	r3, [r7, #12]
 8004a98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	60bb      	str	r3, [r7, #8]
 8004a9e:	4b84      	ldr	r3, [pc, #528]	; (8004cb0 <MX_GPIO_Init+0x29c>)
 8004aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa2:	4a83      	ldr	r2, [pc, #524]	; (8004cb0 <MX_GPIO_Init+0x29c>)
 8004aa4:	f043 0302 	orr.w	r3, r3, #2
 8004aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8004aaa:	4b81      	ldr	r3, [pc, #516]	; (8004cb0 <MX_GPIO_Init+0x29c>)
 8004aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aae:	f003 0302 	and.w	r3, r3, #2
 8004ab2:	60bb      	str	r3, [r7, #8]
 8004ab4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	607b      	str	r3, [r7, #4]
 8004aba:	4b7d      	ldr	r3, [pc, #500]	; (8004cb0 <MX_GPIO_Init+0x29c>)
 8004abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004abe:	4a7c      	ldr	r2, [pc, #496]	; (8004cb0 <MX_GPIO_Init+0x29c>)
 8004ac0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8004ac6:	4b7a      	ldr	r3, [pc, #488]	; (8004cb0 <MX_GPIO_Init+0x29c>)
 8004ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ace:	607b      	str	r3, [r7, #4]
 8004ad0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	603b      	str	r3, [r7, #0]
 8004ad6:	4b76      	ldr	r3, [pc, #472]	; (8004cb0 <MX_GPIO_Init+0x29c>)
 8004ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ada:	4a75      	ldr	r2, [pc, #468]	; (8004cb0 <MX_GPIO_Init+0x29c>)
 8004adc:	f043 0308 	orr.w	r3, r3, #8
 8004ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8004ae2:	4b73      	ldr	r3, [pc, #460]	; (8004cb0 <MX_GPIO_Init+0x29c>)
 8004ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae6:	f003 0308 	and.w	r3, r3, #8
 8004aea:	603b      	str	r3, [r7, #0]
 8004aec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, d6_Pin|d7_Pin|con3_10_Pin|con3_9_Pin 
 8004aee:	2200      	movs	r2, #0
 8004af0:	f643 013e 	movw	r1, #14398	; 0x383e
 8004af4:	486f      	ldr	r0, [pc, #444]	; (8004cb4 <MX_GPIO_Init+0x2a0>)
 8004af6:	f7fd fbcb 	bl	8002290 <HAL_GPIO_WritePin>
                          |con5_3_Pin|con5_1_Pin|con5_2_Pin|testPinOut_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, con4_1_Pin|con4_2_Pin|con3_5_Pin|con3_4_Pin 
 8004afa:	2200      	movs	r2, #0
 8004afc:	f647 41f3 	movw	r1, #31987	; 0x7cf3
 8004b00:	486d      	ldr	r0, [pc, #436]	; (8004cb8 <MX_GPIO_Init+0x2a4>)
 8004b02:	f7fd fbc5 	bl	8002290 <HAL_GPIO_WritePin>
                          |con3_3_Pin|con3_2_Pin|con3_1_Pin|d2_Pin 
                          |d3_Pin|d4_Pin|d5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, con2_6_Pin|con2_5_Pin|con2_4_Pin|con2_3_Pin 
 8004b06:	2200      	movs	r2, #0
 8004b08:	f240 61ff 	movw	r1, #1791	; 0x6ff
 8004b0c:	486b      	ldr	r0, [pc, #428]	; (8004cbc <MX_GPIO_Init+0x2a8>)
 8004b0e:	f7fd fbbf 	bl	8002290 <HAL_GPIO_WritePin>
                          |con2_2_Pin|con2_1_Pin|con4_9_Pin|con4_10_Pin 
                          |con4_8_Pin|d8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, con1_5_Pin|con1_4_Pin|con1_3_Pin|con4_7_Pin 
 8004b12:	2200      	movs	r2, #0
 8004b14:	f248 11e0 	movw	r1, #33248	; 0x81e0
 8004b18:	4869      	ldr	r0, [pc, #420]	; (8004cc0 <MX_GPIO_Init+0x2ac>)
 8004b1a:	f7fd fbb9 	bl	8002290 <HAL_GPIO_WritePin>
                          |d9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, con1_2_Pin|con1_1_Pin|status_led_Pin|con8_1_Pin 
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f240 11fb 	movw	r1, #507	; 0x1fb
 8004b24:	4867      	ldr	r0, [pc, #412]	; (8004cc4 <MX_GPIO_Init+0x2b0>)
 8004b26:	f7fd fbb3 	bl	8002290 <HAL_GPIO_WritePin>
                          |con4_3_Pin|con4_4_Pin|con4_5_Pin|con4_6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, con5_9_Pin|con8_3_Pin|con8_2_Pin, GPIO_PIN_RESET);
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f24c 0102 	movw	r1, #49154	; 0xc002
 8004b30:	4865      	ldr	r0, [pc, #404]	; (8004cc8 <MX_GPIO_Init+0x2b4>)
 8004b32:	f7fd fbad 	bl	8002290 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, con2_7_Pin|con2_8_Pin|con2_9_Pin|con2_10_Pin 
 8004b36:	2200      	movs	r2, #0
 8004b38:	f24f 0140 	movw	r1, #61504	; 0xf040
 8004b3c:	4863      	ldr	r0, [pc, #396]	; (8004ccc <MX_GPIO_Init+0x2b8>)
 8004b3e:	f7fd fba7 	bl	8002290 <HAL_GPIO_WritePin>
                          |con8_10_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : d6_Pin d7_Pin con3_10_Pin con3_9_Pin 
                           con5_3_Pin con5_1_Pin con5_2_Pin testPinOut_Pin */
  GPIO_InitStruct.Pin = d6_Pin|d7_Pin|con3_10_Pin|con3_9_Pin 
 8004b42:	f643 033e 	movw	r3, #14398	; 0x383e
 8004b46:	61fb      	str	r3, [r7, #28]
                          |con5_3_Pin|con5_1_Pin|con5_2_Pin|testPinOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b50:	2300      	movs	r3, #0
 8004b52:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004b54:	f107 031c 	add.w	r3, r7, #28
 8004b58:	4619      	mov	r1, r3
 8004b5a:	4856      	ldr	r0, [pc, #344]	; (8004cb4 <MX_GPIO_Init+0x2a0>)
 8004b5c:	f7fd f9ee 	bl	8001f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : con4_1_Pin con4_2_Pin con3_5_Pin con3_4_Pin 
                           con3_3_Pin con3_2_Pin con3_1_Pin d2_Pin 
                           d3_Pin d4_Pin d5_Pin */
  GPIO_InitStruct.Pin = con4_1_Pin|con4_2_Pin|con3_5_Pin|con3_4_Pin 
 8004b60:	f647 43f3 	movw	r3, #31987	; 0x7cf3
 8004b64:	61fb      	str	r3, [r7, #28]
                          |con3_3_Pin|con3_2_Pin|con3_1_Pin|d2_Pin 
                          |d3_Pin|d4_Pin|d5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b66:	2301      	movs	r3, #1
 8004b68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004b72:	f107 031c 	add.w	r3, r7, #28
 8004b76:	4619      	mov	r1, r3
 8004b78:	484f      	ldr	r0, [pc, #316]	; (8004cb8 <MX_GPIO_Init+0x2a4>)
 8004b7a:	f7fd f9df 	bl	8001f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : con2_6_Pin con2_5_Pin con2_4_Pin con2_3_Pin 
                           con2_2_Pin con2_1_Pin */
  GPIO_InitStruct.Pin = con2_6_Pin|con2_5_Pin|con2_4_Pin|con2_3_Pin 
 8004b7e:	233f      	movs	r3, #63	; 0x3f
 8004b80:	61fb      	str	r3, [r7, #28]
                          |con2_2_Pin|con2_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b82:	2301      	movs	r3, #1
 8004b84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004b86:	2301      	movs	r3, #1
 8004b88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b8e:	f107 031c 	add.w	r3, r7, #28
 8004b92:	4619      	mov	r1, r3
 8004b94:	4849      	ldr	r0, [pc, #292]	; (8004cbc <MX_GPIO_Init+0x2a8>)
 8004b96:	f7fd f9d1 	bl	8001f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : con1_5_Pin con1_4_Pin con1_3_Pin con4_7_Pin 
                           d9_Pin */
  GPIO_InitStruct.Pin = con1_5_Pin|con1_4_Pin|con1_3_Pin|con4_7_Pin 
 8004b9a:	f248 13e0 	movw	r3, #33248	; 0x81e0
 8004b9e:	61fb      	str	r3, [r7, #28]
                          |d9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bac:	f107 031c 	add.w	r3, r7, #28
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	4843      	ldr	r0, [pc, #268]	; (8004cc0 <MX_GPIO_Init+0x2ac>)
 8004bb4:	f7fd f9c2 	bl	8001f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : con1_2_Pin con1_1_Pin status_led_Pin con8_1_Pin 
                           con4_3_Pin con4_4_Pin con4_5_Pin con4_6_Pin */
  GPIO_InitStruct.Pin = con1_2_Pin|con1_1_Pin|status_led_Pin|con8_1_Pin 
 8004bb8:	f240 13fb 	movw	r3, #507	; 0x1fb
 8004bbc:	61fb      	str	r3, [r7, #28]
                          |con4_3_Pin|con4_4_Pin|con4_5_Pin|con4_6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bca:	f107 031c 	add.w	r3, r7, #28
 8004bce:	4619      	mov	r1, r3
 8004bd0:	483c      	ldr	r0, [pc, #240]	; (8004cc4 <MX_GPIO_Init+0x2b0>)
 8004bd2:	f7fd f9b3 	bl	8001f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : con5_9_Pin con8_3_Pin con8_2_Pin */
  GPIO_InitStruct.Pin = con5_9_Pin|con8_3_Pin|con8_2_Pin;
 8004bd6:	f24c 0302 	movw	r3, #49154	; 0xc002
 8004bda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004be0:	2300      	movs	r3, #0
 8004be2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004be4:	2300      	movs	r3, #0
 8004be6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004be8:	f107 031c 	add.w	r3, r7, #28
 8004bec:	4619      	mov	r1, r3
 8004bee:	4836      	ldr	r0, [pc, #216]	; (8004cc8 <MX_GPIO_Init+0x2b4>)
 8004bf0:	f7fd f9a4 	bl	8001f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : con2_7_Pin con2_8_Pin */
  GPIO_InitStruct.Pin = con2_7_Pin|con2_8_Pin;
 8004bf4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004bf8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c02:	2300      	movs	r3, #0
 8004c04:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004c06:	f107 031c 	add.w	r3, r7, #28
 8004c0a:	4619      	mov	r1, r3
 8004c0c:	482f      	ldr	r0, [pc, #188]	; (8004ccc <MX_GPIO_Init+0x2b8>)
 8004c0e:	f7fd f995 	bl	8001f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : con2_9_Pin con2_10_Pin con8_10_Pin */
  GPIO_InitStruct.Pin = con2_9_Pin|con2_10_Pin|con8_10_Pin;
 8004c12:	f24c 0340 	movw	r3, #49216	; 0xc040
 8004c16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c20:	2300      	movs	r3, #0
 8004c22:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004c24:	f107 031c 	add.w	r3, r7, #28
 8004c28:	4619      	mov	r1, r3
 8004c2a:	4828      	ldr	r0, [pc, #160]	; (8004ccc <MX_GPIO_Init+0x2b8>)
 8004c2c:	f7fd f986 	bl	8001f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : con4_9_Pin con4_10_Pin con4_8_Pin d8_Pin */
  GPIO_InitStruct.Pin = con4_9_Pin|con4_10_Pin|con4_8_Pin|d8_Pin;
 8004c30:	f44f 63d8 	mov.w	r3, #1728	; 0x6c0
 8004c34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c36:	2301      	movs	r3, #1
 8004c38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c42:	f107 031c 	add.w	r3, r7, #28
 8004c46:	4619      	mov	r1, r3
 8004c48:	481c      	ldr	r0, [pc, #112]	; (8004cbc <MX_GPIO_Init+0x2a8>)
 8004c4a:	f7fd f977 	bl	8001f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : board_type_4_Pin board_type_3_Pin */
  GPIO_InitStruct.Pin = board_type_4_Pin|board_type_3_Pin;
 8004c4e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004c52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004c54:	2300      	movs	r3, #0
 8004c56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c5c:	f107 031c 	add.w	r3, r7, #28
 8004c60:	4619      	mov	r1, r3
 8004c62:	4816      	ldr	r0, [pc, #88]	; (8004cbc <MX_GPIO_Init+0x2a8>)
 8004c64:	f7fd f96a 	bl	8001f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : board_type_2_Pin board_type_1_Pin board_num_4_Pin board_num_3_Pin 
                           board_num_2_Pin board_num_1_Pin */
  GPIO_InitStruct.Pin = board_type_2_Pin|board_type_1_Pin|board_num_4_Pin|board_num_3_Pin 
 8004c68:	233f      	movs	r3, #63	; 0x3f
 8004c6a:	61fb      	str	r3, [r7, #28]
                          |board_num_2_Pin|board_num_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c70:	2300      	movs	r3, #0
 8004c72:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004c74:	f107 031c 	add.w	r3, r7, #28
 8004c78:	4619      	mov	r1, r3
 8004c7a:	4814      	ldr	r0, [pc, #80]	; (8004ccc <MX_GPIO_Init+0x2b8>)
 8004c7c:	f7fd f95e 	bl	8001f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : testPinIn_Pin */
  GPIO_InitStruct.Pin = testPinIn_Pin;
 8004c80:	2301      	movs	r3, #1
 8004c82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004c84:	4b12      	ldr	r3, [pc, #72]	; (8004cd0 <MX_GPIO_Init+0x2bc>)
 8004c86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(testPinIn_GPIO_Port, &GPIO_InitStruct);
 8004c8c:	f107 031c 	add.w	r3, r7, #28
 8004c90:	4619      	mov	r1, r3
 8004c92:	4808      	ldr	r0, [pc, #32]	; (8004cb4 <MX_GPIO_Init+0x2a0>)
 8004c94:	f7fd f952 	bl	8001f3c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8004c98:	2200      	movs	r2, #0
 8004c9a:	2100      	movs	r1, #0
 8004c9c:	2006      	movs	r0, #6
 8004c9e:	f7fc fd7e 	bl	800179e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8004ca2:	2006      	movs	r0, #6
 8004ca4:	f7fc fd97 	bl	80017d6 <HAL_NVIC_EnableIRQ>

}
 8004ca8:	bf00      	nop
 8004caa:	3730      	adds	r7, #48	; 0x30
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}
 8004cb0:	40023800 	.word	0x40023800
 8004cb4:	40021000 	.word	0x40021000
 8004cb8:	40021400 	.word	0x40021400
 8004cbc:	40020800 	.word	0x40020800
 8004cc0:	40020000 	.word	0x40020000
 8004cc4:	40020400 	.word	0x40020400
 8004cc8:	40021800 	.word	0x40021800
 8004ccc:	40020c00 	.word	0x40020c00
 8004cd0:	10110000 	.word	0x10110000

08004cd4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b082      	sub	sp, #8
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	4603      	mov	r3, r0
 8004cdc:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin)
 8004cde:	88fb      	ldrh	r3, [r7, #6]
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d000      	beq.n	8004ce6 <HAL_GPIO_EXTI_Callback+0x12>
		    //HAL_Delay(10);
			HAL_UART_Transmit(&huart8,&info_out,sizeof(info_out),1000);
			break;

	}
}
 8004ce4:	e015      	b.n	8004d12 <HAL_GPIO_EXTI_Callback+0x3e>
			TEST_MODE = 1;
 8004ce6:	4b0d      	ldr	r3, [pc, #52]	; (8004d1c <HAL_GPIO_EXTI_Callback+0x48>)
 8004ce8:	2201      	movs	r2, #1
 8004cea:	701a      	strb	r2, [r3, #0]
			info_out.board_add  =  100; //this needs to be recognised at the GUI as the test packet
 8004cec:	4b0c      	ldr	r3, [pc, #48]	; (8004d20 <HAL_GPIO_EXTI_Callback+0x4c>)
 8004cee:	2264      	movs	r2, #100	; 0x64
 8004cf0:	705a      	strb	r2, [r3, #1]
			info_out.state  = 100;
 8004cf2:	4b0b      	ldr	r3, [pc, #44]	; (8004d20 <HAL_GPIO_EXTI_Callback+0x4c>)
 8004cf4:	2264      	movs	r2, #100	; 0x64
 8004cf6:	709a      	strb	r2, [r3, #2]
			start_time = HAL_GetTick();
 8004cf8:	f7fc f862 	bl	8000dc0 <HAL_GetTick>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	4b09      	ldr	r3, [pc, #36]	; (8004d24 <HAL_GPIO_EXTI_Callback+0x50>)
 8004d00:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart8,&info_out,sizeof(info_out),1000);
 8004d02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004d06:	2203      	movs	r2, #3
 8004d08:	4905      	ldr	r1, [pc, #20]	; (8004d20 <HAL_GPIO_EXTI_Callback+0x4c>)
 8004d0a:	4807      	ldr	r0, [pc, #28]	; (8004d28 <HAL_GPIO_EXTI_Callback+0x54>)
 8004d0c:	f7fd ff63 	bl	8002bd6 <HAL_UART_Transmit>
			break;
 8004d10:	bf00      	nop
}
 8004d12:	bf00      	nop
 8004d14:	3708      	adds	r7, #8
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	20000028 	.word	0x20000028
 8004d20:	20000204 	.word	0x20000204
 8004d24:	20000084 	.word	0x20000084
 8004d28:	200001c4 	.word	0x200001c4

08004d2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004d30:	bf00      	nop
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr
	...

08004d3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b083      	sub	sp, #12
 8004d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d42:	2300      	movs	r3, #0
 8004d44:	607b      	str	r3, [r7, #4]
 8004d46:	4b10      	ldr	r3, [pc, #64]	; (8004d88 <HAL_MspInit+0x4c>)
 8004d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d4a:	4a0f      	ldr	r2, [pc, #60]	; (8004d88 <HAL_MspInit+0x4c>)
 8004d4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d50:	6453      	str	r3, [r2, #68]	; 0x44
 8004d52:	4b0d      	ldr	r3, [pc, #52]	; (8004d88 <HAL_MspInit+0x4c>)
 8004d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d5a:	607b      	str	r3, [r7, #4]
 8004d5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004d5e:	2300      	movs	r3, #0
 8004d60:	603b      	str	r3, [r7, #0]
 8004d62:	4b09      	ldr	r3, [pc, #36]	; (8004d88 <HAL_MspInit+0x4c>)
 8004d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d66:	4a08      	ldr	r2, [pc, #32]	; (8004d88 <HAL_MspInit+0x4c>)
 8004d68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d6c:	6413      	str	r3, [r2, #64]	; 0x40
 8004d6e:	4b06      	ldr	r3, [pc, #24]	; (8004d88 <HAL_MspInit+0x4c>)
 8004d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d76:	603b      	str	r3, [r7, #0]
 8004d78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004d7a:	bf00      	nop
 8004d7c:	370c      	adds	r7, #12
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr
 8004d86:	bf00      	nop
 8004d88:	40023800 	.word	0x40023800

08004d8c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b08a      	sub	sp, #40	; 0x28
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d94:	f107 0314 	add.w	r3, r7, #20
 8004d98:	2200      	movs	r2, #0
 8004d9a:	601a      	str	r2, [r3, #0]
 8004d9c:	605a      	str	r2, [r3, #4]
 8004d9e:	609a      	str	r2, [r3, #8]
 8004da0:	60da      	str	r2, [r3, #12]
 8004da2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a2f      	ldr	r2, [pc, #188]	; (8004e68 <HAL_ADC_MspInit+0xdc>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d157      	bne.n	8004e5e <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004dae:	2300      	movs	r3, #0
 8004db0:	613b      	str	r3, [r7, #16]
 8004db2:	4b2e      	ldr	r3, [pc, #184]	; (8004e6c <HAL_ADC_MspInit+0xe0>)
 8004db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004db6:	4a2d      	ldr	r2, [pc, #180]	; (8004e6c <HAL_ADC_MspInit+0xe0>)
 8004db8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dbc:	6453      	str	r3, [r2, #68]	; 0x44
 8004dbe:	4b2b      	ldr	r3, [pc, #172]	; (8004e6c <HAL_ADC_MspInit+0xe0>)
 8004dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dc6:	613b      	str	r3, [r7, #16]
 8004dc8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004dca:	2300      	movs	r3, #0
 8004dcc:	60fb      	str	r3, [r7, #12]
 8004dce:	4b27      	ldr	r3, [pc, #156]	; (8004e6c <HAL_ADC_MspInit+0xe0>)
 8004dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd2:	4a26      	ldr	r2, [pc, #152]	; (8004e6c <HAL_ADC_MspInit+0xe0>)
 8004dd4:	f043 0301 	orr.w	r3, r3, #1
 8004dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8004dda:	4b24      	ldr	r3, [pc, #144]	; (8004e6c <HAL_ADC_MspInit+0xe0>)
 8004ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dde:	f003 0301 	and.w	r3, r3, #1
 8004de2:	60fb      	str	r3, [r7, #12]
 8004de4:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4 
    */
    GPIO_InitStruct.Pin = adc0_Pin|adc1_Pin|adc2_Pin|adc3_Pin 
 8004de6:	231f      	movs	r3, #31
 8004de8:	617b      	str	r3, [r7, #20]
                          |adc4_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004dea:	2303      	movs	r3, #3
 8004dec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dee:	2300      	movs	r3, #0
 8004df0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004df2:	f107 0314 	add.w	r3, r7, #20
 8004df6:	4619      	mov	r1, r3
 8004df8:	481d      	ldr	r0, [pc, #116]	; (8004e70 <HAL_ADC_MspInit+0xe4>)
 8004dfa:	f7fd f89f 	bl	8001f3c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8004dfe:	4b1d      	ldr	r3, [pc, #116]	; (8004e74 <HAL_ADC_MspInit+0xe8>)
 8004e00:	4a1d      	ldr	r2, [pc, #116]	; (8004e78 <HAL_ADC_MspInit+0xec>)
 8004e02:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8004e04:	4b1b      	ldr	r3, [pc, #108]	; (8004e74 <HAL_ADC_MspInit+0xe8>)
 8004e06:	2200      	movs	r2, #0
 8004e08:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004e0a:	4b1a      	ldr	r3, [pc, #104]	; (8004e74 <HAL_ADC_MspInit+0xe8>)
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004e10:	4b18      	ldr	r3, [pc, #96]	; (8004e74 <HAL_ADC_MspInit+0xe8>)
 8004e12:	2200      	movs	r2, #0
 8004e14:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004e16:	4b17      	ldr	r3, [pc, #92]	; (8004e74 <HAL_ADC_MspInit+0xe8>)
 8004e18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004e1c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004e1e:	4b15      	ldr	r3, [pc, #84]	; (8004e74 <HAL_ADC_MspInit+0xe8>)
 8004e20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e24:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004e26:	4b13      	ldr	r3, [pc, #76]	; (8004e74 <HAL_ADC_MspInit+0xe8>)
 8004e28:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004e2c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004e2e:	4b11      	ldr	r3, [pc, #68]	; (8004e74 <HAL_ADC_MspInit+0xe8>)
 8004e30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004e34:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004e36:	4b0f      	ldr	r3, [pc, #60]	; (8004e74 <HAL_ADC_MspInit+0xe8>)
 8004e38:	2200      	movs	r2, #0
 8004e3a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004e3c:	4b0d      	ldr	r3, [pc, #52]	; (8004e74 <HAL_ADC_MspInit+0xe8>)
 8004e3e:	2200      	movs	r2, #0
 8004e40:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004e42:	480c      	ldr	r0, [pc, #48]	; (8004e74 <HAL_ADC_MspInit+0xe8>)
 8004e44:	f7fc fce2 	bl	800180c <HAL_DMA_Init>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d001      	beq.n	8004e52 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8004e4e:	f7ff ff6d 	bl	8004d2c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a07      	ldr	r2, [pc, #28]	; (8004e74 <HAL_ADC_MspInit+0xe8>)
 8004e56:	639a      	str	r2, [r3, #56]	; 0x38
 8004e58:	4a06      	ldr	r2, [pc, #24]	; (8004e74 <HAL_ADC_MspInit+0xe8>)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004e5e:	bf00      	nop
 8004e60:	3728      	adds	r7, #40	; 0x28
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	40012000 	.word	0x40012000
 8004e6c:	40023800 	.word	0x40023800
 8004e70:	40020000 	.word	0x40020000
 8004e74:	20000164 	.word	0x20000164
 8004e78:	40026410 	.word	0x40026410

08004e7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b08a      	sub	sp, #40	; 0x28
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e84:	f107 0314 	add.w	r3, r7, #20
 8004e88:	2200      	movs	r2, #0
 8004e8a:	601a      	str	r2, [r3, #0]
 8004e8c:	605a      	str	r2, [r3, #4]
 8004e8e:	609a      	str	r2, [r3, #8]
 8004e90:	60da      	str	r2, [r3, #12]
 8004e92:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a1d      	ldr	r2, [pc, #116]	; (8004f10 <HAL_UART_MspInit+0x94>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d134      	bne.n	8004f08 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	613b      	str	r3, [r7, #16]
 8004ea2:	4b1c      	ldr	r3, [pc, #112]	; (8004f14 <HAL_UART_MspInit+0x98>)
 8004ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea6:	4a1b      	ldr	r2, [pc, #108]	; (8004f14 <HAL_UART_MspInit+0x98>)
 8004ea8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004eac:	6413      	str	r3, [r2, #64]	; 0x40
 8004eae:	4b19      	ldr	r3, [pc, #100]	; (8004f14 <HAL_UART_MspInit+0x98>)
 8004eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004eb6:	613b      	str	r3, [r7, #16]
 8004eb8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004eba:	2300      	movs	r3, #0
 8004ebc:	60fb      	str	r3, [r7, #12]
 8004ebe:	4b15      	ldr	r3, [pc, #84]	; (8004f14 <HAL_UART_MspInit+0x98>)
 8004ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec2:	4a14      	ldr	r2, [pc, #80]	; (8004f14 <HAL_UART_MspInit+0x98>)
 8004ec4:	f043 0320 	orr.w	r3, r3, #32
 8004ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8004eca:	4b12      	ldr	r3, [pc, #72]	; (8004f14 <HAL_UART_MspInit+0x98>)
 8004ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ece:	f003 0320 	and.w	r3, r3, #32
 8004ed2:	60fb      	str	r3, [r7, #12]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
    /**UART8 GPIO Configuration    
    PF8     ------> UART8_RX
    PF9     ------> UART8_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004ed6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004eda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004edc:	2302      	movs	r3, #2
 8004ede:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8004ee8:	2308      	movs	r3, #8
 8004eea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004eec:	f107 0314 	add.w	r3, r7, #20
 8004ef0:	4619      	mov	r1, r3
 8004ef2:	4809      	ldr	r0, [pc, #36]	; (8004f18 <HAL_UART_MspInit+0x9c>)
 8004ef4:	f7fd f822 	bl	8001f3c <HAL_GPIO_Init>

    /* UART8 interrupt Init */
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 8004ef8:	2200      	movs	r2, #0
 8004efa:	2100      	movs	r1, #0
 8004efc:	2053      	movs	r0, #83	; 0x53
 8004efe:	f7fc fc4e 	bl	800179e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8004f02:	2053      	movs	r0, #83	; 0x53
 8004f04:	f7fc fc67 	bl	80017d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }

}
 8004f08:	bf00      	nop
 8004f0a:	3728      	adds	r7, #40	; 0x28
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	40007c00 	.word	0x40007c00
 8004f14:	40023800 	.word	0x40023800
 8004f18:	40021400 	.word	0x40021400

08004f1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004f20:	bf00      	nop
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr

08004f2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004f2a:	b480      	push	{r7}
 8004f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004f2e:	e7fe      	b.n	8004f2e <HardFault_Handler+0x4>

08004f30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004f30:	b480      	push	{r7}
 8004f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004f34:	e7fe      	b.n	8004f34 <MemManage_Handler+0x4>

08004f36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004f36:	b480      	push	{r7}
 8004f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004f3a:	e7fe      	b.n	8004f3a <BusFault_Handler+0x4>

08004f3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004f40:	e7fe      	b.n	8004f40 <UsageFault_Handler+0x4>

08004f42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004f42:	b480      	push	{r7}
 8004f44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004f46:	bf00      	nop
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr

08004f50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004f50:	b480      	push	{r7}
 8004f52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004f54:	bf00      	nop
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr

08004f5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004f5e:	b480      	push	{r7}
 8004f60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004f62:	bf00      	nop
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr

08004f6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004f70:	f7fb ff12 	bl	8000d98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004f74:	bf00      	nop
 8004f76:	bd80      	pop	{r7, pc}

08004f78 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8004f7c:	2001      	movs	r0, #1
 8004f7e:	f7fd f9bb 	bl	80022f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8004f82:	bf00      	nop
 8004f84:	bd80      	pop	{r7, pc}
	...

08004f88 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004f8c:	4802      	ldr	r0, [pc, #8]	; (8004f98 <DMA2_Stream0_IRQHandler+0x10>)
 8004f8e:	f7fc fd6d 	bl	8001a6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004f92:	bf00      	nop
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	20000164 	.word	0x20000164

08004f9c <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8004fa0:	4802      	ldr	r0, [pc, #8]	; (8004fac <UART8_IRQHandler+0x10>)
 8004fa2:	f7fd ff07 	bl	8002db4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8004fa6:	bf00      	nop
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	bf00      	nop
 8004fac:	200001c4 	.word	0x200001c4

08004fb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004fb4:	4b16      	ldr	r3, [pc, #88]	; (8005010 <SystemInit+0x60>)
 8004fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fba:	4a15      	ldr	r2, [pc, #84]	; (8005010 <SystemInit+0x60>)
 8004fbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004fc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004fc4:	4b13      	ldr	r3, [pc, #76]	; (8005014 <SystemInit+0x64>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a12      	ldr	r2, [pc, #72]	; (8005014 <SystemInit+0x64>)
 8004fca:	f043 0301 	orr.w	r3, r3, #1
 8004fce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004fd0:	4b10      	ldr	r3, [pc, #64]	; (8005014 <SystemInit+0x64>)
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004fd6:	4b0f      	ldr	r3, [pc, #60]	; (8005014 <SystemInit+0x64>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a0e      	ldr	r2, [pc, #56]	; (8005014 <SystemInit+0x64>)
 8004fdc:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004fe0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fe4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004fe6:	4b0b      	ldr	r3, [pc, #44]	; (8005014 <SystemInit+0x64>)
 8004fe8:	4a0b      	ldr	r2, [pc, #44]	; (8005018 <SystemInit+0x68>)
 8004fea:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004fec:	4b09      	ldr	r3, [pc, #36]	; (8005014 <SystemInit+0x64>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a08      	ldr	r2, [pc, #32]	; (8005014 <SystemInit+0x64>)
 8004ff2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ff6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004ff8:	4b06      	ldr	r3, [pc, #24]	; (8005014 <SystemInit+0x64>)
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004ffe:	4b04      	ldr	r3, [pc, #16]	; (8005010 <SystemInit+0x60>)
 8005000:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005004:	609a      	str	r2, [r3, #8]
#endif
}
 8005006:	bf00      	nop
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr
 8005010:	e000ed00 	.word	0xe000ed00
 8005014:	40023800 	.word	0x40023800
 8005018:	24003010 	.word	0x24003010

0800501c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 800501c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005054 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8005020:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005022:	e003      	b.n	800502c <LoopCopyDataInit>

08005024 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005024:	4b0c      	ldr	r3, [pc, #48]	; (8005058 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005026:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005028:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800502a:	3104      	adds	r1, #4

0800502c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800502c:	480b      	ldr	r0, [pc, #44]	; (800505c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800502e:	4b0c      	ldr	r3, [pc, #48]	; (8005060 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005030:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005032:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005034:	d3f6      	bcc.n	8005024 <CopyDataInit>
  ldr  r2, =_sbss
 8005036:	4a0b      	ldr	r2, [pc, #44]	; (8005064 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005038:	e002      	b.n	8005040 <LoopFillZerobss>

0800503a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800503a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800503c:	f842 3b04 	str.w	r3, [r2], #4

08005040 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005040:	4b09      	ldr	r3, [pc, #36]	; (8005068 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005042:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005044:	d3f9      	bcc.n	800503a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005046:	f7ff ffb3 	bl	8004fb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800504a:	f000 f811 	bl	8005070 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800504e:	f7fe fbc7 	bl	80037e0 <main>
  bx  lr    
 8005052:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8005054:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8005058:	08005110 	.word	0x08005110
  ldr  r0, =_sdata
 800505c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005060:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8005064:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8005068:	20000208 	.word	0x20000208

0800506c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800506c:	e7fe      	b.n	800506c <ADC_IRQHandler>
	...

08005070 <__libc_init_array>:
 8005070:	b570      	push	{r4, r5, r6, lr}
 8005072:	4e0d      	ldr	r6, [pc, #52]	; (80050a8 <__libc_init_array+0x38>)
 8005074:	4c0d      	ldr	r4, [pc, #52]	; (80050ac <__libc_init_array+0x3c>)
 8005076:	1ba4      	subs	r4, r4, r6
 8005078:	10a4      	asrs	r4, r4, #2
 800507a:	2500      	movs	r5, #0
 800507c:	42a5      	cmp	r5, r4
 800507e:	d109      	bne.n	8005094 <__libc_init_array+0x24>
 8005080:	4e0b      	ldr	r6, [pc, #44]	; (80050b0 <__libc_init_array+0x40>)
 8005082:	4c0c      	ldr	r4, [pc, #48]	; (80050b4 <__libc_init_array+0x44>)
 8005084:	f000 f820 	bl	80050c8 <_init>
 8005088:	1ba4      	subs	r4, r4, r6
 800508a:	10a4      	asrs	r4, r4, #2
 800508c:	2500      	movs	r5, #0
 800508e:	42a5      	cmp	r5, r4
 8005090:	d105      	bne.n	800509e <__libc_init_array+0x2e>
 8005092:	bd70      	pop	{r4, r5, r6, pc}
 8005094:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005098:	4798      	blx	r3
 800509a:	3501      	adds	r5, #1
 800509c:	e7ee      	b.n	800507c <__libc_init_array+0xc>
 800509e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80050a2:	4798      	blx	r3
 80050a4:	3501      	adds	r5, #1
 80050a6:	e7f2      	b.n	800508e <__libc_init_array+0x1e>
 80050a8:	08005108 	.word	0x08005108
 80050ac:	08005108 	.word	0x08005108
 80050b0:	08005108 	.word	0x08005108
 80050b4:	0800510c 	.word	0x0800510c

080050b8 <memset>:
 80050b8:	4402      	add	r2, r0
 80050ba:	4603      	mov	r3, r0
 80050bc:	4293      	cmp	r3, r2
 80050be:	d100      	bne.n	80050c2 <memset+0xa>
 80050c0:	4770      	bx	lr
 80050c2:	f803 1b01 	strb.w	r1, [r3], #1
 80050c6:	e7f9      	b.n	80050bc <memset+0x4>

080050c8 <_init>:
 80050c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ca:	bf00      	nop
 80050cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050ce:	bc08      	pop	{r3}
 80050d0:	469e      	mov	lr, r3
 80050d2:	4770      	bx	lr

080050d4 <_fini>:
 80050d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050d6:	bf00      	nop
 80050d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050da:	bc08      	pop	{r3}
 80050dc:	469e      	mov	lr, r3
 80050de:	4770      	bx	lr
